import { OnInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';
import { CartService } from '../../services/cart.service';
import { LocaleFormat } from '../../interfaces/locale-format';
/**
 * Renders a summary of the contents of the cart.
 *
 * @order 3
 * @howToUse "With a different icon"
 * ```html
 * <cart-summary [icon]="'http://myapi/assets/icon.svg'"></cart-summary>
 * ```
 *
 * @howToUse "Display different words when the cart changes"
 * ```html
 * <cart-summary [noItemsText]="'Zero items'" [oneItemText]="'Single item'" [manyItemsText]="'Exactly # items'"></cart-summary>
 * ```
 *
 * @howToUse "Using always a number to display item count"
 * ```html
 * <cart-summary [noItemsText]="'# items'" [oneItemText]="'# items'" [manyItemsText]="'# items'"></cart-summary>
 * ```
 *
 * @note {info} Inputs that allows you to customize text also accept the special character `#` to use numbers instead of words to
 * specify quantity, for example `'# bla'` will update to `'0 bla'` or `'1 bla'` when the number of items in the cart change.
 */
import * as ɵngcc0 from '@angular/core';
export declare class CartSummaryComponent implements OnInit, OnChanges, OnDestroy {
    private cartService;
    private _serviceSubscription;
    /**
     * The url of an icon to show on the summary. Use this to replace the default icon which is an svg with the image of a shopping cart.
     *
     * To use the default icon when you are using the `[icon]` input just set it to a falsy value, eg: `null`, `undefined`, `''`, etc.
     */
    icon: string;
    /**
     * The text to display when there are no items in the cart.
     */
    noItemsText: string;
    /**
     * The text to display when there is only one item in the cart.
     */
    oneItemText: string;
    /**
     * The text to display when there are several items in the cart.
     */
    manyItemsText: string;
    /**
     * Changes currency display format for the component. Overrides the value set from the service using `setCurrencyFormat`.
     */
    localeFormat: string;
    itemsText: any;
    totalItems: number;
    totalCost: number;
    format: LocaleFormat;
    constructor(cartService: CartService<any>);
    private updateItemsText();
    private updateComponent();
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CartSummaryComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CartSummaryComponent, "cart-summary", never, { "noItemsText": "noItemsText"; "oneItemText": "oneItemText"; "manyItemsText": "manyItemsText"; "icon": "icon"; "localeFormat": "localeFormat"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1zdW1tYXJ5LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjYXJ0LXN1bW1hcnkuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENhcnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2FydC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9jYWxlRm9ybWF0IH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9sb2NhbGUtZm9ybWF0JztcclxuLyoqXHJcbiAqIFJlbmRlcnMgYSBzdW1tYXJ5IG9mIHRoZSBjb250ZW50cyBvZiB0aGUgY2FydC5cclxuICpcclxuICogQG9yZGVyIDNcclxuICogQGhvd1RvVXNlIFwiV2l0aCBhIGRpZmZlcmVudCBpY29uXCJcclxuICogYGBgaHRtbFxyXG4gKiA8Y2FydC1zdW1tYXJ5IFtpY29uXT1cIidodHRwOi8vbXlhcGkvYXNzZXRzL2ljb24uc3ZnJ1wiPjwvY2FydC1zdW1tYXJ5PlxyXG4gKiBgYGBcclxuICpcclxuICogQGhvd1RvVXNlIFwiRGlzcGxheSBkaWZmZXJlbnQgd29yZHMgd2hlbiB0aGUgY2FydCBjaGFuZ2VzXCJcclxuICogYGBgaHRtbFxyXG4gKiA8Y2FydC1zdW1tYXJ5IFtub0l0ZW1zVGV4dF09XCInWmVybyBpdGVtcydcIiBbb25lSXRlbVRleHRdPVwiJ1NpbmdsZSBpdGVtJ1wiIFttYW55SXRlbXNUZXh0XT1cIidFeGFjdGx5ICMgaXRlbXMnXCI+PC9jYXJ0LXN1bW1hcnk+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAaG93VG9Vc2UgXCJVc2luZyBhbHdheXMgYSBudW1iZXIgdG8gZGlzcGxheSBpdGVtIGNvdW50XCJcclxuICogYGBgaHRtbFxyXG4gKiA8Y2FydC1zdW1tYXJ5IFtub0l0ZW1zVGV4dF09XCInIyBpdGVtcydcIiBbb25lSXRlbVRleHRdPVwiJyMgaXRlbXMnXCIgW21hbnlJdGVtc1RleHRdPVwiJyMgaXRlbXMnXCI+PC9jYXJ0LXN1bW1hcnk+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAbm90ZSB7aW5mb30gSW5wdXRzIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGV4dCBhbHNvIGFjY2VwdCB0aGUgc3BlY2lhbCBjaGFyYWN0ZXIgYCNgIHRvIHVzZSBudW1iZXJzIGluc3RlYWQgb2Ygd29yZHMgdG9cclxuICogc3BlY2lmeSBxdWFudGl0eSwgZm9yIGV4YW1wbGUgYCcjIGJsYSdgIHdpbGwgdXBkYXRlIHRvIGAnMCBibGEnYCBvciBgJzEgYmxhJ2Agd2hlbiB0aGUgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBjYXJ0IGNoYW5nZS5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcnRTdW1tYXJ5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIGNhcnRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBfc2VydmljZVN1YnNjcmlwdGlvbjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHVybCBvZiBhbiBpY29uIHRvIHNob3cgb24gdGhlIHN1bW1hcnkuIFVzZSB0aGlzIHRvIHJlcGxhY2UgdGhlIGRlZmF1bHQgaWNvbiB3aGljaCBpcyBhbiBzdmcgd2l0aCB0aGUgaW1hZ2Ugb2YgYSBzaG9wcGluZyBjYXJ0LlxyXG4gICAgICpcclxuICAgICAqIFRvIHVzZSB0aGUgZGVmYXVsdCBpY29uIHdoZW4geW91IGFyZSB1c2luZyB0aGUgYFtpY29uXWAgaW5wdXQganVzdCBzZXQgaXQgdG8gYSBmYWxzeSB2YWx1ZSwgZWc6IGBudWxsYCwgYHVuZGVmaW5lZGAsIGAnJ2AsIGV0Yy5cclxuICAgICAqL1xyXG4gICAgaWNvbjogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdGV4dCB0byBkaXNwbGF5IHdoZW4gdGhlcmUgYXJlIG5vIGl0ZW1zIGluIHRoZSBjYXJ0LlxyXG4gICAgICovXHJcbiAgICBub0l0ZW1zVGV4dDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdGV4dCB0byBkaXNwbGF5IHdoZW4gdGhlcmUgaXMgb25seSBvbmUgaXRlbSBpbiB0aGUgY2FydC5cclxuICAgICAqL1xyXG4gICAgb25lSXRlbVRleHQ6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRleHQgdG8gZGlzcGxheSB3aGVuIHRoZXJlIGFyZSBzZXZlcmFsIGl0ZW1zIGluIHRoZSBjYXJ0LlxyXG4gICAgICovXHJcbiAgICBtYW55SXRlbXNUZXh0OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZXMgY3VycmVuY3kgZGlzcGxheSBmb3JtYXQgZm9yIHRoZSBjb21wb25lbnQuIE92ZXJyaWRlcyB0aGUgdmFsdWUgc2V0IGZyb20gdGhlIHNlcnZpY2UgdXNpbmcgYHNldEN1cnJlbmN5Rm9ybWF0YC5cclxuICAgICAqL1xyXG4gICAgbG9jYWxlRm9ybWF0OiBzdHJpbmc7XHJcbiAgICBpdGVtc1RleHQ6IGFueTtcclxuICAgIHRvdGFsSXRlbXM6IG51bWJlcjtcclxuICAgIHRvdGFsQ29zdDogbnVtYmVyO1xyXG4gICAgZm9ybWF0OiBMb2NhbGVGb3JtYXQ7XHJcbiAgICBjb25zdHJ1Y3RvcihjYXJ0U2VydmljZTogQ2FydFNlcnZpY2U8YW55Pik7XHJcbiAgICBwcml2YXRlIHVwZGF0ZUl0ZW1zVGV4dCgpO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVDb21wb25lbnQoKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbn1cclxuIl19