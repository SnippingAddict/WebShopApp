import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CheckoutSettings, CheckoutType } from '../../types';
import { CartService } from '../../services/cart.service';
import { CheckoutPaypalSettings } from '../../interfaces/checkout-paypal-settings';
import { CheckoutHttpSettings } from '../../interfaces/checkout-http-settings';
import { LocaleFormat } from '../../interfaces/locale-format';
/**
 * Renders a button to initiate checkout of the cart.
 *
 * @order 6
 * @howToUse "With a custom button or projected content"
 * ```html
 * <cart-checkout [custom]="true">
 *    <button type="button" class="my-custom-class">Do checkout</button>
 * </cart-checkout>
 * ```
 *
 * @howToUse "With different text and classes"
 * ```html
 * <cart-checkout [buttonText]="'Add item'" [buttonClass]="'my-custom-class'">
 * </cart-checkout>
 * ```
 *
 * @howToUse "Using http in a protected endpoint"
 * ```html
 * <cart-checkout [service]="'http'" settings="settings">
 * </cart-checkout>
 * ```
 * ```typescript
 * export class MyComponent {
 *   settings: CheckoutHttpSettings = {
 *     method: 'POST',
 *     url: 'http://myapi.com/',
 *     options: { headers: { Authorization: 'Bearer my-auth-token' } }
 *   };
 * }
 * ```
 *
 * @howToUse "Using the PayPal service"
 * ```html
 * <cart-checkout [service]="'paypal'" settings="settings">
 * </cart-checkout>
 * ```
 * ```typescript
 * export class MyComponent {
 *  settings: CheckoutPaypalSettings = {
 *    business: 'myaccount@paypal.com',
 *    itemName: 'myMarketplaceAppCart',
 *    itemNumber: '1234',
 *    serviceName: 'MyBusiness',
 *    country: 'US'
 *  };
 * }
 * ```
 *
 * @note {warning} This component captures clicks events bubbling from its projected content. Make sure the event keeps bubbling only when
 * you want the checkout operation to start.
 *
 * @note {warning} When the `[service]` is set to `paypal` an actual PayPal button is rendered. None of the inputs `custom`, `buttonText`
 * or `buttonClass` have any effect.
 */
import * as ɵngcc0 from '@angular/core';
export declare class CartCheckoutComponent implements OnChanges, OnInit, OnDestroy {
    private cartService;
    private httpClient;
    private locale;
    private _serviceSubscription;
    private getLocaleCurrencyName;
    empty: boolean;
    cost: number;
    taxRate: number;
    shipping: number;
    httpSettings: CheckoutHttpSettings;
    paypalSettings: CheckoutPaypalSettings;
    format: LocaleFormat;
    currency: string;
    paypalLocale: string;
    /**
     * If `false` displays a default button provided by the component. When set to `true` projects the contents of the component.
     */
    custom: boolean;
    /**
     * Changes the default text of the component's button.
     */
    buttonText: string;
    /**
     * Changes the default text of the component's button.
     */
    buttonClass: string;
    /**
     * Sets the type of service to be used when initiating the checkout.
     */
    service: CheckoutType;
    /**
     * Depending on the type of the service you might need to add some configuration to it. This input allows you to change that
     * configuration.
     */
    settings: CheckoutSettings;
    /**
     * Changes currency display format for the component. Overrides the value set from the service using `setCurrencyFormat`.
     */
    localeFormat: string;
    /**
     * Emits the result of the checkout operation. If the service is set to `'log'` it emits the entire cart object including tax rates and
     * shipping info. If is set to `'http'` it emits an `HttpResponse` object with body, headers, etc as it was received by the remote server.
     *
     * > When `[service]` is set to `'paypal'` this event is never emitted.
     */
    checkout: EventEmitter<any>;
    /**
     * When the `[service]` is set to `'http'` and the checkout operation fails the thrown error can be captured using this output.
     *
     * The emitted value is the complete `HttpErrorResponse` object returned by `HttpClient` so you can inspect other properties like status
     * codes, headers, messages, etc.
     */
    error: EventEmitter<any>;
    constructor(cartService: CartService<any>, httpClient: HttpClient, locale: string);
    ngOnInit(): void;
    private updateCart(formatChange);
    private updateLocale();
    private getCurrency(locale);
    doCheckout(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CartCheckoutComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CartCheckoutComponent, "cart-checkout", never, { "custom": "custom"; "buttonText": "buttonText"; "buttonClass": "buttonClass"; "service": "service"; "settings": "settings"; "localeFormat": "localeFormat"; }, { "checkout": "checkout"; "error": "error"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1jaGVja291dC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2FydC1jaGVja291dC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IENoZWNrb3V0U2V0dGluZ3MsIENoZWNrb3V0VHlwZSB9IGZyb20gJy4uLy4uL3R5cGVzJztcclxuaW1wb3J0IHsgQ2FydFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jYXJ0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDaGVja291dFBheXBhbFNldHRpbmdzIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jaGVja291dC1wYXlwYWwtc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBDaGVja291dEh0dHBTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY2hlY2tvdXQtaHR0cC1zZXR0aW5ncyc7XHJcbmltcG9ydCB7IExvY2FsZUZvcm1hdCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvbG9jYWxlLWZvcm1hdCc7XHJcbi8qKlxyXG4gKiBSZW5kZXJzIGEgYnV0dG9uIHRvIGluaXRpYXRlIGNoZWNrb3V0IG9mIHRoZSBjYXJ0LlxyXG4gKlxyXG4gKiBAb3JkZXIgNlxyXG4gKiBAaG93VG9Vc2UgXCJXaXRoIGEgY3VzdG9tIGJ1dHRvbiBvciBwcm9qZWN0ZWQgY29udGVudFwiXHJcbiAqIGBgYGh0bWxcclxuICogPGNhcnQtY2hlY2tvdXQgW2N1c3RvbV09XCJ0cnVlXCI+XHJcbiAqICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibXktY3VzdG9tLWNsYXNzXCI+RG8gY2hlY2tvdXQ8L2J1dHRvbj5cclxuICogPC9jYXJ0LWNoZWNrb3V0PlxyXG4gKiBgYGBcclxuICpcclxuICogQGhvd1RvVXNlIFwiV2l0aCBkaWZmZXJlbnQgdGV4dCBhbmQgY2xhc3Nlc1wiXHJcbiAqIGBgYGh0bWxcclxuICogPGNhcnQtY2hlY2tvdXQgW2J1dHRvblRleHRdPVwiJ0FkZCBpdGVtJ1wiIFtidXR0b25DbGFzc109XCInbXktY3VzdG9tLWNsYXNzJ1wiPlxyXG4gKiA8L2NhcnQtY2hlY2tvdXQ+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAaG93VG9Vc2UgXCJVc2luZyBodHRwIGluIGEgcHJvdGVjdGVkIGVuZHBvaW50XCJcclxuICogYGBgaHRtbFxyXG4gKiA8Y2FydC1jaGVja291dCBbc2VydmljZV09XCInaHR0cCdcIiBzZXR0aW5ncz1cInNldHRpbmdzXCI+XHJcbiAqIDwvY2FydC1jaGVja291dD5cclxuICogYGBgXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IHtcclxuICogICBzZXR0aW5nczogQ2hlY2tvdXRIdHRwU2V0dGluZ3MgPSB7XHJcbiAqICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICogICAgIHVybDogJ2h0dHA6Ly9teWFwaS5jb20vJyxcclxuICogICAgIG9wdGlvbnM6IHsgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiAnQmVhcmVyIG15LWF1dGgtdG9rZW4nIH0gfVxyXG4gKiAgIH07XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBob3dUb1VzZSBcIlVzaW5nIHRoZSBQYXlQYWwgc2VydmljZVwiXHJcbiAqIGBgYGh0bWxcclxuICogPGNhcnQtY2hlY2tvdXQgW3NlcnZpY2VdPVwiJ3BheXBhbCdcIiBzZXR0aW5ncz1cInNldHRpbmdzXCI+XHJcbiAqIDwvY2FydC1jaGVja291dD5cclxuICogYGBgXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IHtcclxuICogIHNldHRpbmdzOiBDaGVja291dFBheXBhbFNldHRpbmdzID0ge1xyXG4gKiAgICBidXNpbmVzczogJ215YWNjb3VudEBwYXlwYWwuY29tJyxcclxuICogICAgaXRlbU5hbWU6ICdteU1hcmtldHBsYWNlQXBwQ2FydCcsXHJcbiAqICAgIGl0ZW1OdW1iZXI6ICcxMjM0JyxcclxuICogICAgc2VydmljZU5hbWU6ICdNeUJ1c2luZXNzJyxcclxuICogICAgY291bnRyeTogJ1VTJ1xyXG4gKiAgfTtcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQG5vdGUge3dhcm5pbmd9IFRoaXMgY29tcG9uZW50IGNhcHR1cmVzIGNsaWNrcyBldmVudHMgYnViYmxpbmcgZnJvbSBpdHMgcHJvamVjdGVkIGNvbnRlbnQuIE1ha2Ugc3VyZSB0aGUgZXZlbnQga2VlcHMgYnViYmxpbmcgb25seSB3aGVuXHJcbiAqIHlvdSB3YW50IHRoZSBjaGVja291dCBvcGVyYXRpb24gdG8gc3RhcnQuXHJcbiAqXHJcbiAqIEBub3RlIHt3YXJuaW5nfSBXaGVuIHRoZSBgW3NlcnZpY2VdYCBpcyBzZXQgdG8gYHBheXBhbGAgYW4gYWN0dWFsIFBheVBhbCBidXR0b24gaXMgcmVuZGVyZWQuIE5vbmUgb2YgdGhlIGlucHV0cyBgY3VzdG9tYCwgYGJ1dHRvblRleHRgXHJcbiAqIG9yIGBidXR0b25DbGFzc2AgaGF2ZSBhbnkgZWZmZWN0LlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2FydENoZWNrb3V0Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIGNhcnRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBodHRwQ2xpZW50O1xyXG4gICAgcHJpdmF0ZSBsb2NhbGU7XHJcbiAgICBwcml2YXRlIF9zZXJ2aWNlU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBnZXRMb2NhbGVDdXJyZW5jeU5hbWU7XHJcbiAgICBlbXB0eTogYm9vbGVhbjtcclxuICAgIGNvc3Q6IG51bWJlcjtcclxuICAgIHRheFJhdGU6IG51bWJlcjtcclxuICAgIHNoaXBwaW5nOiBudW1iZXI7XHJcbiAgICBodHRwU2V0dGluZ3M6IENoZWNrb3V0SHR0cFNldHRpbmdzO1xyXG4gICAgcGF5cGFsU2V0dGluZ3M6IENoZWNrb3V0UGF5cGFsU2V0dGluZ3M7XHJcbiAgICBmb3JtYXQ6IExvY2FsZUZvcm1hdDtcclxuICAgIGN1cnJlbmN5OiBzdHJpbmc7XHJcbiAgICBwYXlwYWxMb2NhbGU6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogSWYgYGZhbHNlYCBkaXNwbGF5cyBhIGRlZmF1bHQgYnV0dG9uIHByb3ZpZGVkIGJ5IHRoZSBjb21wb25lbnQuIFdoZW4gc2V0IHRvIGB0cnVlYCBwcm9qZWN0cyB0aGUgY29udGVudHMgb2YgdGhlIGNvbXBvbmVudC5cclxuICAgICAqL1xyXG4gICAgY3VzdG9tOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGFuZ2VzIHRoZSBkZWZhdWx0IHRleHQgb2YgdGhlIGNvbXBvbmVudCdzIGJ1dHRvbi5cclxuICAgICAqL1xyXG4gICAgYnV0dG9uVGV4dDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGFuZ2VzIHRoZSBkZWZhdWx0IHRleHQgb2YgdGhlIGNvbXBvbmVudCdzIGJ1dHRvbi5cclxuICAgICAqL1xyXG4gICAgYnV0dG9uQ2xhc3M6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgdHlwZSBvZiBzZXJ2aWNlIHRvIGJlIHVzZWQgd2hlbiBpbml0aWF0aW5nIHRoZSBjaGVja291dC5cclxuICAgICAqL1xyXG4gICAgc2VydmljZTogQ2hlY2tvdXRUeXBlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXBlbmRpbmcgb24gdGhlIHR5cGUgb2YgdGhlIHNlcnZpY2UgeW91IG1pZ2h0IG5lZWQgdG8gYWRkIHNvbWUgY29uZmlndXJhdGlvbiB0byBpdC4gVGhpcyBpbnB1dCBhbGxvd3MgeW91IHRvIGNoYW5nZSB0aGF0XHJcbiAgICAgKiBjb25maWd1cmF0aW9uLlxyXG4gICAgICovXHJcbiAgICBzZXR0aW5nczogQ2hlY2tvdXRTZXR0aW5ncztcclxuICAgIC8qKlxyXG4gICAgICogQ2hhbmdlcyBjdXJyZW5jeSBkaXNwbGF5IGZvcm1hdCBmb3IgdGhlIGNvbXBvbmVudC4gT3ZlcnJpZGVzIHRoZSB2YWx1ZSBzZXQgZnJvbSB0aGUgc2VydmljZSB1c2luZyBgc2V0Q3VycmVuY3lGb3JtYXRgLlxyXG4gICAgICovXHJcbiAgICBsb2NhbGVGb3JtYXQ6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogRW1pdHMgdGhlIHJlc3VsdCBvZiB0aGUgY2hlY2tvdXQgb3BlcmF0aW9uLiBJZiB0aGUgc2VydmljZSBpcyBzZXQgdG8gYCdsb2cnYCBpdCBlbWl0cyB0aGUgZW50aXJlIGNhcnQgb2JqZWN0IGluY2x1ZGluZyB0YXggcmF0ZXMgYW5kXHJcbiAgICAgKiBzaGlwcGluZyBpbmZvLiBJZiBpcyBzZXQgdG8gYCdodHRwJ2AgaXQgZW1pdHMgYW4gYEh0dHBSZXNwb25zZWAgb2JqZWN0IHdpdGggYm9keSwgaGVhZGVycywgZXRjIGFzIGl0IHdhcyByZWNlaXZlZCBieSB0aGUgcmVtb3RlIHNlcnZlci5cclxuICAgICAqXHJcbiAgICAgKiA+IFdoZW4gYFtzZXJ2aWNlXWAgaXMgc2V0IHRvIGAncGF5cGFsJ2AgdGhpcyBldmVudCBpcyBuZXZlciBlbWl0dGVkLlxyXG4gICAgICovXHJcbiAgICBjaGVja291dDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gdGhlIGBbc2VydmljZV1gIGlzIHNldCB0byBgJ2h0dHAnYCBhbmQgdGhlIGNoZWNrb3V0IG9wZXJhdGlvbiBmYWlscyB0aGUgdGhyb3duIGVycm9yIGNhbiBiZSBjYXB0dXJlZCB1c2luZyB0aGlzIG91dHB1dC5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgZW1pdHRlZCB2YWx1ZSBpcyB0aGUgY29tcGxldGUgYEh0dHBFcnJvclJlc3BvbnNlYCBvYmplY3QgcmV0dXJuZWQgYnkgYEh0dHBDbGllbnRgIHNvIHlvdSBjYW4gaW5zcGVjdCBvdGhlciBwcm9wZXJ0aWVzIGxpa2Ugc3RhdHVzXHJcbiAgICAgKiBjb2RlcywgaGVhZGVycywgbWVzc2FnZXMsIGV0Yy5cclxuICAgICAqL1xyXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgY29uc3RydWN0b3IoY2FydFNlcnZpY2U6IENhcnRTZXJ2aWNlPGFueT4sIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsIGxvY2FsZTogc3RyaW5nKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIHVwZGF0ZUNhcnQoZm9ybWF0Q2hhbmdlKTtcclxuICAgIHByaXZhdGUgdXBkYXRlTG9jYWxlKCk7XHJcbiAgICBwcml2YXRlIGdldEN1cnJlbmN5KGxvY2FsZSk7XHJcbiAgICBkb0NoZWNrb3V0KCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbn1cclxuIl19