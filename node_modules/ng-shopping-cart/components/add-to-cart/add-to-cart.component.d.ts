import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DropdownValue } from '../../interfaces/dropdown-value';
import { AddToCartPosition, AddToCartType } from '../../types';
import { CartService } from '../../services/cart.service';
import { CartItem } from '../../classes/cart-item';
/**
 * A component to add items to the cart by pressing a button. Has different built-in editors to select quantity.
 *
 * @order 1
 * @howToUse "With a custom button or projected content"
 * ```html
 * <add-to-cart [item]="item" [custom]="true">
 *    <button type="button" class="my-custom-class">Add item</button>
 * </add-to-cart>
 * ```
 *
 * @howToUse "With different text and classes"
 * ```html
 * <add-to-cart [item]="item" [buttonText]="'Add item'" [buttonClass]="'my-custom-class'">
 * </add-to-cart>
 * ```
 *
 * @howToUse "With a html number input positioned on top"
 * ```html
 * <add-to-cart [item]="item" [type]="'number'" [position]="'top'">
 * </add-to-cart>
 * ```
 *
 * @howToUse "With a select for selecting quantity"
 * ```html
 * <add-to-cart [item]="item" [type]="'dropdown'" [dropdown]="[{ label: 'One item', value: 1 }, { label: 'Two items', value: 2 }]">
 * </add-to-cart>
 * ```
 *
 * @howToUse "With the default button and different quantity"
 * ```html
 * <add-to-cart [item]="item" [quantity]="5">
 * </add-to-cart>
 * ```
 *
 * @note {warning} This component captures click events that bubble from its projected content if you are using `[custom]=true` therefore if
 * you have html content other than buttons inside you must stop the event propagation unless the click originated in the button that
 * add the items to the cart.
 */
import * as ɵngcc0 from '@angular/core';
export declare class AddToCartComponent implements OnInit, OnChanges {
    private cartService;
    private _editorQuantity;
    containerClass: any;
    hasEditor: boolean;
    horizontalEditor: boolean;
    editorPrecedence: 'before' | 'after';
    /**
     * If `false` displays a default button provided by the component, otherwise projects the contents of the component to be used as a
     * button.
     */
    custom: boolean;
    /**
     * The item that will be added to the cart on click. If no item is provided the button will be disabled unless you use custom buttons.
     *
     * If you specify an editor using the type input the quantity of the item might be modified prior to insertion in the service.
     */
    item: CartItem;
    /**
     * Changes the default text of the component's button.
     */
    buttonText: string;
    /**
     * Changes the default CSS class of the component's button.
     */
    buttonClass: string;
    /**
     * Renders a button or a button with an editor to select the quantity of the item that will be added in the cart. When it has a value
     * other than `'button'` an editor is displayed depending on the selected `[type]`; it can be a `select`, or a text or a number `input`.
     *
     * > Do not confuse this input with the html attribute `type`. The default button is always generated with this attribute set to
     * `button` to prevent accidental form submissions.
     */
    type: AddToCartType;
    /**
     * Sets the position where the editor will be placed. If the `[type]` is set to `'button'` no editor is displayed and this setting has
     * no effect.
     */
    position: AddToCartPosition;
    /**
     * If `[type]` is set to `'dropdown'` it can be used to set the options of the rendered `select` editor. Is an array of objects with
     * label and a value properties used to populate the select's `option` elements.
     */
    dropdown: DropdownValue[];
    /**
     * If you use this binding you can easily override the quantity that will be added to the cart when the button is clicked.
     *
     * > When the `[type]` is **not** set to `'button'` this binding is ignored and the value from the editor is used instead.
     */
    quantity: number;
    /**
     * This event is fired when the component uses an editor and its value is changed by the user.
     */
    change: EventEmitter<number>;
    /**
     * This event is fired when the item is added to the cart.
     */
    added: EventEmitter<CartItem>;
    editorQuantity: number;
    constructor(cartService: CartService<any>);
    ngOnInit(): void;
    private itemQuantity();
    ngOnChanges(changes: SimpleChanges): void;
    addToCart(evt: any): void;
    computeClass(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AddToCartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AddToCartComponent, "add-to-cart", never, { "custom": "custom"; "buttonText": "buttonText"; "buttonClass": "buttonClass"; "type": "type"; "position": "position"; "dropdown": "dropdown"; "item": "item"; "quantity": "quantity"; }, { "change": "change"; "added": "added"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXRvLWNhcnQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFkZC10by1jYXJ0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERyb3Bkb3duVmFsdWUgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2Ryb3Bkb3duLXZhbHVlJztcclxuaW1wb3J0IHsgQWRkVG9DYXJ0UG9zaXRpb24sIEFkZFRvQ2FydFR5cGUgfSBmcm9tICcuLi8uLi90eXBlcyc7XHJcbmltcG9ydCB7IENhcnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2FydC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2FydEl0ZW0gfSBmcm9tICcuLi8uLi9jbGFzc2VzL2NhcnQtaXRlbSc7XHJcbi8qKlxyXG4gKiBBIGNvbXBvbmVudCB0byBhZGQgaXRlbXMgdG8gdGhlIGNhcnQgYnkgcHJlc3NpbmcgYSBidXR0b24uIEhhcyBkaWZmZXJlbnQgYnVpbHQtaW4gZWRpdG9ycyB0byBzZWxlY3QgcXVhbnRpdHkuXHJcbiAqXHJcbiAqIEBvcmRlciAxXHJcbiAqIEBob3dUb1VzZSBcIldpdGggYSBjdXN0b20gYnV0dG9uIG9yIHByb2plY3RlZCBjb250ZW50XCJcclxuICogYGBgaHRtbFxyXG4gKiA8YWRkLXRvLWNhcnQgW2l0ZW1dPVwiaXRlbVwiIFtjdXN0b21dPVwidHJ1ZVwiPlxyXG4gKiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIm15LWN1c3RvbS1jbGFzc1wiPkFkZCBpdGVtPC9idXR0b24+XHJcbiAqIDwvYWRkLXRvLWNhcnQ+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAaG93VG9Vc2UgXCJXaXRoIGRpZmZlcmVudCB0ZXh0IGFuZCBjbGFzc2VzXCJcclxuICogYGBgaHRtbFxyXG4gKiA8YWRkLXRvLWNhcnQgW2l0ZW1dPVwiaXRlbVwiIFtidXR0b25UZXh0XT1cIidBZGQgaXRlbSdcIiBbYnV0dG9uQ2xhc3NdPVwiJ215LWN1c3RvbS1jbGFzcydcIj5cclxuICogPC9hZGQtdG8tY2FydD5cclxuICogYGBgXHJcbiAqXHJcbiAqIEBob3dUb1VzZSBcIldpdGggYSBodG1sIG51bWJlciBpbnB1dCBwb3NpdGlvbmVkIG9uIHRvcFwiXHJcbiAqIGBgYGh0bWxcclxuICogPGFkZC10by1jYXJ0IFtpdGVtXT1cIml0ZW1cIiBbdHlwZV09XCInbnVtYmVyJ1wiIFtwb3NpdGlvbl09XCIndG9wJ1wiPlxyXG4gKiA8L2FkZC10by1jYXJ0PlxyXG4gKiBgYGBcclxuICpcclxuICogQGhvd1RvVXNlIFwiV2l0aCBhIHNlbGVjdCBmb3Igc2VsZWN0aW5nIHF1YW50aXR5XCJcclxuICogYGBgaHRtbFxyXG4gKiA8YWRkLXRvLWNhcnQgW2l0ZW1dPVwiaXRlbVwiIFt0eXBlXT1cIidkcm9wZG93bidcIiBbZHJvcGRvd25dPVwiW3sgbGFiZWw6ICdPbmUgaXRlbScsIHZhbHVlOiAxIH0sIHsgbGFiZWw6ICdUd28gaXRlbXMnLCB2YWx1ZTogMiB9XVwiPlxyXG4gKiA8L2FkZC10by1jYXJ0PlxyXG4gKiBgYGBcclxuICpcclxuICogQGhvd1RvVXNlIFwiV2l0aCB0aGUgZGVmYXVsdCBidXR0b24gYW5kIGRpZmZlcmVudCBxdWFudGl0eVwiXHJcbiAqIGBgYGh0bWxcclxuICogPGFkZC10by1jYXJ0IFtpdGVtXT1cIml0ZW1cIiBbcXVhbnRpdHldPVwiNVwiPlxyXG4gKiA8L2FkZC10by1jYXJ0PlxyXG4gKiBgYGBcclxuICpcclxuICogQG5vdGUge3dhcm5pbmd9IFRoaXMgY29tcG9uZW50IGNhcHR1cmVzIGNsaWNrIGV2ZW50cyB0aGF0IGJ1YmJsZSBmcm9tIGl0cyBwcm9qZWN0ZWQgY29udGVudCBpZiB5b3UgYXJlIHVzaW5nIGBbY3VzdG9tXT10cnVlYCB0aGVyZWZvcmUgaWZcclxuICogeW91IGhhdmUgaHRtbCBjb250ZW50IG90aGVyIHRoYW4gYnV0dG9ucyBpbnNpZGUgeW91IG11c3Qgc3RvcCB0aGUgZXZlbnQgcHJvcGFnYXRpb24gdW5sZXNzIHRoZSBjbGljayBvcmlnaW5hdGVkIGluIHRoZSBidXR0b24gdGhhdFxyXG4gKiBhZGQgdGhlIGl0ZW1zIHRvIHRoZSBjYXJ0LlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWRkVG9DYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gICAgcHJpdmF0ZSBjYXJ0U2VydmljZTtcclxuICAgIHByaXZhdGUgX2VkaXRvclF1YW50aXR5O1xyXG4gICAgY29udGFpbmVyQ2xhc3M6IGFueTtcclxuICAgIGhhc0VkaXRvcjogYm9vbGVhbjtcclxuICAgIGhvcml6b250YWxFZGl0b3I6IGJvb2xlYW47XHJcbiAgICBlZGl0b3JQcmVjZWRlbmNlOiAnYmVmb3JlJyB8ICdhZnRlcic7XHJcbiAgICAvKipcclxuICAgICAqIElmIGBmYWxzZWAgZGlzcGxheXMgYSBkZWZhdWx0IGJ1dHRvbiBwcm92aWRlZCBieSB0aGUgY29tcG9uZW50LCBvdGhlcndpc2UgcHJvamVjdHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBjb21wb25lbnQgdG8gYmUgdXNlZCBhcyBhXHJcbiAgICAgKiBidXR0b24uXHJcbiAgICAgKi9cclxuICAgIGN1c3RvbTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGl0ZW0gdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBjYXJ0IG9uIGNsaWNrLiBJZiBubyBpdGVtIGlzIHByb3ZpZGVkIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZCB1bmxlc3MgeW91IHVzZSBjdXN0b20gYnV0dG9ucy5cclxuICAgICAqXHJcbiAgICAgKiBJZiB5b3Ugc3BlY2lmeSBhbiBlZGl0b3IgdXNpbmcgdGhlIHR5cGUgaW5wdXQgdGhlIHF1YW50aXR5IG9mIHRoZSBpdGVtIG1pZ2h0IGJlIG1vZGlmaWVkIHByaW9yIHRvIGluc2VydGlvbiBpbiB0aGUgc2VydmljZS5cclxuICAgICAqL1xyXG4gICAgaXRlbTogQ2FydEl0ZW07XHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZXMgdGhlIGRlZmF1bHQgdGV4dCBvZiB0aGUgY29tcG9uZW50J3MgYnV0dG9uLlxyXG4gICAgICovXHJcbiAgICBidXR0b25UZXh0OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZXMgdGhlIGRlZmF1bHQgQ1NTIGNsYXNzIG9mIHRoZSBjb21wb25lbnQncyBidXR0b24uXHJcbiAgICAgKi9cclxuICAgIGJ1dHRvbkNsYXNzOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlcnMgYSBidXR0b24gb3IgYSBidXR0b24gd2l0aCBhbiBlZGl0b3IgdG8gc2VsZWN0IHRoZSBxdWFudGl0eSBvZiB0aGUgaXRlbSB0aGF0IHdpbGwgYmUgYWRkZWQgaW4gdGhlIGNhcnQuIFdoZW4gaXQgaGFzIGEgdmFsdWVcclxuICAgICAqIG90aGVyIHRoYW4gYCdidXR0b24nYCBhbiBlZGl0b3IgaXMgZGlzcGxheWVkIGRlcGVuZGluZyBvbiB0aGUgc2VsZWN0ZWQgYFt0eXBlXWA7IGl0IGNhbiBiZSBhIGBzZWxlY3RgLCBvciBhIHRleHQgb3IgYSBudW1iZXIgYGlucHV0YC5cclxuICAgICAqXHJcbiAgICAgKiA+IERvIG5vdCBjb25mdXNlIHRoaXMgaW5wdXQgd2l0aCB0aGUgaHRtbCBhdHRyaWJ1dGUgYHR5cGVgLiBUaGUgZGVmYXVsdCBidXR0b24gaXMgYWx3YXlzIGdlbmVyYXRlZCB3aXRoIHRoaXMgYXR0cmlidXRlIHNldCB0b1xyXG4gICAgICogYGJ1dHRvbmAgdG8gcHJldmVudCBhY2NpZGVudGFsIGZvcm0gc3VibWlzc2lvbnMuXHJcbiAgICAgKi9cclxuICAgIHR5cGU6IEFkZFRvQ2FydFR5cGU7XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIHBvc2l0aW9uIHdoZXJlIHRoZSBlZGl0b3Igd2lsbCBiZSBwbGFjZWQuIElmIHRoZSBgW3R5cGVdYCBpcyBzZXQgdG8gYCdidXR0b24nYCBubyBlZGl0b3IgaXMgZGlzcGxheWVkIGFuZCB0aGlzIHNldHRpbmcgaGFzXHJcbiAgICAgKiBubyBlZmZlY3QuXHJcbiAgICAgKi9cclxuICAgIHBvc2l0aW9uOiBBZGRUb0NhcnRQb3NpdGlvbjtcclxuICAgIC8qKlxyXG4gICAgICogSWYgYFt0eXBlXWAgaXMgc2V0IHRvIGAnZHJvcGRvd24nYCBpdCBjYW4gYmUgdXNlZCB0byBzZXQgdGhlIG9wdGlvbnMgb2YgdGhlIHJlbmRlcmVkIGBzZWxlY3RgIGVkaXRvci4gSXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aXRoXHJcbiAgICAgKiBsYWJlbCBhbmQgYSB2YWx1ZSBwcm9wZXJ0aWVzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCdzIGBvcHRpb25gIGVsZW1lbnRzLlxyXG4gICAgICovXHJcbiAgICBkcm9wZG93bjogRHJvcGRvd25WYWx1ZVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB5b3UgdXNlIHRoaXMgYmluZGluZyB5b3UgY2FuIGVhc2lseSBvdmVycmlkZSB0aGUgcXVhbnRpdHkgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBjYXJ0IHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLlxyXG4gICAgICpcclxuICAgICAqID4gV2hlbiB0aGUgYFt0eXBlXWAgaXMgKipub3QqKiBzZXQgdG8gYCdidXR0b24nYCB0aGlzIGJpbmRpbmcgaXMgaWdub3JlZCBhbmQgdGhlIHZhbHVlIGZyb20gdGhlIGVkaXRvciBpcyB1c2VkIGluc3RlYWQuXHJcbiAgICAgKi9cclxuICAgIHF1YW50aXR5OiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHVzZXMgYW4gZWRpdG9yIGFuZCBpdHMgdmFsdWUgaXMgY2hhbmdlZCBieSB0aGUgdXNlci5cclxuICAgICAqL1xyXG4gICAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSBpdGVtIGlzIGFkZGVkIHRvIHRoZSBjYXJ0LlxyXG4gICAgICovXHJcbiAgICBhZGRlZDogRXZlbnRFbWl0dGVyPENhcnRJdGVtPjtcclxuICAgIGVkaXRvclF1YW50aXR5OiBudW1iZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihjYXJ0U2VydmljZTogQ2FydFNlcnZpY2U8YW55Pik7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBpdGVtUXVhbnRpdHkoKTtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgYWRkVG9DYXJ0KGV2dDogYW55KTogdm9pZDtcclxuICAgIGNvbXB1dGVDbGFzcygpOiB2b2lkO1xyXG59XHJcbiJdfQ==