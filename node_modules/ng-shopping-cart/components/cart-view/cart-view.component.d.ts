import { OnInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';
import { CartItem } from '../../classes/cart-item';
import { CartService } from '../../services/cart.service';
import { CartViewDisplay } from '../../types';
import { LocaleFormat } from '../../interfaces/locale-format';
/**
 * Renders a view of the cart.
 *
 * @order 2
 * @howToUse "Using responsive layout"
 * ```html
 * <cart-view [display]="'responsive'">
 * </cart-view>
 * ```
 *
 * @howToUse "No images and using scrollbars on small screens"
 * ```html
 * <cart-view [images]="false" [display]="'responsive-table'">
 * </cart-view>
 * ```
 *
 * @howToUse "Using different text for headers"
 * ```html
 * <cart-view [emptyText]="headers.empty" [nameHeaderText]="headers.name" [quantityHeaderText]="headers.quantity"
 *  [priceHeaderText]="headers.quantity" [totalHeaderText]="headers.total" [taxFooterText]="footers.tax"
 *  [shippingFooterText]="footers.shipping" [totalFooterText]="footers.total"
 * >
 * </cart-view>
 * ```
 * ```typescript
 * export class MyComponent {
 *   headers = {
 *     empty: 'No items. Add some to the cart',
 *     name: 'Description',
 *     quantity: 'Amount',
 *     price: 'Cost',
 *     total: 'Total x item',
 *   }
 *   footers = {
 *     tax: 'Tax rate',
 *     shipping: 'Shipping cost',
 *     total: 'Total cost'
 *   }
 * }
 * ```
 *
 * @howToUse "Change the default empty cart content"
 * ```html
 * <cart-view [customEmptyContent]="true">
 *   <div class="my-empty-cart-view">
 *       <span style="font-size: 36px;" class="glyphicon glyphicon-shopping-cart" aria-hidden="true"></span>
 *       Your cart is empty
 *   </div>
 * </cart-view>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class CartViewComponent implements OnInit, OnChanges, OnDestroy {
    private cartService;
    private _serviceSubscription;
    /**
     * Changes the appearance how the cart view displays in different screen sizes
     */
    display: CartViewDisplay;
    /**
     * Whether to include images in the cart or not.
     */
    images: boolean;
    /**
     * The text to show when the cart has no items in it.
     */
    emptyText: string;
    /**
     * When set to `true` and the cart is empty displays the projected content of the component as the empty content.
     */
    customEmptyContent: boolean;
    /**
     * The text to display in the header of the name column.
     */
    nameHeaderText: string;
    /**
     * The text to display in the header of the quantity column.
     */
    quantityHeaderText: string;
    /**
     * The text to display in the header of the price column.
     */
    priceHeaderText: string;
    /**
     * The text to display in the header of the total per item column.
     */
    totalHeaderText: string;
    /**
     * The text to display in the tax section of the footer.
     */
    taxFooterText: string;
    /**
     * The text to display in the shipping section of the footer.
     */
    shippingFooterText: string;
    /**
     * The text to display in the total section of the footer.
     */
    totalFooterText: string;
    /**
     * Changes currency display format for the component. Overrides the value set from the service using `setCurrencyFormat`.
     */
    localeFormat: string;
    format: LocaleFormat;
    empty: boolean;
    items: CartItem[];
    taxRate: number;
    tax: number;
    shipping: number;
    cost: number;
    constructor(cartService: CartService<any>);
    update(): void;
    increase(item: CartItem): void;
    decrease(item: CartItem): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CartViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CartViewComponent, "cart-view", never, { "display": "display"; "images": "images"; "emptyText": "emptyText"; "customEmptyContent": "customEmptyContent"; "nameHeaderText": "nameHeaderText"; "quantityHeaderText": "quantityHeaderText"; "priceHeaderText": "priceHeaderText"; "totalHeaderText": "totalHeaderText"; "taxFooterText": "taxFooterText"; "shippingFooterText": "shippingFooterText"; "totalFooterText": "totalFooterText"; "localeFormat": "localeFormat"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC12aWV3LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjYXJ0LXZpZXcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ2FydEl0ZW0gfSBmcm9tICcuLi8uLi9jbGFzc2VzL2NhcnQtaXRlbSc7XHJcbmltcG9ydCB7IENhcnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2FydC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2FydFZpZXdEaXNwbGF5IH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xyXG5pbXBvcnQgeyBMb2NhbGVGb3JtYXQgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2xvY2FsZS1mb3JtYXQnO1xyXG4vKipcclxuICogUmVuZGVycyBhIHZpZXcgb2YgdGhlIGNhcnQuXHJcbiAqXHJcbiAqIEBvcmRlciAyXHJcbiAqIEBob3dUb1VzZSBcIlVzaW5nIHJlc3BvbnNpdmUgbGF5b3V0XCJcclxuICogYGBgaHRtbFxyXG4gKiA8Y2FydC12aWV3IFtkaXNwbGF5XT1cIidyZXNwb25zaXZlJ1wiPlxyXG4gKiA8L2NhcnQtdmlldz5cclxuICogYGBgXHJcbiAqXHJcbiAqIEBob3dUb1VzZSBcIk5vIGltYWdlcyBhbmQgdXNpbmcgc2Nyb2xsYmFycyBvbiBzbWFsbCBzY3JlZW5zXCJcclxuICogYGBgaHRtbFxyXG4gKiA8Y2FydC12aWV3IFtpbWFnZXNdPVwiZmFsc2VcIiBbZGlzcGxheV09XCIncmVzcG9uc2l2ZS10YWJsZSdcIj5cclxuICogPC9jYXJ0LXZpZXc+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAaG93VG9Vc2UgXCJVc2luZyBkaWZmZXJlbnQgdGV4dCBmb3IgaGVhZGVyc1wiXHJcbiAqIGBgYGh0bWxcclxuICogPGNhcnQtdmlldyBbZW1wdHlUZXh0XT1cImhlYWRlcnMuZW1wdHlcIiBbbmFtZUhlYWRlclRleHRdPVwiaGVhZGVycy5uYW1lXCIgW3F1YW50aXR5SGVhZGVyVGV4dF09XCJoZWFkZXJzLnF1YW50aXR5XCJcclxuICogIFtwcmljZUhlYWRlclRleHRdPVwiaGVhZGVycy5xdWFudGl0eVwiIFt0b3RhbEhlYWRlclRleHRdPVwiaGVhZGVycy50b3RhbFwiIFt0YXhGb290ZXJUZXh0XT1cImZvb3RlcnMudGF4XCJcclxuICogIFtzaGlwcGluZ0Zvb3RlclRleHRdPVwiZm9vdGVycy5zaGlwcGluZ1wiIFt0b3RhbEZvb3RlclRleHRdPVwiZm9vdGVycy50b3RhbFwiXHJcbiAqID5cclxuICogPC9jYXJ0LXZpZXc+XHJcbiAqIGBgYFxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCB7XHJcbiAqICAgaGVhZGVycyA9IHtcclxuICogICAgIGVtcHR5OiAnTm8gaXRlbXMuIEFkZCBzb21lIHRvIHRoZSBjYXJ0JyxcclxuICogICAgIG5hbWU6ICdEZXNjcmlwdGlvbicsXHJcbiAqICAgICBxdWFudGl0eTogJ0Ftb3VudCcsXHJcbiAqICAgICBwcmljZTogJ0Nvc3QnLFxyXG4gKiAgICAgdG90YWw6ICdUb3RhbCB4IGl0ZW0nLFxyXG4gKiAgIH1cclxuICogICBmb290ZXJzID0ge1xyXG4gKiAgICAgdGF4OiAnVGF4IHJhdGUnLFxyXG4gKiAgICAgc2hpcHBpbmc6ICdTaGlwcGluZyBjb3N0JyxcclxuICogICAgIHRvdGFsOiAnVG90YWwgY29zdCdcclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBob3dUb1VzZSBcIkNoYW5nZSB0aGUgZGVmYXVsdCBlbXB0eSBjYXJ0IGNvbnRlbnRcIlxyXG4gKiBgYGBodG1sXHJcbiAqIDxjYXJ0LXZpZXcgW2N1c3RvbUVtcHR5Q29udGVudF09XCJ0cnVlXCI+XHJcbiAqICAgPGRpdiBjbGFzcz1cIm15LWVtcHR5LWNhcnQtdmlld1wiPlxyXG4gKiAgICAgICA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTogMzZweDtcIiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tc2hvcHBpbmctY2FydFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj5cclxuICogICAgICAgWW91ciBjYXJ0IGlzIGVtcHR5XHJcbiAqICAgPC9kaXY+XHJcbiAqIDwvY2FydC12aWV3PlxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcnRWaWV3Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIGNhcnRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBfc2VydmljZVN1YnNjcmlwdGlvbjtcclxuICAgIC8qKlxyXG4gICAgICogQ2hhbmdlcyB0aGUgYXBwZWFyYW5jZSBob3cgdGhlIGNhcnQgdmlldyBkaXNwbGF5cyBpbiBkaWZmZXJlbnQgc2NyZWVuIHNpemVzXHJcbiAgICAgKi9cclxuICAgIGRpc3BsYXk6IENhcnRWaWV3RGlzcGxheTtcclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0byBpbmNsdWRlIGltYWdlcyBpbiB0aGUgY2FydCBvciBub3QuXHJcbiAgICAgKi9cclxuICAgIGltYWdlczogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRleHQgdG8gc2hvdyB3aGVuIHRoZSBjYXJ0IGhhcyBubyBpdGVtcyBpbiBpdC5cclxuICAgICAqL1xyXG4gICAgZW1wdHlUZXh0OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gc2V0IHRvIGB0cnVlYCBhbmQgdGhlIGNhcnQgaXMgZW1wdHkgZGlzcGxheXMgdGhlIHByb2plY3RlZCBjb250ZW50IG9mIHRoZSBjb21wb25lbnQgYXMgdGhlIGVtcHR5IGNvbnRlbnQuXHJcbiAgICAgKi9cclxuICAgIGN1c3RvbUVtcHR5Q29udGVudDogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRleHQgdG8gZGlzcGxheSBpbiB0aGUgaGVhZGVyIG9mIHRoZSBuYW1lIGNvbHVtbi5cclxuICAgICAqL1xyXG4gICAgbmFtZUhlYWRlclRleHQ6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRleHQgdG8gZGlzcGxheSBpbiB0aGUgaGVhZGVyIG9mIHRoZSBxdWFudGl0eSBjb2x1bW4uXHJcbiAgICAgKi9cclxuICAgIHF1YW50aXR5SGVhZGVyVGV4dDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdGV4dCB0byBkaXNwbGF5IGluIHRoZSBoZWFkZXIgb2YgdGhlIHByaWNlIGNvbHVtbi5cclxuICAgICAqL1xyXG4gICAgcHJpY2VIZWFkZXJUZXh0OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIGhlYWRlciBvZiB0aGUgdG90YWwgcGVyIGl0ZW0gY29sdW1uLlxyXG4gICAgICovXHJcbiAgICB0b3RhbEhlYWRlclRleHQ6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRleHQgdG8gZGlzcGxheSBpbiB0aGUgdGF4IHNlY3Rpb24gb2YgdGhlIGZvb3Rlci5cclxuICAgICAqL1xyXG4gICAgdGF4Rm9vdGVyVGV4dDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdGV4dCB0byBkaXNwbGF5IGluIHRoZSBzaGlwcGluZyBzZWN0aW9uIG9mIHRoZSBmb290ZXIuXHJcbiAgICAgKi9cclxuICAgIHNoaXBwaW5nRm9vdGVyVGV4dDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdGV4dCB0byBkaXNwbGF5IGluIHRoZSB0b3RhbCBzZWN0aW9uIG9mIHRoZSBmb290ZXIuXHJcbiAgICAgKi9cclxuICAgIHRvdGFsRm9vdGVyVGV4dDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGFuZ2VzIGN1cnJlbmN5IGRpc3BsYXkgZm9ybWF0IGZvciB0aGUgY29tcG9uZW50LiBPdmVycmlkZXMgdGhlIHZhbHVlIHNldCBmcm9tIHRoZSBzZXJ2aWNlIHVzaW5nIGBzZXRDdXJyZW5jeUZvcm1hdGAuXHJcbiAgICAgKi9cclxuICAgIGxvY2FsZUZvcm1hdDogc3RyaW5nO1xyXG4gICAgZm9ybWF0OiBMb2NhbGVGb3JtYXQ7XHJcbiAgICBlbXB0eTogYm9vbGVhbjtcclxuICAgIGl0ZW1zOiBDYXJ0SXRlbVtdO1xyXG4gICAgdGF4UmF0ZTogbnVtYmVyO1xyXG4gICAgdGF4OiBudW1iZXI7XHJcbiAgICBzaGlwcGluZzogbnVtYmVyO1xyXG4gICAgY29zdDogbnVtYmVyO1xyXG4gICAgY29uc3RydWN0b3IoY2FydFNlcnZpY2U6IENhcnRTZXJ2aWNlPGFueT4pO1xyXG4gICAgdXBkYXRlKCk6IHZvaWQ7XHJcbiAgICBpbmNyZWFzZShpdGVtOiBDYXJ0SXRlbSk6IHZvaWQ7XHJcbiAgICBkZWNyZWFzZShpdGVtOiBDYXJ0SXRlbSk6IHZvaWQ7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==