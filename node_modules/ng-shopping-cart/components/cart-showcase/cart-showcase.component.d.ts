import { Injector, NgModuleFactory, OnChanges, OnDestroy, OnInit, SimpleChanges, Type } from '@angular/core';
import { CartItem } from '../../classes/cart-item';
import { ShowcaseItem } from '../../interfaces/showcase-item';
import { CartService } from '../../services/cart.service';
/**
 * Renders items arranged in columns using a dynamic component for the item. Useful for getting started with e-commerce applications.
 *
 * @order 4
 * @howToUse "Using wider items"
 * ```html
 * <cart-showcase [items]="items" [aspectRatio]="'2:1'">
 * </cart-showcase>
 * ```
 *
 * @howToUse "Using four columns in all screen sizes bigger than 768px"
 * ```html
 * <cart-showcase [items]="items" [mCols]="4" [lCols]="4">
 * </cart-showcase>
 * ```
 *
 * @howToUse "Using a different item component"
 * ```html
 * <!-- my-component.html -->
 * <cart-showcase [items]="items" [itemComponent]="itemComponent">
 * </cart-showcase>
 * ```
 * ```typescript
 * // my-component.ts
 * export class MyComponent {
 *   itemComponent = MyCustomItemComponent;
 * }
 *
 * // my-custom-item-component.ts
 * @Component({
 *  selector: 'my-custom-item-component',
 *  template: '<div class="item-class">{{item.getName()}}</div>'
 * })
 * export class MyCustomItemComponent implements ShowcaseItem  {
 *   item: CartItem;
 * }
 *
 * // app.module.ts
 * @NgModule({
 *   // .....
 *   entryComponents: [MyCustomItemComponent],
 * })
 * export class AppModule {
 * }
 * ```
 *
 * @note {warning} If you change the `[columns]` input you must also change the sass variable that controls the component grid and
 * vice-versa. A similar procedure is required to create aspect ratios with values greater than four eg: `'1:5'`. Check the styling guide
 * for more information.
 *
 * @note {danger} The aspect ratio is the width/height proportion of the items therefore a ratio of `'2:2'` is equivalent to `'1:1'`.
 * Redundant ratios like these are removed from the source so don't try to use them.
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class CartShowcaseComponent implements OnChanges, OnInit, OnDestroy {
    private cartService;
    private _serviceSubscription;
    format: string;
    xsClass: string;
    sClass: string;
    mClass: string;
    lClass: string;
    xlClass: string;
    ratioClass: string;
    /**
     * The number of columns to display when the screen size matches phone devices.
     */
    xsCols: number;
    /**
     * The number of columns to display when the screen matches tablet devices.
     */
    sCols: number;
    /**
     * The number of columns to display when the screen matches desktop devices.
     */
    mCols: number;
    /**
     * The number of columns to display when the screen matches large desktop devices.
     */
    lCols: number;
    /**
     * The number of columns to display when the screen matches extra large desktop devices.
     */
    xlCols: number;
    /**
     * The number of columns in the grid.
     * Only update this value if you changed the columns sass variable in the library styles following the Styling guide.
     */
    columns: number;
    /**
     * An array of items to display
     */
    items: CartItem[];
    /**
     * The component to render for each item. This type means any component that implements the interface `ShowcaseItem`.
     */
    itemComponent: Type<ShowcaseItem>;
    /**
     * Optional injector for the dynamic item components. Used when you want to replace the default inherited injector for the component.
     */
    injector: Injector;
    /**
     * Optional module factory for the dynamic components. You usually get one when you manually compile modules.
     */
    moduleFactory: NgModuleFactory<any>;
    /**
     * The aspect ratio of the container of the items. A value of `1:1` means square items, `2:1` means two times wider, `1:2` two times
     * taller and so on.
     */
    aspectRatio: string;
    /**
     * Changes currency display format for the component. Overrides the value set from the service using `setLocaleFormat`.
     */
    localeFormat: string;
    private getColumnSize(value);
    constructor(cartService: CartService<any>);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CartShowcaseComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CartShowcaseComponent, "cart-showcase", never, { "xsCols": "xsCols"; "sCols": "sCols"; "mCols": "mCols"; "lCols": "lCols"; "xlCols": "xlCols"; "columns": "columns"; "itemComponent": "itemComponent"; "aspectRatio": "aspectRatio"; "items": "items"; "injector": "injector"; "moduleFactory": "moduleFactory"; "localeFormat": "localeFormat"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1zaG93Y2FzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2FydC1zaG93Y2FzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yLCBOZ01vZHVsZUZhY3RvcnksIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ2FydEl0ZW0gfSBmcm9tICcuLi8uLi9jbGFzc2VzL2NhcnQtaXRlbSc7XHJcbmltcG9ydCB7IFNob3djYXNlSXRlbSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvc2hvd2Nhc2UtaXRlbSc7XHJcbmltcG9ydCB7IENhcnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2FydC5zZXJ2aWNlJztcclxuLyoqXHJcbiAqIFJlbmRlcnMgaXRlbXMgYXJyYW5nZWQgaW4gY29sdW1ucyB1c2luZyBhIGR5bmFtaWMgY29tcG9uZW50IGZvciB0aGUgaXRlbS4gVXNlZnVsIGZvciBnZXR0aW5nIHN0YXJ0ZWQgd2l0aCBlLWNvbW1lcmNlIGFwcGxpY2F0aW9ucy5cclxuICpcclxuICogQG9yZGVyIDRcclxuICogQGhvd1RvVXNlIFwiVXNpbmcgd2lkZXIgaXRlbXNcIlxyXG4gKiBgYGBodG1sXHJcbiAqIDxjYXJ0LXNob3djYXNlIFtpdGVtc109XCJpdGVtc1wiIFthc3BlY3RSYXRpb109XCInMjoxJ1wiPlxyXG4gKiA8L2NhcnQtc2hvd2Nhc2U+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAaG93VG9Vc2UgXCJVc2luZyBmb3VyIGNvbHVtbnMgaW4gYWxsIHNjcmVlbiBzaXplcyBiaWdnZXIgdGhhbiA3NjhweFwiXHJcbiAqIGBgYGh0bWxcclxuICogPGNhcnQtc2hvd2Nhc2UgW2l0ZW1zXT1cIml0ZW1zXCIgW21Db2xzXT1cIjRcIiBbbENvbHNdPVwiNFwiPlxyXG4gKiA8L2NhcnQtc2hvd2Nhc2U+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAaG93VG9Vc2UgXCJVc2luZyBhIGRpZmZlcmVudCBpdGVtIGNvbXBvbmVudFwiXHJcbiAqIGBgYGh0bWxcclxuICogPCEtLSBteS1jb21wb25lbnQuaHRtbCAtLT5cclxuICogPGNhcnQtc2hvd2Nhc2UgW2l0ZW1zXT1cIml0ZW1zXCIgW2l0ZW1Db21wb25lbnRdPVwiaXRlbUNvbXBvbmVudFwiPlxyXG4gKiA8L2NhcnQtc2hvd2Nhc2U+XHJcbiAqIGBgYFxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIC8vIG15LWNvbXBvbmVudC50c1xyXG4gKiBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQge1xyXG4gKiAgIGl0ZW1Db21wb25lbnQgPSBNeUN1c3RvbUl0ZW1Db21wb25lbnQ7XHJcbiAqIH1cclxuICpcclxuICogLy8gbXktY3VzdG9tLWl0ZW0tY29tcG9uZW50LnRzXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgc2VsZWN0b3I6ICdteS1jdXN0b20taXRlbS1jb21wb25lbnQnLFxyXG4gKiAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwiaXRlbS1jbGFzc1wiPnt7aXRlbS5nZXROYW1lKCl9fTwvZGl2PidcclxuICogfSlcclxuICogZXhwb3J0IGNsYXNzIE15Q3VzdG9tSXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIFNob3djYXNlSXRlbSAge1xyXG4gKiAgIGl0ZW06IENhcnRJdGVtO1xyXG4gKiB9XHJcbiAqXHJcbiAqIC8vIGFwcC5tb2R1bGUudHNcclxuICogQE5nTW9kdWxlKHtcclxuICogICAvLyAuLi4uLlxyXG4gKiAgIGVudHJ5Q29tcG9uZW50czogW015Q3VzdG9tSXRlbUNvbXBvbmVudF0sXHJcbiAqIH0pXHJcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAbm90ZSB7d2FybmluZ30gSWYgeW91IGNoYW5nZSB0aGUgYFtjb2x1bW5zXWAgaW5wdXQgeW91IG11c3QgYWxzbyBjaGFuZ2UgdGhlIHNhc3MgdmFyaWFibGUgdGhhdCBjb250cm9scyB0aGUgY29tcG9uZW50IGdyaWQgYW5kXHJcbiAqIHZpY2UtdmVyc2EuIEEgc2ltaWxhciBwcm9jZWR1cmUgaXMgcmVxdWlyZWQgdG8gY3JlYXRlIGFzcGVjdCByYXRpb3Mgd2l0aCB2YWx1ZXMgZ3JlYXRlciB0aGFuIGZvdXIgZWc6IGAnMTo1J2AuIENoZWNrIHRoZSBzdHlsaW5nIGd1aWRlXHJcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxyXG4gKlxyXG4gKiBAbm90ZSB7ZGFuZ2VyfSBUaGUgYXNwZWN0IHJhdGlvIGlzIHRoZSB3aWR0aC9oZWlnaHQgcHJvcG9ydGlvbiBvZiB0aGUgaXRlbXMgdGhlcmVmb3JlIGEgcmF0aW8gb2YgYCcyOjInYCBpcyBlcXVpdmFsZW50IHRvIGAnMToxJ2AuXHJcbiAqIFJlZHVuZGFudCByYXRpb3MgbGlrZSB0aGVzZSBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBzb3VyY2Ugc28gZG9uJ3QgdHJ5IHRvIHVzZSB0aGVtLlxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2FydFNob3djYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIGNhcnRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBfc2VydmljZVN1YnNjcmlwdGlvbjtcclxuICAgIGZvcm1hdDogc3RyaW5nO1xyXG4gICAgeHNDbGFzczogc3RyaW5nO1xyXG4gICAgc0NsYXNzOiBzdHJpbmc7XHJcbiAgICBtQ2xhc3M6IHN0cmluZztcclxuICAgIGxDbGFzczogc3RyaW5nO1xyXG4gICAgeGxDbGFzczogc3RyaW5nO1xyXG4gICAgcmF0aW9DbGFzczogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gZGlzcGxheSB3aGVuIHRoZSBzY3JlZW4gc2l6ZSBtYXRjaGVzIHBob25lIGRldmljZXMuXHJcbiAgICAgKi9cclxuICAgIHhzQ29sczogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gZGlzcGxheSB3aGVuIHRoZSBzY3JlZW4gbWF0Y2hlcyB0YWJsZXQgZGV2aWNlcy5cclxuICAgICAqL1xyXG4gICAgc0NvbHM6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIG51bWJlciBvZiBjb2x1bW5zIHRvIGRpc3BsYXkgd2hlbiB0aGUgc2NyZWVuIG1hdGNoZXMgZGVza3RvcCBkZXZpY2VzLlxyXG4gICAgICovXHJcbiAgICBtQ29sczogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gZGlzcGxheSB3aGVuIHRoZSBzY3JlZW4gbWF0Y2hlcyBsYXJnZSBkZXNrdG9wIGRldmljZXMuXHJcbiAgICAgKi9cclxuICAgIGxDb2xzOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBudW1iZXIgb2YgY29sdW1ucyB0byBkaXNwbGF5IHdoZW4gdGhlIHNjcmVlbiBtYXRjaGVzIGV4dHJhIGxhcmdlIGRlc2t0b3AgZGV2aWNlcy5cclxuICAgICAqL1xyXG4gICAgeGxDb2xzOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiB0aGUgZ3JpZC5cclxuICAgICAqIE9ubHkgdXBkYXRlIHRoaXMgdmFsdWUgaWYgeW91IGNoYW5nZWQgdGhlIGNvbHVtbnMgc2FzcyB2YXJpYWJsZSBpbiB0aGUgbGlicmFyeSBzdHlsZXMgZm9sbG93aW5nIHRoZSBTdHlsaW5nIGd1aWRlLlxyXG4gICAgICovXHJcbiAgICBjb2x1bW5zOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEFuIGFycmF5IG9mIGl0ZW1zIHRvIGRpc3BsYXlcclxuICAgICAqL1xyXG4gICAgaXRlbXM6IENhcnRJdGVtW107XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBjb21wb25lbnQgdG8gcmVuZGVyIGZvciBlYWNoIGl0ZW0uIFRoaXMgdHlwZSBtZWFucyBhbnkgY29tcG9uZW50IHRoYXQgaW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlIGBTaG93Y2FzZUl0ZW1gLlxyXG4gICAgICovXHJcbiAgICBpdGVtQ29tcG9uZW50OiBUeXBlPFNob3djYXNlSXRlbT47XHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbmFsIGluamVjdG9yIGZvciB0aGUgZHluYW1pYyBpdGVtIGNvbXBvbmVudHMuIFVzZWQgd2hlbiB5b3Ugd2FudCB0byByZXBsYWNlIHRoZSBkZWZhdWx0IGluaGVyaXRlZCBpbmplY3RvciBmb3IgdGhlIGNvbXBvbmVudC5cclxuICAgICAqL1xyXG4gICAgaW5qZWN0b3I6IEluamVjdG9yO1xyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25hbCBtb2R1bGUgZmFjdG9yeSBmb3IgdGhlIGR5bmFtaWMgY29tcG9uZW50cy4gWW91IHVzdWFsbHkgZ2V0IG9uZSB3aGVuIHlvdSBtYW51YWxseSBjb21waWxlIG1vZHVsZXMuXHJcbiAgICAgKi9cclxuICAgIG1vZHVsZUZhY3Rvcnk6IE5nTW9kdWxlRmFjdG9yeTxhbnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYXNwZWN0IHJhdGlvIG9mIHRoZSBjb250YWluZXIgb2YgdGhlIGl0ZW1zLiBBIHZhbHVlIG9mIGAxOjFgIG1lYW5zIHNxdWFyZSBpdGVtcywgYDI6MWAgbWVhbnMgdHdvIHRpbWVzIHdpZGVyLCBgMToyYCB0d28gdGltZXNcclxuICAgICAqIHRhbGxlciBhbmQgc28gb24uXHJcbiAgICAgKi9cclxuICAgIGFzcGVjdFJhdGlvOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZXMgY3VycmVuY3kgZGlzcGxheSBmb3JtYXQgZm9yIHRoZSBjb21wb25lbnQuIE92ZXJyaWRlcyB0aGUgdmFsdWUgc2V0IGZyb20gdGhlIHNlcnZpY2UgdXNpbmcgYHNldExvY2FsZUZvcm1hdGAuXHJcbiAgICAgKi9cclxuICAgIGxvY2FsZUZvcm1hdDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBnZXRDb2x1bW5TaXplKHZhbHVlKTtcclxuICAgIGNvbnN0cnVjdG9yKGNhcnRTZXJ2aWNlOiBDYXJ0U2VydmljZTxhbnk+KTtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbn1cclxuIl19