import { PipeTransform } from '@angular/core';
/**
 * A pipe that wraps the `CurrencyPipe` to set currency value display using a string rather than several arguments for easy configuration.
 *
 * @summary
 * It takes a string as a single parameter in the format `'currencyCode:symbol:digitsInfo:locale'`. You can also use the special
 * value `'auto'` which will set the default used by Angular in that specific configuration.
 *
 * Every configuration is optional and not using any arguments or an argument of `'auto'`is equivalent to how the `CurrencyPipe` works by
 * default. If no locale is specified uses the current locale to format numbers.
 *
 * @note {info} A value of `'auto:auto:auto:auto'` is equivalent to simply using `'auto'`.
 *
 * @note {danger} In Angular versions lower than 6 the `CurrencyPipe` does not change the currency symbol if you don't specify a different
 * `currencyCode`
 *
 * @howToUse "With a different currency symbol"
 * ```html
 * <span>
 *   {{ value | cartCurrency:format }}
 * </span>
 * ```
 * ```typescript
 * export class MyComponent {
 *   value = 10;
 *   format = 'EUR';
 * }
 * ```
 *
 * @howToUse "With a five digits after the decimal point"
 * ```html
 * <span>
 *   {{ value | cartCurrency:format }}
 * </span>
 * ```
 * ```typescript
 * export class MyComponent {
 *   value = 10.56;
 *   format = 'auto:auto:1.5-5';
 * }
 * ```
 *
 * @howToUse "With a different locale"
 * ```html
 * <span>
 *   {{ value | cartCurrency:format }}
 * </span>
 * ```
 * ```typescript
 * export class MyComponent {
 *   value = 10;
 *   format = 'auto:auto:auto:en-GB';
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class CartCurrencyPipe implements PipeTransform {
    private _locale;
    private currencyFormatter;
    constructor(_locale: string);
    transform(value: any, format?: string): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CartCurrencyPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<CartCurrencyPipe, "cartCurrency">;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1jdXJyZW5jeS5waXBlLmQudHMiLCJzb3VyY2VzIjpbImNhcnQtY3VycmVuY3kucGlwZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKipcclxuICogQSBwaXBlIHRoYXQgd3JhcHMgdGhlIGBDdXJyZW5jeVBpcGVgIHRvIHNldCBjdXJyZW5jeSB2YWx1ZSBkaXNwbGF5IHVzaW5nIGEgc3RyaW5nIHJhdGhlciB0aGFuIHNldmVyYWwgYXJndW1lbnRzIGZvciBlYXN5IGNvbmZpZ3VyYXRpb24uXHJcbiAqXHJcbiAqIEBzdW1tYXJ5XHJcbiAqIEl0IHRha2VzIGEgc3RyaW5nIGFzIGEgc2luZ2xlIHBhcmFtZXRlciBpbiB0aGUgZm9ybWF0IGAnY3VycmVuY3lDb2RlOnN5bWJvbDpkaWdpdHNJbmZvOmxvY2FsZSdgLiBZb3UgY2FuIGFsc28gdXNlIHRoZSBzcGVjaWFsXHJcbiAqIHZhbHVlIGAnYXV0bydgIHdoaWNoIHdpbGwgc2V0IHRoZSBkZWZhdWx0IHVzZWQgYnkgQW5ndWxhciBpbiB0aGF0IHNwZWNpZmljIGNvbmZpZ3VyYXRpb24uXHJcbiAqXHJcbiAqIEV2ZXJ5IGNvbmZpZ3VyYXRpb24gaXMgb3B0aW9uYWwgYW5kIG5vdCB1c2luZyBhbnkgYXJndW1lbnRzIG9yIGFuIGFyZ3VtZW50IG9mIGAnYXV0bydgaXMgZXF1aXZhbGVudCB0byBob3cgdGhlIGBDdXJyZW5jeVBpcGVgIHdvcmtzIGJ5XHJcbiAqIGRlZmF1bHQuIElmIG5vIGxvY2FsZSBpcyBzcGVjaWZpZWQgdXNlcyB0aGUgY3VycmVudCBsb2NhbGUgdG8gZm9ybWF0IG51bWJlcnMuXHJcbiAqXHJcbiAqIEBub3RlIHtpbmZvfSBBIHZhbHVlIG9mIGAnYXV0bzphdXRvOmF1dG86YXV0bydgIGlzIGVxdWl2YWxlbnQgdG8gc2ltcGx5IHVzaW5nIGAnYXV0bydgLlxyXG4gKlxyXG4gKiBAbm90ZSB7ZGFuZ2VyfSBJbiBBbmd1bGFyIHZlcnNpb25zIGxvd2VyIHRoYW4gNiB0aGUgYEN1cnJlbmN5UGlwZWAgZG9lcyBub3QgY2hhbmdlIHRoZSBjdXJyZW5jeSBzeW1ib2wgaWYgeW91IGRvbid0IHNwZWNpZnkgYSBkaWZmZXJlbnRcclxuICogYGN1cnJlbmN5Q29kZWBcclxuICpcclxuICogQGhvd1RvVXNlIFwiV2l0aCBhIGRpZmZlcmVudCBjdXJyZW5jeSBzeW1ib2xcIlxyXG4gKiBgYGBodG1sXHJcbiAqIDxzcGFuPlxyXG4gKiAgIHt7IHZhbHVlIHwgY2FydEN1cnJlbmN5OmZvcm1hdCB9fVxyXG4gKiA8L3NwYW4+XHJcbiAqIGBgYFxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCB7XHJcbiAqICAgdmFsdWUgPSAxMDtcclxuICogICBmb3JtYXQgPSAnRVVSJztcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQGhvd1RvVXNlIFwiV2l0aCBhIGZpdmUgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50XCJcclxuICogYGBgaHRtbFxyXG4gKiA8c3Bhbj5cclxuICogICB7eyB2YWx1ZSB8IGNhcnRDdXJyZW5jeTpmb3JtYXQgfX1cclxuICogPC9zcGFuPlxyXG4gKiBgYGBcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQge1xyXG4gKiAgIHZhbHVlID0gMTAuNTY7XHJcbiAqICAgZm9ybWF0ID0gJ2F1dG86YXV0bzoxLjUtNSc7XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBob3dUb1VzZSBcIldpdGggYSBkaWZmZXJlbnQgbG9jYWxlXCJcclxuICogYGBgaHRtbFxyXG4gKiA8c3Bhbj5cclxuICogICB7eyB2YWx1ZSB8IGNhcnRDdXJyZW5jeTpmb3JtYXQgfX1cclxuICogPC9zcGFuPlxyXG4gKiBgYGBcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQge1xyXG4gKiAgIHZhbHVlID0gMTA7XHJcbiAqICAgZm9ybWF0ID0gJ2F1dG86YXV0bzphdXRvOmVuLUdCJztcclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcnRDdXJyZW5jeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICAgIHByaXZhdGUgX2xvY2FsZTtcclxuICAgIHByaXZhdGUgY3VycmVuY3lGb3JtYXR0ZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihfbG9jYWxlOiBzdHJpbmcpO1xyXG4gICAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGZvcm1hdD86IHN0cmluZyk6IGFueTtcclxufVxyXG4iXX0=