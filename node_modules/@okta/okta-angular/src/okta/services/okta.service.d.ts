import { Injector } from '@angular/core';
import { OktaConfig } from '../models/okta.config';
import { UserClaims } from '../models/user-claims';
import { TokenManager } from '../models/token-manager';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class OktaAuthService {
    private injector;
    private oktaAuth;
    private config;
    private observers;
    $authenticationState: Observable<boolean>;
    constructor(config: OktaConfig, injector: Injector);
    login(fromUri?: string, additionalParams?: object): any;
    getTokenManager(): TokenManager;
    /**
     * Checks if there is an access token OR an id token
     * A custom method may be provided on config to override this logic
     */
    isAuthenticated(): Promise<boolean>;
    private emitAuthenticationState;
    /**
     * Returns the current accessToken in the tokenManager.
     */
    getAccessToken(): Promise<string | undefined>;
    /**
     * Returns the current idToken in the tokenManager.
     */
    getIdToken(): Promise<string | undefined>;
    /**
     * Returns user claims from the /userinfo endpoint if an
     * accessToken is provided or parses the available idToken.
     */
    getUser(): Promise<UserClaims | undefined>;
    /**
     * Returns the configuration object used.
     */
    getOktaConfig(): OktaConfig;
    /**
     * Launches the login redirect.
     * @param fromUri
     * @param additionalParams
     */
    loginRedirect(fromUri?: string, additionalParams?: object): any;
    /**
     * Stores the intended path to redirect after successful login.
     * @param uri
     * @param queryParams
     */
    setFromUri(fromUri?: string): void;
    /**
     * Returns the referrer path from localStorage or app root.
     */
    getFromUri(): string;
    /**
     * Parses the tokens from the callback URL.
     */
    handleAuthentication(): Promise<void>;
    /**
     * Clears the user session in Okta and removes
     * tokens stored in the tokenManager.
     * @param options
     */
    logout(options?: any): Promise<void>;
    /**
     * Scrub scopes to ensure 'openid' is included
     * @param scopes
     */
    scrubScopes(scopes: string[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OktaAuthService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<OktaAuthService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2t0YS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm9rdGEuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPa3RhQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL29rdGEuY29uZmlnJztcbmltcG9ydCB7IFVzZXJDbGFpbXMgfSBmcm9tICcuLi9tb2RlbHMvdXNlci1jbGFpbXMnO1xuaW1wb3J0IHsgVG9rZW5NYW5hZ2VyIH0gZnJvbSAnLi4vbW9kZWxzL3Rva2VuLW1hbmFnZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgT2t0YUF1dGhTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIHByaXZhdGUgb2t0YUF1dGg7XG4gICAgcHJpdmF0ZSBjb25maWc7XG4gICAgcHJpdmF0ZSBvYnNlcnZlcnM7XG4gICAgJGF1dGhlbnRpY2F0aW9uU3RhdGU6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBPa3RhQ29uZmlnLCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIGxvZ2luKGZyb21Vcmk/OiBzdHJpbmcsIGFkZGl0aW9uYWxQYXJhbXM/OiBvYmplY3QpOiBhbnk7XG4gICAgZ2V0VG9rZW5NYW5hZ2VyKCk6IFRva2VuTWFuYWdlcjtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlcmUgaXMgYW4gYWNjZXNzIHRva2VuIE9SIGFuIGlkIHRva2VuXG4gICAgICogQSBjdXN0b20gbWV0aG9kIG1heSBiZSBwcm92aWRlZCBvbiBjb25maWcgdG8gb3ZlcnJpZGUgdGhpcyBsb2dpY1xuICAgICAqL1xuICAgIGlzQXV0aGVudGljYXRlZCgpOiBQcm9taXNlPGJvb2xlYW4+O1xuICAgIHByaXZhdGUgZW1pdEF1dGhlbnRpY2F0aW9uU3RhdGU7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBhY2Nlc3NUb2tlbiBpbiB0aGUgdG9rZW5NYW5hZ2VyLlxuICAgICAqL1xuICAgIGdldEFjY2Vzc1Rva2VuKCk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGlkVG9rZW4gaW4gdGhlIHRva2VuTWFuYWdlci5cbiAgICAgKi9cbiAgICBnZXRJZFRva2VuKCk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHVzZXIgY2xhaW1zIGZyb20gdGhlIC91c2VyaW5mbyBlbmRwb2ludCBpZiBhblxuICAgICAqIGFjY2Vzc1Rva2VuIGlzIHByb3ZpZGVkIG9yIHBhcnNlcyB0aGUgYXZhaWxhYmxlIGlkVG9rZW4uXG4gICAgICovXG4gICAgZ2V0VXNlcigpOiBQcm9taXNlPFVzZXJDbGFpbXMgfCB1bmRlZmluZWQ+O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHVzZWQuXG4gICAgICovXG4gICAgZ2V0T2t0YUNvbmZpZygpOiBPa3RhQ29uZmlnO1xuICAgIC8qKlxuICAgICAqIExhdW5jaGVzIHRoZSBsb2dpbiByZWRpcmVjdC5cbiAgICAgKiBAcGFyYW0gZnJvbVVyaVxuICAgICAqIEBwYXJhbSBhZGRpdGlvbmFsUGFyYW1zXG4gICAgICovXG4gICAgbG9naW5SZWRpcmVjdChmcm9tVXJpPzogc3RyaW5nLCBhZGRpdGlvbmFsUGFyYW1zPzogb2JqZWN0KTogYW55O1xuICAgIC8qKlxuICAgICAqIFN0b3JlcyB0aGUgaW50ZW5kZWQgcGF0aCB0byByZWRpcmVjdCBhZnRlciBzdWNjZXNzZnVsIGxvZ2luLlxuICAgICAqIEBwYXJhbSB1cmlcbiAgICAgKiBAcGFyYW0gcXVlcnlQYXJhbXNcbiAgICAgKi9cbiAgICBzZXRGcm9tVXJpKGZyb21Vcmk/OiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJlZmVycmVyIHBhdGggZnJvbSBsb2NhbFN0b3JhZ2Ugb3IgYXBwIHJvb3QuXG4gICAgICovXG4gICAgZ2V0RnJvbVVyaSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSB0b2tlbnMgZnJvbSB0aGUgY2FsbGJhY2sgVVJMLlxuICAgICAqL1xuICAgIGhhbmRsZUF1dGhlbnRpY2F0aW9uKCk6IFByb21pc2U8dm9pZD47XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSB1c2VyIHNlc3Npb24gaW4gT2t0YSBhbmQgcmVtb3Zlc1xuICAgICAqIHRva2VucyBzdG9yZWQgaW4gdGhlIHRva2VuTWFuYWdlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqL1xuICAgIGxvZ291dChvcHRpb25zPzogYW55KTogUHJvbWlzZTx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBTY3J1YiBzY29wZXMgdG8gZW5zdXJlICdvcGVuaWQnIGlzIGluY2x1ZGVkXG4gICAgICogQHBhcmFtIHNjb3Blc1xuICAgICAqL1xuICAgIHNjcnViU2NvcGVzKHNjb3Blczogc3RyaW5nW10pOiB2b2lkO1xufVxuIl19