/**
 * Determines the igxBadge type
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../icon/index';
export declare enum IgxBadgeType {
    PRIMARY = "primary",
    INFO = "info",
    SUCCESS = "success",
    WARNING = "warning",
    ERROR = "error"
}
/**
 * Badge provides visual notifications used to decorate avatars, menus, etc.
 *
 * @igxModule IgxBadgeModule
 *
 * @igxTheme igx-badge-theme
 *
 * @igxKeywords badge, icon, notification
 *
 * @igxGroup Data Entry & Display
 *
 * @remarks
 * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the
 * application when visual notification is needed. They are usually designed as icons with a predefined
 * style to communicate information, success, warnings, or errors.
 *
 * @example
 * ```html
 * <igx-avatar>
 *   <igx-badge icon="check" type="success"></igx-badge>
 * </igx-avatar>
 */
export declare class IgxBadgeComponent {
    /**
    * Sets/gets the `id` of the badge.
    *
    * @remarks
    * If not set, the `id` will have value `"igx-badge-0"`.
    *
    * @example
    * ```html
    * <igx-badge id="igx-badge-2"></igx-badge>
    * ```
    */
    id: string;
    /**
    * Sets/gets the type of the badge.
    *
    * @remarks
    * Allowed values are `primary`, `info`, `success`, `warning`, `error`.
    * Providing an invalid value won't display a badge.
    *
    * @example
    * ```html
    * <igx-badge type="success"></igx-badge>
    * ```
    */
    type: string | IgxBadgeType;
    /**
    * Sets/gets the value to be displayed inside the badge.
    *
    * @remarks
    * If an `icon` property is already set the `icon` will be displayed.
    * If neither a `value` nor an `icon` is set the content of the badge will be empty.
    *
    * @example
    * ```html
    * <igx-badge value="11"></igx-badge>
    * ```
    */
    value: string;
    /**
     * Sets/gets an icon for the badge from the material icons set.
     *
     * @remarks
     * Has priority over the `value` property.
     * If neither a `value` nor an `icon` is set the content of the badge will be empty.
     * Providing an invalid value won't display anything.
     *
     * @example
     * ```html
     * <igx-badge icon="check"></igx-badge>
     * ```
     */
    icon: string;
    /**
     * Sets/gets the role attribute value.
     *
     * @example
     * ```typescript
     * @ViewChild("MyBadge", { read: IgxBadgeComponent })
     * public badge: IgxBadgeComponent;
     *
     * badge.role = 'status';
     * ```
     */
    role: string;
    /**
     * Sets/gets the the css class to use on the badge.
     *
     * @example
     * ```typescript
     * @ViewChild("MyBadge", { read: IgxBadgeComponent })
     * public badge: IgxBadgeComponent;
     *
     * badge.cssClass = 'my-badge-class';
     * ```
     */
    cssClass: string;
    /**
     * Sets/gets the aria-label attribute value.
     *
     * @example
     * ```typescript
     * @ViewChild("MyBadge", { read: IgxBadgeComponent })
     * public badge: IgxBadgeComponent;
     *
     * badge.label = 'badge';
     * ```
     */
    label: string;
    /**
     * Defines a human-readable, accessor, author-localized description for
     * the `type` and the `icon` or `value` of the element.
     * @hidden
     * @internal
     */
    get roleDescription(): string;
    /**
     * Method which makes the name of the class more descriptive.
     * This helps the styling of the badges.
     * @hidden
     * @internal
     */
    setClasses(): {};
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxBadgeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxBadgeComponent, "igx-badge", never, { "id": "id"; "type": "type"; "value": "value"; "icon": "icon"; }, {}, never, never>;
}
/**
 * @hidden
 */
export declare class IgxBadgeModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxBadgeModule, [typeof IgxBadgeComponent], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.IgxIconModule], [typeof IgxBadgeComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxBadgeModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImJhZGdlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERldGVybWluZXMgdGhlIGlneEJhZGdlIHR5cGVcbiAqL1xuZXhwb3J0IGRlY2xhcmUgZW51bSBJZ3hCYWRnZVR5cGUge1xuICAgIFBSSU1BUlkgPSBcInByaW1hcnlcIixcbiAgICBJTkZPID0gXCJpbmZvXCIsXG4gICAgU1VDQ0VTUyA9IFwic3VjY2Vzc1wiLFxuICAgIFdBUk5JTkcgPSBcIndhcm5pbmdcIixcbiAgICBFUlJPUiA9IFwiZXJyb3JcIlxufVxuLyoqXG4gKiBCYWRnZSBwcm92aWRlcyB2aXN1YWwgbm90aWZpY2F0aW9ucyB1c2VkIHRvIGRlY29yYXRlIGF2YXRhcnMsIG1lbnVzLCBldGMuXG4gKlxuICogQGlneE1vZHVsZSBJZ3hCYWRnZU1vZHVsZVxuICpcbiAqIEBpZ3hUaGVtZSBpZ3gtYmFkZ2UtdGhlbWVcbiAqXG4gKiBAaWd4S2V5d29yZHMgYmFkZ2UsIGljb24sIG5vdGlmaWNhdGlvblxuICpcbiAqIEBpZ3hHcm91cCBEYXRhIEVudHJ5ICYgRGlzcGxheVxuICpcbiAqIEByZW1hcmtzXG4gKiBUaGUgSWduaXRlIFVJIEJhZGdlIGlzIHVzZWQgdG8gZGVjb3JhdGUgYXZhdGFycywgbmF2aWdhdGlvbiBtZW51cywgb3Igb3RoZXIgY29tcG9uZW50cyBpbiB0aGVcbiAqIGFwcGxpY2F0aW9uIHdoZW4gdmlzdWFsIG5vdGlmaWNhdGlvbiBpcyBuZWVkZWQuIFRoZXkgYXJlIHVzdWFsbHkgZGVzaWduZWQgYXMgaWNvbnMgd2l0aCBhIHByZWRlZmluZWRcbiAqIHN0eWxlIHRvIGNvbW11bmljYXRlIGluZm9ybWF0aW9uLCBzdWNjZXNzLCB3YXJuaW5ncywgb3IgZXJyb3JzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sXG4gKiA8aWd4LWF2YXRhcj5cbiAqICAgPGlneC1iYWRnZSBpY29uPVwiY2hlY2tcIiB0eXBlPVwic3VjY2Vzc1wiPjwvaWd4LWJhZGdlPlxuICogPC9pZ3gtYXZhdGFyPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hCYWRnZUNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgKiBTZXRzL2dldHMgdGhlIGBpZGAgb2YgdGhlIGJhZGdlLlxuICAgICpcbiAgICAqIEByZW1hcmtzXG4gICAgKiBJZiBub3Qgc2V0LCB0aGUgYGlkYCB3aWxsIGhhdmUgdmFsdWUgYFwiaWd4LWJhZGdlLTBcImAuXG4gICAgKlxuICAgICogQGV4YW1wbGVcbiAgICAqIGBgYGh0bWxcbiAgICAqIDxpZ3gtYmFkZ2UgaWQ9XCJpZ3gtYmFkZ2UtMlwiPjwvaWd4LWJhZGdlPlxuICAgICogYGBgXG4gICAgKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICogU2V0cy9nZXRzIHRoZSB0eXBlIG9mIHRoZSBiYWRnZS5cbiAgICAqXG4gICAgKiBAcmVtYXJrc1xuICAgICogQWxsb3dlZCB2YWx1ZXMgYXJlIGBwcmltYXJ5YCwgYGluZm9gLCBgc3VjY2Vzc2AsIGB3YXJuaW5nYCwgYGVycm9yYC5cbiAgICAqIFByb3ZpZGluZyBhbiBpbnZhbGlkIHZhbHVlIHdvbid0IGRpc3BsYXkgYSBiYWRnZS5cbiAgICAqXG4gICAgKiBAZXhhbXBsZVxuICAgICogYGBgaHRtbFxuICAgICogPGlneC1iYWRnZSB0eXBlPVwic3VjY2Vzc1wiPjwvaWd4LWJhZGdlPlxuICAgICogYGBgXG4gICAgKi9cbiAgICB0eXBlOiBzdHJpbmcgfCBJZ3hCYWRnZVR5cGU7XG4gICAgLyoqXG4gICAgKiBTZXRzL2dldHMgdGhlIHZhbHVlIHRvIGJlIGRpc3BsYXllZCBpbnNpZGUgdGhlIGJhZGdlLlxuICAgICpcbiAgICAqIEByZW1hcmtzXG4gICAgKiBJZiBhbiBgaWNvbmAgcHJvcGVydHkgaXMgYWxyZWFkeSBzZXQgdGhlIGBpY29uYCB3aWxsIGJlIGRpc3BsYXllZC5cbiAgICAqIElmIG5laXRoZXIgYSBgdmFsdWVgIG5vciBhbiBgaWNvbmAgaXMgc2V0IHRoZSBjb250ZW50IG9mIHRoZSBiYWRnZSB3aWxsIGJlIGVtcHR5LlxuICAgICpcbiAgICAqIEBleGFtcGxlXG4gICAgKiBgYGBodG1sXG4gICAgKiA8aWd4LWJhZGdlIHZhbHVlPVwiMTFcIj48L2lneC1iYWRnZT5cbiAgICAqIGBgYFxuICAgICovXG4gICAgdmFsdWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgYW4gaWNvbiBmb3IgdGhlIGJhZGdlIGZyb20gdGhlIG1hdGVyaWFsIGljb25zIHNldC5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogSGFzIHByaW9yaXR5IG92ZXIgdGhlIGB2YWx1ZWAgcHJvcGVydHkuXG4gICAgICogSWYgbmVpdGhlciBhIGB2YWx1ZWAgbm9yIGFuIGBpY29uYCBpcyBzZXQgdGhlIGNvbnRlbnQgb2YgdGhlIGJhZGdlIHdpbGwgYmUgZW1wdHkuXG4gICAgICogUHJvdmlkaW5nIGFuIGludmFsaWQgdmFsdWUgd29uJ3QgZGlzcGxheSBhbnl0aGluZy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtYmFkZ2UgaWNvbj1cImNoZWNrXCI+PC9pZ3gtYmFkZ2U+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgaWNvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgcm9sZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBAVmlld0NoaWxkKFwiTXlCYWRnZVwiLCB7IHJlYWQ6IElneEJhZGdlQ29tcG9uZW50IH0pXG4gICAgICogcHVibGljIGJhZGdlOiBJZ3hCYWRnZUNvbXBvbmVudDtcbiAgICAgKlxuICAgICAqIGJhZGdlLnJvbGUgPSAnc3RhdHVzJztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByb2xlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHRoZSB0aGUgY3NzIGNsYXNzIHRvIHVzZSBvbiB0aGUgYmFkZ2UuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBAVmlld0NoaWxkKFwiTXlCYWRnZVwiLCB7IHJlYWQ6IElneEJhZGdlQ29tcG9uZW50IH0pXG4gICAgICogcHVibGljIGJhZGdlOiBJZ3hCYWRnZUNvbXBvbmVudDtcbiAgICAgKlxuICAgICAqIGJhZGdlLmNzc0NsYXNzID0gJ215LWJhZGdlLWNsYXNzJztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjc3NDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgYXJpYS1sYWJlbCBhdHRyaWJ1dGUgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBAVmlld0NoaWxkKFwiTXlCYWRnZVwiLCB7IHJlYWQ6IElneEJhZGdlQ29tcG9uZW50IH0pXG4gICAgICogcHVibGljIGJhZGdlOiBJZ3hCYWRnZUNvbXBvbmVudDtcbiAgICAgKlxuICAgICAqIGJhZGdlLmxhYmVsID0gJ2JhZGdlJztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBodW1hbi1yZWFkYWJsZSwgYWNjZXNzb3IsIGF1dGhvci1sb2NhbGl6ZWQgZGVzY3JpcHRpb24gZm9yXG4gICAgICogdGhlIGB0eXBlYCBhbmQgdGhlIGBpY29uYCBvciBgdmFsdWVgIG9mIHRoZSBlbGVtZW50LlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgcm9sZURlc2NyaXB0aW9uKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBNZXRob2Qgd2hpY2ggbWFrZXMgdGhlIG5hbWUgb2YgdGhlIGNsYXNzIG1vcmUgZGVzY3JpcHRpdmUuXG4gICAgICogVGhpcyBoZWxwcyB0aGUgc3R5bGluZyBvZiB0aGUgYmFkZ2VzLlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzZXRDbGFzc2VzKCk6IHt9O1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEJhZGdlTW9kdWxlIHtcbn1cbiJdfQ==