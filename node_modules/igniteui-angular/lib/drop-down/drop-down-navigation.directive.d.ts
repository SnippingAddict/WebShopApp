import { IDropDownNavigationDirective } from './drop-down.common';
import { IgxDropDownBaseDirective } from './drop-down.base';
/**
 * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBaseDirective component
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {
    dropdown: IgxDropDownBaseDirective;
    protected _target: IgxDropDownBaseDirective;
    constructor(dropdown: IgxDropDownBaseDirective);
    /**
     * Gets the target of the navigation directive;
     *
     * ```typescript
     * // Get
     * export class MyComponent {
     *  ...
     *  @ContentChild(IgxDropDownNavigationDirective)
     *  navDirective: IgxDropDownNavigationDirective = null
     *  ...
     *  const navTarget: IgxDropDownBaseDirective = navDirective.navTarget
     * }
     * ```
     */
    get target(): IgxDropDownBaseDirective;
    /**
     * Sets the target of the navigation directive;
     * If no valid target is passed, it falls back to the drop down context
     *
     * ```html
     * <!-- Set -->
     * <input [igxDropDownItemNavigation]="dropdown" />
     * ...
     * <igx-drop-down #dropdown>
     * ...
     * </igx-drop-down>
     * ```
     */
    set target(target: IgxDropDownBaseDirective);
    /**
     * Captures keydown events and calls the appropriate handlers on the target component
     */
    handleKeyDown(event: KeyboardEvent): void;
    /**
     * Navigates to previous item
     */
    onArrowDownKeyDown(): void;
    /**
     * Navigates to previous item
     */
    onArrowUpKeyDown(): void;
    /**
     * Navigates to target's last item
     */
    onEndKeyDown(): void;
    /**
     * Navigates to target's first item
     */
    onHomeKeyDown(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxDropDownItemNavigationDirective, [{ optional: true; self: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxDropDownItemNavigationDirective, "[igxDropDownItemNavigation]", never, { "target": "igxDropDownItemNavigation"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcC1kb3duLW5hdmlnYXRpb24uZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImRyb3AtZG93bi1uYXZpZ2F0aW9uLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRHJvcERvd25OYXZpZ2F0aW9uRGlyZWN0aXZlIH0gZnJvbSAnLi9kcm9wLWRvd24uY29tbW9uJztcbmltcG9ydCB7IElneERyb3BEb3duQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vZHJvcC1kb3duLmJhc2UnO1xuLyoqXG4gKiBOYXZpZ2F0aW9uIERpcmVjdGl2ZSB0aGF0IGhhbmRsZXMga2V5Ym9hcmQgZXZlbnRzIG9uIGl0cyBob3N0IGFuZCBjb250cm9scyBhIHRhcmdldGVkIElneERyb3BEb3duQmFzZURpcmVjdGl2ZSBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RHJvcERvd25JdGVtTmF2aWdhdGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIElEcm9wRG93bk5hdmlnYXRpb25EaXJlY3RpdmUge1xuICAgIGRyb3Bkb3duOiBJZ3hEcm9wRG93bkJhc2VEaXJlY3RpdmU7XG4gICAgcHJvdGVjdGVkIF90YXJnZXQ6IElneERyb3BEb3duQmFzZURpcmVjdGl2ZTtcbiAgICBjb25zdHJ1Y3Rvcihkcm9wZG93bjogSWd4RHJvcERvd25CYXNlRGlyZWN0aXZlKTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0YXJnZXQgb2YgdGhlIG5hdmlnYXRpb24gZGlyZWN0aXZlO1xuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIC8vIEdldFxuICAgICAqIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCB7XG4gICAgICogIC4uLlxuICAgICAqICBAQ29udGVudENoaWxkKElneERyb3BEb3duTmF2aWdhdGlvbkRpcmVjdGl2ZSlcbiAgICAgKiAgbmF2RGlyZWN0aXZlOiBJZ3hEcm9wRG93bk5hdmlnYXRpb25EaXJlY3RpdmUgPSBudWxsXG4gICAgICogIC4uLlxuICAgICAqICBjb25zdCBuYXZUYXJnZXQ6IElneERyb3BEb3duQmFzZURpcmVjdGl2ZSA9IG5hdkRpcmVjdGl2ZS5uYXZUYXJnZXRcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IHRhcmdldCgpOiBJZ3hEcm9wRG93bkJhc2VEaXJlY3RpdmU7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGFyZ2V0IG9mIHRoZSBuYXZpZ2F0aW9uIGRpcmVjdGl2ZTtcbiAgICAgKiBJZiBubyB2YWxpZCB0YXJnZXQgaXMgcGFzc2VkLCBpdCBmYWxscyBiYWNrIHRvIHRoZSBkcm9wIGRvd24gY29udGV4dFxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDwhLS0gU2V0IC0tPlxuICAgICAqIDxpbnB1dCBbaWd4RHJvcERvd25JdGVtTmF2aWdhdGlvbl09XCJkcm9wZG93blwiIC8+XG4gICAgICogLi4uXG4gICAgICogPGlneC1kcm9wLWRvd24gI2Ryb3Bkb3duPlxuICAgICAqIC4uLlxuICAgICAqIDwvaWd4LWRyb3AtZG93bj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgdGFyZ2V0KHRhcmdldDogSWd4RHJvcERvd25CYXNlRGlyZWN0aXZlKTtcbiAgICAvKipcbiAgICAgKiBDYXB0dXJlcyBrZXlkb3duIGV2ZW50cyBhbmQgY2FsbHMgdGhlIGFwcHJvcHJpYXRlIGhhbmRsZXJzIG9uIHRoZSB0YXJnZXQgY29tcG9uZW50XG4gICAgICovXG4gICAgaGFuZGxlS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTmF2aWdhdGVzIHRvIHByZXZpb3VzIGl0ZW1cbiAgICAgKi9cbiAgICBvbkFycm93RG93bktleURvd24oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBOYXZpZ2F0ZXMgdG8gcHJldmlvdXMgaXRlbVxuICAgICAqL1xuICAgIG9uQXJyb3dVcEtleURvd24oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBOYXZpZ2F0ZXMgdG8gdGFyZ2V0J3MgbGFzdCBpdGVtXG4gICAgICovXG4gICAgb25FbmRLZXlEb3duKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTmF2aWdhdGVzIHRvIHRhcmdldCdzIGZpcnN0IGl0ZW1cbiAgICAgKi9cbiAgICBvbkhvbWVLZXlEb3duKCk6IHZvaWQ7XG59XG4iXX0=