/**
 * The `<igx-drop-down-item>` is a container intended for row items in
 * a `<igx-drop-down>` container.
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxDropDownGroupComponent {
    private _id;
    /**
     * @hidden @internal
     */
    get labelId(): string;
    get labelledBy(): string;
    /**
     * @hidden @internal
     */
    role: string;
    /** @hidden @internal */
    groupClass: boolean;
    /**
     * Sets/gets if the item group is disabled
     *
     * ```typescript
     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;
     * // get
     * ...
     * const groupState: boolean = myDropDownGroup.disabled;
     * ...
     * //set
     * ...
     * myDropDownGroup,disabled = false;
     * ...
     * ```
     *
     * ```html
     * <igx-drop-down-item-group [label]="'My Items'" [disabled]="true">
     *     <igx-drop-down-item *ngFor="let item of items[index]" [value]="item.value">
     *         {{ item.text }}
     *     </igx-drop-down-item>
     * </igx-drop-down-item-group>
     * ```
     *
     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled
     */
    disabled: boolean;
    /**
     * Sets/gets the label of the item group
     *
     * ```typescript
     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;
     * // get
     * ...
     * const myLabel: string = myDropDownGroup.label;
     * ...
     * // set
     * ...
     * myDropDownGroup.label = 'My New Label';
     * ...
     * ```
     *
     * ```html
     * <igx-drop-down-item-group [label]="'My new Label'">
     *      ...
     * </igx-drop-down-item-group>
     * ```
    */
    label: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxDropDownGroupComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxDropDownGroupComponent, "igx-drop-down-item-group", never, { "disabled": "disabled"; "label": "label"; }, {}, never, ["igx-drop-down-item"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcC1kb3duLWdyb3VwLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkcm9wLWRvd24tZ3JvdXAuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgYDxpZ3gtZHJvcC1kb3duLWl0ZW0+YCBpcyBhIGNvbnRhaW5lciBpbnRlbmRlZCBmb3Igcm93IGl0ZW1zIGluXG4gKiBhIGA8aWd4LWRyb3AtZG93bj5gIGNvbnRhaW5lci5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RHJvcERvd25Hcm91cENvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBfaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgbGFiZWxJZCgpOiBzdHJpbmc7XG4gICAgZ2V0IGxhYmVsbGVkQnkoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcm9sZTogc3RyaW5nO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIGdyb3VwQ2xhc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIGlmIHRoZSBpdGVtIGdyb3VwIGlzIGRpc2FibGVkXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbXlEcm9wRG93bkdyb3VwOiBJZ3hEcm9wRG93bkdyb3VwQ29tcG9uZW50ID0gdGhpcy5kcm9wZG93bkdyb3VwO1xuICAgICAqIC8vIGdldFxuICAgICAqIC4uLlxuICAgICAqIGNvbnN0IGdyb3VwU3RhdGU6IGJvb2xlYW4gPSBteURyb3BEb3duR3JvdXAuZGlzYWJsZWQ7XG4gICAgICogLi4uXG4gICAgICogLy9zZXRcbiAgICAgKiAuLi5cbiAgICAgKiBteURyb3BEb3duR3JvdXAsZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgKiAuLi5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWRyb3AtZG93bi1pdGVtLWdyb3VwIFtsYWJlbF09XCInTXkgSXRlbXMnXCIgW2Rpc2FibGVkXT1cInRydWVcIj5cbiAgICAgKiAgICAgPGlneC1kcm9wLWRvd24taXRlbSAqbmdGb3I9XCJsZXQgaXRlbSBvZiBpdGVtc1tpbmRleF1cIiBbdmFsdWVdPVwiaXRlbS52YWx1ZVwiPlxuICAgICAqICAgICAgICAge3sgaXRlbS50ZXh0IH19XG4gICAgICogICAgIDwvaWd4LWRyb3AtZG93bi1pdGVtPlxuICAgICAqIDwvaWd4LWRyb3AtZG93bi1pdGVtLWdyb3VwPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogKipOT1RFOioqIEFsbCBpdGVtcyBpbnNpZGUgb2YgYSBkaXNhYmxlZCBkcm9wIGRvd24gZ3JvdXAgd2lsbCBiZSB0cmVhdGVkIGFzIGRpc2FibGVkXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHRoZSBsYWJlbCBvZiB0aGUgaXRlbSBncm91cFxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG15RHJvcERvd25Hcm91cDogSWd4RHJvcERvd25Hcm91cENvbXBvbmVudCA9IHRoaXMuZHJvcGRvd25Hcm91cDtcbiAgICAgKiAvLyBnZXRcbiAgICAgKiAuLi5cbiAgICAgKiBjb25zdCBteUxhYmVsOiBzdHJpbmcgPSBteURyb3BEb3duR3JvdXAubGFiZWw7XG4gICAgICogLi4uXG4gICAgICogLy8gc2V0XG4gICAgICogLi4uXG4gICAgICogbXlEcm9wRG93bkdyb3VwLmxhYmVsID0gJ015IE5ldyBMYWJlbCc7XG4gICAgICogLi4uXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kcm9wLWRvd24taXRlbS1ncm91cCBbbGFiZWxdPVwiJ015IG5ldyBMYWJlbCdcIj5cbiAgICAgKiAgICAgIC4uLlxuICAgICAqIDwvaWd4LWRyb3AtZG93bi1pdGVtLWdyb3VwPlxuICAgICAqIGBgYFxuICAgICovXG4gICAgbGFiZWw6IHN0cmluZztcbn1cbiJdfQ==