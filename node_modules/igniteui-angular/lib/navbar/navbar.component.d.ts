import { EventEmitter } from '@angular/core';
/**
 * IgxActionIcon is a container for the action nav icon of the IgxNavbar.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../directives/button/button.directive';
import * as ɵngcc2 from '../icon/index';
import * as ɵngcc3 from '@angular/common';
export declare class IgxActionIconDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxActionIconDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxActionIconDirective, "igx-action-icon", never, {}, {}, never>;
}
/**
 * **Ignite UI for Angular Navbar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)
 *
 * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation
 * state such as a "Go Back" button. It also supports other actions represented by icons.
 *
 * Example:
 * ```html
 * <igx-navbar title="Sample App" actionButtonIcon="menu">
 *   <igx-icon>search</igx-icon>
 *   <igx-icon>favorite</igx-icon>
 *   <igx-icon>more_vert</igx-icon>
 * </igx-navbar>
 * ```
 */
export declare class IgxNavbarComponent {
    private static NEXT_ID;
    private isVisible;
    /**
     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.
     *```html
     *<igx-navbar [id]="'igx-navbar-12'" title="Sample App" actionButtonIcon="menu">
     *```
     */
    id: string;
    /**
     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.
     *```typescript
     *@ViewChild("MyChild")
     *public navBar: IgxNavbarComponent;
     *ngAfterViewInit(){
     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;
     *}
     *```
     */
    get isActionButtonVisible(): boolean;
    /**
     *Sets whether the action button of the `IgxNavbarComponent` is visible.
     *```html
     *<igx-navbar [title]="currentView" [isActionButtonVisible]="'false'"></igx-navbar>
     *```
     */
    set isActionButtonVisible(value: boolean);
    /**
     *An @Input property that sets the icon of the `IgxNavbarComponent`.
     *```html
     *<igx-navbar [title]="currentView" actionButtonIcon="arrow_back"></igx-navbar>
     *```
     */
    actionButtonIcon: string;
    /**
     *An @Input property that sets the title of the `IgxNavbarComponent`.
     *```html
     *<igx-navbar title="Sample App" actionButtonIcon="menu">
     *```
     */
    title: string;
    /**
     *The event that will be thrown when the action is executed,
     *provides reference to the `IgxNavbar` component as argument
     *```typescript
     *public actionExc(event){
     *    alert("Action Execute!");
     *}
     * //..
     *```
     *```html
     *<igx-navbar (onAction)="actionExc($event)" title="Sample App" actionButtonIcon="menu">
     *```
     */
    onAction: EventEmitter<IgxNavbarComponent>;
    /**
     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.
     *```html
     *<igx-navbar [titleId]="'igx-navbar-7'" title="Sample App" actionButtonIcon="menu">
     *```
     */
    titleId: string;
    /**
     * @hidden
     */
    protected actionIconTemplate: IgxActionIconDirective;
    /**
     *@hidden
     */
    _triggerAction(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxNavbarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxNavbarComponent, "igx-navbar", never, { "id": "id"; "titleId": "titleId"; "isActionButtonVisible": "isActionButtonVisible"; "actionButtonIcon": "actionButtonIcon"; "title": "title"; }, { "onAction": "onAction"; }, ["actionIconTemplate"], ["igx-action-icon", "*"]>;
}
/**
 * @hidden
 */
export declare class IgxNavbarModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxNavbarModule, [typeof IgxNavbarComponent, typeof IgxActionIconDirective], [typeof ɵngcc1.IgxButtonModule, typeof ɵngcc2.IgxIconModule, typeof ɵngcc3.CommonModule], [typeof IgxNavbarComponent, typeof IgxActionIconDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxNavbarModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuYXZiYXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBJZ3hBY3Rpb25JY29uIGlzIGEgY29udGFpbmVyIGZvciB0aGUgYWN0aW9uIG5hdiBpY29uIG9mIHRoZSBJZ3hOYXZiYXIuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEFjdGlvbkljb25EaXJlY3RpdmUge1xufVxuLyoqXG4gKiAqKklnbml0ZSBVSSBmb3IgQW5ndWxhciBOYXZiYXIqKiAtXG4gKiBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly93d3cuaW5mcmFnaXN0aWNzLmNvbS9wcm9kdWN0cy9pZ25pdGUtdWktYW5ndWxhci9hbmd1bGFyL2NvbXBvbmVudHMvbmF2YmFyLmh0bWwpXG4gKlxuICogVGhlIElnbml0ZSBVSSBOYXZiYXIgaXMgbW9zdCBjb21tb25seSB1c2VkIHRvIHByb3ZpZGUgYW4gYXBwIGhlYWRlciB3aXRoIGEgaGFtYnVyZ2VyIG1lbnUgYW5kIG5hdmlnYXRpb25cbiAqIHN0YXRlIHN1Y2ggYXMgYSBcIkdvIEJhY2tcIiBidXR0b24uIEl0IGFsc28gc3VwcG9ydHMgb3RoZXIgYWN0aW9ucyByZXByZXNlbnRlZCBieSBpY29ucy5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgaHRtbFxuICogPGlneC1uYXZiYXIgdGl0bGU9XCJTYW1wbGUgQXBwXCIgYWN0aW9uQnV0dG9uSWNvbj1cIm1lbnVcIj5cbiAqICAgPGlneC1pY29uPnNlYXJjaDwvaWd4LWljb24+XG4gKiAgIDxpZ3gtaWNvbj5mYXZvcml0ZTwvaWd4LWljb24+XG4gKiAgIDxpZ3gtaWNvbj5tb3JlX3ZlcnQ8L2lneC1pY29uPlxuICogPC9pZ3gtbmF2YmFyPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneE5hdmJhckNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgTkVYVF9JRDtcbiAgICBwcml2YXRlIGlzVmlzaWJsZTtcbiAgICAvKipcbiAgICAgKkFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHZhbHVlIG9mIHRoZSBgaWRgIGF0dHJpYnV0ZS4gSWYgbm90IHByb3ZpZGVkIGl0IHdpbGwgYmUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQuXG4gICAgICpgYGBodG1sXG4gICAgICo8aWd4LW5hdmJhciBbaWRdPVwiJ2lneC1uYXZiYXItMTInXCIgdGl0bGU9XCJTYW1wbGUgQXBwXCIgYWN0aW9uQnV0dG9uSWNvbj1cIm1lbnVcIj5cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICpSZXR1cm5zIHdoZXRoZXIgdGhlIGBJZ3hOYXZiYXJDb21wb25lbnRgIGFjdGlvbiBidXR0b24gaXMgdmlzaWJsZSwgdHJ1ZS9mYWxzZS5cbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUNoaWxkXCIpXG4gICAgICpwdWJsaWMgbmF2QmFyOiBJZ3hOYXZiYXJDb21wb25lbnQ7XG4gICAgICpuZ0FmdGVyVmlld0luaXQoKXtcbiAgICAgKiAgICBsZXQgYWN0aW9uQnV0dG9uVmlzaWJpbGUgPSB0aGlzLm5hdkJhci5pc0FjdGlvbkJ1dHRvblZpc2libGU7XG4gICAgICp9XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBnZXQgaXNBY3Rpb25CdXR0b25WaXNpYmxlKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICpTZXRzIHdoZXRoZXIgdGhlIGFjdGlvbiBidXR0b24gb2YgdGhlIGBJZ3hOYXZiYXJDb21wb25lbnRgIGlzIHZpc2libGUuXG4gICAgICpgYGBodG1sXG4gICAgICo8aWd4LW5hdmJhciBbdGl0bGVdPVwiY3VycmVudFZpZXdcIiBbaXNBY3Rpb25CdXR0b25WaXNpYmxlXT1cIidmYWxzZSdcIj48L2lneC1uYXZiYXI+XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBzZXQgaXNBY3Rpb25CdXR0b25WaXNpYmxlKHZhbHVlOiBib29sZWFuKTtcbiAgICAvKipcbiAgICAgKkFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIGljb24gb2YgdGhlIGBJZ3hOYXZiYXJDb21wb25lbnRgLlxuICAgICAqYGBgaHRtbFxuICAgICAqPGlneC1uYXZiYXIgW3RpdGxlXT1cImN1cnJlbnRWaWV3XCIgYWN0aW9uQnV0dG9uSWNvbj1cImFycm93X2JhY2tcIj48L2lneC1uYXZiYXI+XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBhY3Rpb25CdXR0b25JY29uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICpBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB0aXRsZSBvZiB0aGUgYElneE5hdmJhckNvbXBvbmVudGAuXG4gICAgICpgYGBodG1sXG4gICAgICo8aWd4LW5hdmJhciB0aXRsZT1cIlNhbXBsZSBBcHBcIiBhY3Rpb25CdXR0b25JY29uPVwibWVudVwiPlxuICAgICAqYGBgXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKlRoZSBldmVudCB0aGF0IHdpbGwgYmUgdGhyb3duIHdoZW4gdGhlIGFjdGlvbiBpcyBleGVjdXRlZCxcbiAgICAgKnByb3ZpZGVzIHJlZmVyZW5jZSB0byB0aGUgYElneE5hdmJhcmAgY29tcG9uZW50IGFzIGFyZ3VtZW50XG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICpwdWJsaWMgYWN0aW9uRXhjKGV2ZW50KXtcbiAgICAgKiAgICBhbGVydChcIkFjdGlvbiBFeGVjdXRlIVwiKTtcbiAgICAgKn1cbiAgICAgKiAvLy4uXG4gICAgICpgYGBcbiAgICAgKmBgYGh0bWxcbiAgICAgKjxpZ3gtbmF2YmFyIChvbkFjdGlvbik9XCJhY3Rpb25FeGMoJGV2ZW50KVwiIHRpdGxlPVwiU2FtcGxlIEFwcFwiIGFjdGlvbkJ1dHRvbkljb249XCJtZW51XCI+XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBvbkFjdGlvbjogRXZlbnRFbWl0dGVyPElneE5hdmJhckNvbXBvbmVudD47XG4gICAgLyoqXG4gICAgICpBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB0aXRsZUlkIG9mIHRoZSBgSWd4TmF2YmFyQ29tcG9uZW50YC4gSWYgbm90IHNldCBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkLlxuICAgICAqYGBgaHRtbFxuICAgICAqPGlneC1uYXZiYXIgW3RpdGxlSWRdPVwiJ2lneC1uYXZiYXItNydcIiB0aXRsZT1cIlNhbXBsZSBBcHBcIiBhY3Rpb25CdXR0b25JY29uPVwibWVudVwiPlxuICAgICAqYGBgXG4gICAgICovXG4gICAgdGl0bGVJZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWN0aW9uSWNvblRlbXBsYXRlOiBJZ3hBY3Rpb25JY29uRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIF90cmlnZ2VyQWN0aW9uKCk6IHZvaWQ7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4TmF2YmFyTW9kdWxlIHtcbn1cbiJdfQ==