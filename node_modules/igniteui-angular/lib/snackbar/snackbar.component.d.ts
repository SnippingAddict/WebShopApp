import { AnimationEvent } from '@angular/animations';
import { EventEmitter, NgZone } from '@angular/core';
/**
 * **Ignite UI for Angular Snackbar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)
 *
 * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can
 * include a link to an action such as Undo.
 *
 * Example:
 * ```html
 * <button (click)="snackbar.show()">Send message</button>
 * <div>
 *   <igx-snackbar #snackbar message="Message sent">
 *   </igx-snackbar>
 * </div>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class IgxSnackbarComponent {
    private zone;
    /**
     * Sets/gets the `id` of the snackbar.
     * If not set, the `id` of the first snackbar component  will be `"igx-snackbar-0"`;
     * ```html
     * <igx-snackbar id = "Snackbar1"></igx-snackbar>
     * ```
     * ```typescript
     * let snackbarId = this.snackbar.id;
     * ```
     * @memberof IgxSnackbarComponent
     */
    id: string;
    /**
     * Sets/gets the `message` attribute.
     * ```html
     * <igx-snackbar [message] = "'Snackbar Component'"></igx-snackbar>
     * ```
     * ```typescript
     * let message =  this.snackbar.message;
     * ```
     */
    message: string;
    /**
     * Enables/Disables the visibility of the snackbar.
     * If not set, the `isVisible` attribute will have value `false`.
     * ```html
     * <igx-snackbar [isVisible] = "true"></igx-snackbar>
     * ```
     * ```typescript
     * let isVisible =  this.snackbar.isVisible;
     * ```
     */
    isVisible: boolean;
    /**
     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.
     * Default value is `true`.
     * ```html
     * <igx-snackbar [autoHide] = "false"></igx-snackbar>
     * ```
     * ```typescript
     * let autoHide =  this.snackbar.autoHide;
     * ```
     */
    autoHide: boolean;
    /**
     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.
     * Default value is 4000.
     * ```html
     * <igx-snackbar [displayTime] = "2000"></igx-snackbar>
     * ```
     * ```typescript
     * let displayTime = this.snackbar.displayTime;
     * ```
     */
    displayTime: number;
    /**
     * Sets/gets the `actionText` attribute.
     * ```html
     * <igx-snackbar [actionText] = "'Action Text'"></igx-snackbar>
     * ```
     */
    actionText?: string;
    /**
     * An event that will be emitted when the action is executed.
     * Provides reference to the `IgxSnackbarComponent` as an argument.
     * ```html
     * <igx-snackbar (onAction) = "onAction($event)"></igx-snackbar>
     * ```
     */
    onAction: EventEmitter<IgxSnackbarComponent>;
    /**
     * An event that will be emitted when the snackbar animation starts.
     * Provides reference to the `AnimationEvent` interface as an argument.
     * ```html
     * <igx-snackbar (animationStarted) = "animationStarted($event)"></igx-snackbar>
     * ```
     */
    animationStarted: EventEmitter<AnimationEvent>;
    /**
     * An event that will be emitted when the snackbar animation ends.
     * Provides reference to the `AnimationEvent` interface as an argument.
     * ```html
     * <igx-snackbar (animationDone) = "animationDone($event)"></igx-snackbar>
     * ```
     */
    animationDone: EventEmitter<AnimationEvent>;
    /**
     *@hidden
     */
    private timeoutId;
    constructor(zone: NgZone);
    /**
     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.
     * ```typescript
     * this.snackbar.show();
     * ```
     */
    show(): void;
    /**
     * Hides the snackbar.
     * ```typescript
     * this.snackbar.hide();
     * ```
     */
    hide(): void;
    /**
     *@hidden
     */
    triggerAction(): void;
    /**
     *@hidden
     * @memberof IgxSnackbarComponent
     */
    snackbarAnimationStarted(evt: AnimationEvent): void;
    /**
     *@hidden
     * @memberof IgxSnackbarComponent
     */
    snackbarAnimationDone(evt: AnimationEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSnackbarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxSnackbarComponent, "igx-snackbar", never, { "id": "id"; "isVisible": "isVisible"; "autoHide": "autoHide"; "displayTime": "displayTime"; "message": "message"; "actionText": "actionText"; }, { "onAction": "onAction"; "animationStarted": "animationStarted"; "animationDone": "animationDone"; }, never, ["*"]>;
}
/**
 * @hidden
 */
export declare class IgxSnackbarModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxSnackbarModule, [typeof IgxSnackbarComponent], [typeof ɵngcc1.CommonModule], [typeof IgxSnackbarComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxSnackbarModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hY2tiYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInNuYWNrYmFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5pbWF0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqICoqSWduaXRlIFVJIGZvciBBbmd1bGFyIFNuYWNrYmFyKiogLVxuICogW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vd3d3LmluZnJhZ2lzdGljcy5jb20vcHJvZHVjdHMvaWduaXRlLXVpLWFuZ3VsYXIvYW5ndWxhci9jb21wb25lbnRzL3NuYWNrYmFyLmh0bWwpXG4gKlxuICogVGhlIElnbml0ZSBVSSBTbmFjayBCYXIgcHJvdmlkZXMgZmVlZGJhY2sgYWJvdXQgYW4gb3BlcmF0aW9uIHdpdGggYSBzaW5nbGUtbGluZSBtZXNzYWdlLCB3aGljaCBjYW5cbiAqIGluY2x1ZGUgYSBsaW5rIHRvIGFuIGFjdGlvbiBzdWNoIGFzIFVuZG8uXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYGh0bWxcbiAqIDxidXR0b24gKGNsaWNrKT1cInNuYWNrYmFyLnNob3coKVwiPlNlbmQgbWVzc2FnZTwvYnV0dG9uPlxuICogPGRpdj5cbiAqICAgPGlneC1zbmFja2JhciAjc25hY2tiYXIgbWVzc2FnZT1cIk1lc3NhZ2Ugc2VudFwiPlxuICogICA8L2lneC1zbmFja2Jhcj5cbiAqIDwvZGl2PlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFNuYWNrYmFyQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHRoZSBgaWRgIG9mIHRoZSBzbmFja2Jhci5cbiAgICAgKiBJZiBub3Qgc2V0LCB0aGUgYGlkYCBvZiB0aGUgZmlyc3Qgc25hY2tiYXIgY29tcG9uZW50ICB3aWxsIGJlIGBcImlneC1zbmFja2Jhci0wXCJgO1xuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNuYWNrYmFyIGlkID0gXCJTbmFja2JhcjFcIj48L2lneC1zbmFja2Jhcj5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHNuYWNrYmFySWQgPSB0aGlzLnNuYWNrYmFyLmlkO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hTbmFja2JhckNvbXBvbmVudFxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHRoZSBgbWVzc2FnZWAgYXR0cmlidXRlLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNuYWNrYmFyIFttZXNzYWdlXSA9IFwiJ1NuYWNrYmFyIENvbXBvbmVudCdcIj48L2lneC1zbmFja2Jhcj5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IG1lc3NhZ2UgPSAgdGhpcy5zbmFja2Jhci5tZXNzYWdlO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFbmFibGVzL0Rpc2FibGVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBzbmFja2Jhci5cbiAgICAgKiBJZiBub3Qgc2V0LCB0aGUgYGlzVmlzaWJsZWAgYXR0cmlidXRlIHdpbGwgaGF2ZSB2YWx1ZSBgZmFsc2VgLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNuYWNrYmFyIFtpc1Zpc2libGVdID0gXCJ0cnVlXCI+PC9pZ3gtc25hY2tiYXI+XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBpc1Zpc2libGUgPSAgdGhpcy5zbmFja2Jhci5pc1Zpc2libGU7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgaXNWaXNpYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyBpZiB0aGUgc25hY2tiYXIgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGhpZGRlbiBhZnRlciB0aGUgYGRpc3BsYXlUaW1lYCBpcyBvdmVyLlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNuYWNrYmFyIFthdXRvSGlkZV0gPSBcImZhbHNlXCI+PC9pZ3gtc25hY2tiYXI+XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBhdXRvSGlkZSA9ICB0aGlzLnNuYWNrYmFyLmF1dG9IaWRlO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGF1dG9IaWRlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgZHVyYXRpb24gb2YgdGltZShpbiBtaWxsaXNlY29uZHMpIGluIHdoaWNoIHRoZSBzbmFja2JhciB3aWxsIGJlIHZpc2libGUgYWZ0ZXIgaXQgaXMgYmVpbmcgc2hvd24uXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyA0MDAwLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXNuYWNrYmFyIFtkaXNwbGF5VGltZV0gPSBcIjIwMDBcIj48L2lneC1zbmFja2Jhcj5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGRpc3BsYXlUaW1lID0gdGhpcy5zbmFja2Jhci5kaXNwbGF5VGltZTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBkaXNwbGF5VGltZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgYGFjdGlvblRleHRgIGF0dHJpYnV0ZS5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1zbmFja2JhciBbYWN0aW9uVGV4dF0gPSBcIidBY3Rpb24gVGV4dCdcIj48L2lneC1zbmFja2Jhcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhY3Rpb25UZXh0Pzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFuIGV2ZW50IHRoYXQgd2lsbCBiZSBlbWl0dGVkIHdoZW4gdGhlIGFjdGlvbiBpcyBleGVjdXRlZC5cbiAgICAgKiBQcm92aWRlcyByZWZlcmVuY2UgdG8gdGhlIGBJZ3hTbmFja2JhckNvbXBvbmVudGAgYXMgYW4gYXJndW1lbnQuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtc25hY2tiYXIgKG9uQWN0aW9uKSA9IFwib25BY3Rpb24oJGV2ZW50KVwiPjwvaWd4LXNuYWNrYmFyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uQWN0aW9uOiBFdmVudEVtaXR0ZXI8SWd4U25hY2tiYXJDb21wb25lbnQ+O1xuICAgIC8qKlxuICAgICAqIEFuIGV2ZW50IHRoYXQgd2lsbCBiZSBlbWl0dGVkIHdoZW4gdGhlIHNuYWNrYmFyIGFuaW1hdGlvbiBzdGFydHMuXG4gICAgICogUHJvdmlkZXMgcmVmZXJlbmNlIHRvIHRoZSBgQW5pbWF0aW9uRXZlbnRgIGludGVyZmFjZSBhcyBhbiBhcmd1bWVudC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1zbmFja2JhciAoYW5pbWF0aW9uU3RhcnRlZCkgPSBcImFuaW1hdGlvblN0YXJ0ZWQoJGV2ZW50KVwiPjwvaWd4LXNuYWNrYmFyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGFuaW1hdGlvblN0YXJ0ZWQ6IEV2ZW50RW1pdHRlcjxBbmltYXRpb25FdmVudD47XG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgdGhhdCB3aWxsIGJlIGVtaXR0ZWQgd2hlbiB0aGUgc25hY2tiYXIgYW5pbWF0aW9uIGVuZHMuXG4gICAgICogUHJvdmlkZXMgcmVmZXJlbmNlIHRvIHRoZSBgQW5pbWF0aW9uRXZlbnRgIGludGVyZmFjZSBhcyBhbiBhcmd1bWVudC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1zbmFja2JhciAoYW5pbWF0aW9uRG9uZSkgPSBcImFuaW1hdGlvbkRvbmUoJGV2ZW50KVwiPjwvaWd4LXNuYWNrYmFyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGFuaW1hdGlvbkRvbmU6IEV2ZW50RW1pdHRlcjxBbmltYXRpb25FdmVudD47XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSB0aW1lb3V0SWQ7XG4gICAgY29uc3RydWN0b3Ioem9uZTogTmdab25lKTtcbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgc25hY2tiYXIgYW5kIGhpZGVzIGl0IGFmdGVyIHRoZSBgZGlzcGxheVRpbWVgIGlzIG92ZXIgaWYgYGF1dG9IaWRlYCBpcyBzZXQgdG8gYHRydWVgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLnNuYWNrYmFyLnNob3coKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzaG93KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSGlkZXMgdGhlIHNuYWNrYmFyLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLnNuYWNrYmFyLmhpZGUoKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBoaWRlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgdHJpZ2dlckFjdGlvbigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqIEBtZW1iZXJvZiBJZ3hTbmFja2JhckNvbXBvbmVudFxuICAgICAqL1xuICAgIHNuYWNrYmFyQW5pbWF0aW9uU3RhcnRlZChldnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKiBAbWVtYmVyb2YgSWd4U25hY2tiYXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBzbmFja2JhckFuaW1hdGlvbkRvbmUoZXZ0OiBBbmltYXRpb25FdmVudCk6IHZvaWQ7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4U25hY2tiYXJNb2R1bGUge1xufVxuIl19