import { GridBaseAPIService } from '../api.service';
import { IgxTreeGridComponent } from './tree-grid.component';
import { ITreeGridRecord } from './tree-grid.interfaces';
import { ColumnType } from '../common/column.interface';
import * as ɵngcc0 from '@angular/core';
export declare class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {
    get_all_data(transactions?: boolean): any[];
    get_summary_data(): any[];
    allow_expansion_state_change(rowID: any, expanded: any): boolean;
    expand_path_to_record(record: ITreeGridRecord): void;
    get_row_expansion_state(record: ITreeGridRecord): boolean;
    protected update_row_in_array(value: any, rowID: any, index: number): void;
    should_apply_number_style(column: ColumnType): boolean;
    deleteRowById(rowID: any): void;
    deleteRowFromData(rowID: any, index: number): void;
    /**
     * Updates related row of provided grid's data source with provided new row value
     * @param grid Grid to update data for
     * @param rowID ID of the row to update
     * @param rowValueInDataSource Initial value of the row as it is in data source
     * @param rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param rowNewValue New value of the row
     */
    protected updateData(grid: IgxTreeGridComponent, rowID: any, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {
        [x: string]: any;
    }): void;
    get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]): void;
    row_deleted_transaction(rowID: any): boolean;
    get_rec_by_id(rowID: any): ITreeGridRecord;
    private row_deleted_parent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTreeGridAPIService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxTreeGridAPIService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLWFwaS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInRyZWUtZ3JpZC1hcGkuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyaWRCYXNlQVBJU2VydmljZSB9IGZyb20gJy4uL2FwaS5zZXJ2aWNlJztcbmltcG9ydCB7IElneFRyZWVHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi90cmVlLWdyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IElUcmVlR3JpZFJlY29yZCB9IGZyb20gJy4vdHJlZS1ncmlkLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ29sdW1uVHlwZSB9IGZyb20gJy4uL2NvbW1vbi9jb2x1bW4uaW50ZXJmYWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFRyZWVHcmlkQVBJU2VydmljZSBleHRlbmRzIEdyaWRCYXNlQVBJU2VydmljZTxJZ3hUcmVlR3JpZENvbXBvbmVudD4ge1xuICAgIGdldF9hbGxfZGF0YSh0cmFuc2FjdGlvbnM/OiBib29sZWFuKTogYW55W107XG4gICAgZ2V0X3N1bW1hcnlfZGF0YSgpOiBhbnlbXTtcbiAgICBhbGxvd19leHBhbnNpb25fc3RhdGVfY2hhbmdlKHJvd0lEOiBhbnksIGV4cGFuZGVkOiBhbnkpOiBib29sZWFuO1xuICAgIGV4cGFuZF9wYXRoX3RvX3JlY29yZChyZWNvcmQ6IElUcmVlR3JpZFJlY29yZCk6IHZvaWQ7XG4gICAgZ2V0X3Jvd19leHBhbnNpb25fc3RhdGUocmVjb3JkOiBJVHJlZUdyaWRSZWNvcmQpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCB1cGRhdGVfcm93X2luX2FycmF5KHZhbHVlOiBhbnksIHJvd0lEOiBhbnksIGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIHNob3VsZF9hcHBseV9udW1iZXJfc3R5bGUoY29sdW1uOiBDb2x1bW5UeXBlKTogYm9vbGVhbjtcbiAgICBkZWxldGVSb3dCeUlkKHJvd0lEOiBhbnkpOiB2b2lkO1xuICAgIGRlbGV0ZVJvd0Zyb21EYXRhKHJvd0lEOiBhbnksIGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgcmVsYXRlZCByb3cgb2YgcHJvdmlkZWQgZ3JpZCdzIGRhdGEgc291cmNlIHdpdGggcHJvdmlkZWQgbmV3IHJvdyB2YWx1ZVxuICAgICAqIEBwYXJhbSBncmlkIEdyaWQgdG8gdXBkYXRlIGRhdGEgZm9yXG4gICAgICogQHBhcmFtIHJvd0lEIElEIG9mIHRoZSByb3cgdG8gdXBkYXRlXG4gICAgICogQHBhcmFtIHJvd1ZhbHVlSW5EYXRhU291cmNlIEluaXRpYWwgdmFsdWUgb2YgdGhlIHJvdyBhcyBpdCBpcyBpbiBkYXRhIHNvdXJjZVxuICAgICAqIEBwYXJhbSByb3dDdXJyZW50VmFsdWUgQ3VycmVudCB2YWx1ZSBvZiB0aGUgcm93IGFzIGl0IGlzIHdpdGggYXBwbGllZCBwcmV2aW91cyB0cmFuc2FjdGlvbnNcbiAgICAgKiBAcGFyYW0gcm93TmV3VmFsdWUgTmV3IHZhbHVlIG9mIHRoZSByb3dcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdXBkYXRlRGF0YShncmlkOiBJZ3hUcmVlR3JpZENvbXBvbmVudCwgcm93SUQ6IGFueSwgcm93VmFsdWVJbkRhdGFTb3VyY2U6IGFueSwgcm93Q3VycmVudFZhbHVlOiBhbnksIHJvd05ld1ZhbHVlOiB7XG4gICAgICAgIFt4OiBzdHJpbmddOiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgZ2V0X3NlbGVjdGVkX2NoaWxkcmVuKHJlY29yZDogSVRyZWVHcmlkUmVjb3JkLCBzZWxlY3RlZFJvd0lEczogYW55W10pOiB2b2lkO1xuICAgIHJvd19kZWxldGVkX3RyYW5zYWN0aW9uKHJvd0lEOiBhbnkpOiBib29sZWFuO1xuICAgIGdldF9yZWNfYnlfaWQocm93SUQ6IGFueSk6IElUcmVlR3JpZFJlY29yZDtcbiAgICBwcml2YXRlIHJvd19kZWxldGVkX3BhcmVudDtcbn1cbiJdfQ==