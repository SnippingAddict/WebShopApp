import { PipeTransform } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { ITreeGridRecord } from './tree-grid.interfaces';
import { IgxGridBaseDirective } from '../grid';
import { ISortingExpression } from '../../data-operations/sorting-expression.interface';
import { GridType } from '../common/grid.interface';
import { IGridSortingStrategy } from '../../data-operations/sorting-strategy';
/**
 *@hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxTreeGridHierarchizingPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string, id: string, pipeTrigger: number): ITreeGridRecord[];
    private getRowID;
    private hierarchizeFlatData;
    private setIndentationLevels;
    private hierarchizeRecursive;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTreeGridHierarchizingPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxTreeGridHierarchizingPipe, "treeGridHierarchizing">;
}
/**
 *@hidden
 */
export declare class IgxTreeGridFlatteningPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: ITreeGridRecord[], id: string, expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[];
    private getFlatDataRecursive;
    private updateNonProcessedRecordExpansion;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTreeGridFlatteningPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxTreeGridFlatteningPipe, "treeGridFlattening">;
}
/** @hidden */
export declare class IgxTreeGridSortingPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(hierarchicalData: ITreeGridRecord[], expressions: ISortingExpression[], sorting: IGridSortingStrategy, id: string, pipeTrigger: number): ITreeGridRecord[];
    private flattenTreeGridRecords;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTreeGridSortingPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxTreeGridSortingPipe, "treeGridSorting">;
}
/** @hidden */
export declare class IgxTreeGridPagingPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: ITreeGridRecord[], page: number, perPage: number, id: string, pipeTrigger: number): ITreeGridRecord[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTreeGridPagingPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxTreeGridPagingPipe, "treeGridPaging">;
}
/** @hidden */
export declare class IgxTreeGridTransactionPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: any[], id: string, pipeTrigger: number): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTreeGridTransactionPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxTreeGridTransactionPipe, "treeGridTransaction">;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLnBpcGVzLmQudHMiLCJzb3VyY2VzIjpbInRyZWUtZ3JpZC5waXBlcy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JpZEJhc2VBUElTZXJ2aWNlIH0gZnJvbSAnLi4vYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgSVRyZWVHcmlkUmVjb3JkIH0gZnJvbSAnLi90cmVlLWdyaWQuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBJZ3hHcmlkQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4uL2dyaWQnO1xuaW1wb3J0IHsgSVNvcnRpbmdFeHByZXNzaW9uIH0gZnJvbSAnLi4vLi4vZGF0YS1vcGVyYXRpb25zL3NvcnRpbmctZXhwcmVzc2lvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgR3JpZFR5cGUgfSBmcm9tICcuLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSUdyaWRTb3J0aW5nU3RyYXRlZ3kgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvc29ydGluZy1zdHJhdGVneSc7XG4vKipcbiAqQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hUcmVlR3JpZEhpZXJhcmNoaXppbmdQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSBncmlkQVBJO1xuICAgIGNvbnN0cnVjdG9yKGdyaWRBUEk6IEdyaWRCYXNlQVBJU2VydmljZTxJZ3hHcmlkQmFzZURpcmVjdGl2ZSAmIEdyaWRUeXBlPik7XG4gICAgdHJhbnNmb3JtKGNvbGxlY3Rpb246IGFueVtdLCBwcmltYXJ5S2V5OiBzdHJpbmcsIGZvcmVpZ25LZXk6IHN0cmluZywgY2hpbGREYXRhS2V5OiBzdHJpbmcsIGlkOiBzdHJpbmcsIHBpcGVUcmlnZ2VyOiBudW1iZXIpOiBJVHJlZUdyaWRSZWNvcmRbXTtcbiAgICBwcml2YXRlIGdldFJvd0lEO1xuICAgIHByaXZhdGUgaGllcmFyY2hpemVGbGF0RGF0YTtcbiAgICBwcml2YXRlIHNldEluZGVudGF0aW9uTGV2ZWxzO1xuICAgIHByaXZhdGUgaGllcmFyY2hpemVSZWN1cnNpdmU7XG59XG4vKipcbiAqQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hUcmVlR3JpZEZsYXR0ZW5pbmdQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSBncmlkQVBJO1xuICAgIGNvbnN0cnVjdG9yKGdyaWRBUEk6IEdyaWRCYXNlQVBJU2VydmljZTxJZ3hHcmlkQmFzZURpcmVjdGl2ZSAmIEdyaWRUeXBlPik7XG4gICAgdHJhbnNmb3JtKGNvbGxlY3Rpb246IElUcmVlR3JpZFJlY29yZFtdLCBpZDogc3RyaW5nLCBleHBhbmRlZExldmVsczogbnVtYmVyLCBleHBhbmRlZFN0YXRlczogTWFwPGFueSwgYm9vbGVhbj4sIHBpcGVUcmlnZ2VyOiBudW1iZXIpOiBhbnlbXTtcbiAgICBwcml2YXRlIGdldEZsYXREYXRhUmVjdXJzaXZlO1xuICAgIHByaXZhdGUgdXBkYXRlTm9uUHJvY2Vzc2VkUmVjb3JkRXhwYW5zaW9uO1xufVxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFRyZWVHcmlkU29ydGluZ1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBwcml2YXRlIGdyaWRBUEk7XG4gICAgY29uc3RydWN0b3IoZ3JpZEFQSTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+KTtcbiAgICB0cmFuc2Zvcm0oaGllcmFyY2hpY2FsRGF0YTogSVRyZWVHcmlkUmVjb3JkW10sIGV4cHJlc3Npb25zOiBJU29ydGluZ0V4cHJlc3Npb25bXSwgc29ydGluZzogSUdyaWRTb3J0aW5nU3RyYXRlZ3ksIGlkOiBzdHJpbmcsIHBpcGVUcmlnZ2VyOiBudW1iZXIpOiBJVHJlZUdyaWRSZWNvcmRbXTtcbiAgICBwcml2YXRlIGZsYXR0ZW5UcmVlR3JpZFJlY29yZHM7XG59XG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4VHJlZUdyaWRQYWdpbmdQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSBncmlkQVBJO1xuICAgIGNvbnN0cnVjdG9yKGdyaWRBUEk6IEdyaWRCYXNlQVBJU2VydmljZTxJZ3hHcmlkQmFzZURpcmVjdGl2ZSAmIEdyaWRUeXBlPik7XG4gICAgdHJhbnNmb3JtKGNvbGxlY3Rpb246IElUcmVlR3JpZFJlY29yZFtdLCBwYWdlOiBudW1iZXIsIHBlclBhZ2U6IG51bWJlciwgaWQ6IHN0cmluZywgcGlwZVRyaWdnZXI6IG51bWJlcik6IElUcmVlR3JpZFJlY29yZFtdO1xufVxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFRyZWVHcmlkVHJhbnNhY3Rpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSBncmlkQVBJO1xuICAgIGNvbnN0cnVjdG9yKGdyaWRBUEk6IEdyaWRCYXNlQVBJU2VydmljZTxJZ3hHcmlkQmFzZURpcmVjdGl2ZSAmIEdyaWRUeXBlPik7XG4gICAgdHJhbnNmb3JtKGNvbGxlY3Rpb246IGFueVtdLCBpZDogc3RyaW5nLCBwaXBlVHJpZ2dlcjogbnVtYmVyKTogYW55W107XG59XG4iXX0=