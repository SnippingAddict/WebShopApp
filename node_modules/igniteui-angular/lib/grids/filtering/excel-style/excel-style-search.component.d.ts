import { AfterViewInit, ChangeDetectorRef, TemplateRef } from '@angular/core';
import { IgxColumnComponent } from '../../columns/column.component';
import { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';
import { IgxInputDirective } from '../../../directives/input/input.directive';
import { DisplayDensity } from '../../../core/density';
import { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';
import { FilterListItem } from './grid.excel-style-filtering.component';
import { IgxListComponent } from '../../../list';
import * as ɵngcc0 from '@angular/core';
export declare class IgxExcelStyleLoadingValuesTemplateDirective {
    template: TemplateRef<any>;
    constructor(template: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxExcelStyleLoadingValuesTemplateDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxExcelStyleLoadingValuesTemplateDirective, "[igxExcelStyleLoading]", never, {}, {}, never>;
}
/**
 * @hidden
 */
export declare class IgxExcelStyleSearchComponent implements AfterViewInit {
    cdr: ChangeDetectorRef;
    private _isLoading;
    get isLoading(): boolean;
    set isLoading(value: boolean);
    searchValue: any;
    grid: any;
    data: FilterListItem[];
    inline: boolean;
    column: IgxColumnComponent;
    searchInput: IgxInputDirective;
    list: IgxListComponent;
    displayDensity: DisplayDensity;
    protected virtDir: IgxForOfDirective<any>;
    protected defaultExcelStyleLoadingValuesTemplate: TemplateRef<any>;
    get valuesLoadingTemplate(): any;
    constructor(cdr: ChangeDetectorRef);
    ngAfterViewInit(): void;
    refreshSize(): void;
    clearInput(): void;
    onCheckboxChange(eventArgs: IChangeCheckboxEventArgs): void;
    get itemSize(): string;
    get containerSize(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxExcelStyleSearchComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxExcelStyleSearchComponent, "igx-excel-style-search", never, { "grid": "grid"; "data": "data"; "inline": "inline"; "column": "column"; "displayDensity": "displayDensity"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtc3R5bGUtc2VhcmNoLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJleGNlbC1zdHlsZS1zZWFyY2guY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvbHVtbnMvY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJQ2hhbmdlQ2hlY2tib3hFdmVudEFyZ3MgfSBmcm9tICcuLi8uLi8uLi9jaGVja2JveC9jaGVja2JveC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4SW5wdXREaXJlY3RpdmUgfSBmcm9tICcuLi8uLi8uLi9kaXJlY3RpdmVzL2lucHV0L2lucHV0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEaXNwbGF5RGVuc2l0eSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZGVuc2l0eSc7XG5pbXBvcnQgeyBJZ3hGb3JPZkRpcmVjdGl2ZSB9IGZyb20gJy4uLy4uLy4uL2RpcmVjdGl2ZXMvZm9yLW9mL2Zvcl9vZi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRmlsdGVyTGlzdEl0ZW0gfSBmcm9tICcuL2dyaWQuZXhjZWwtc3R5bGUtZmlsdGVyaW5nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vbGlzdCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hFeGNlbFN0eWxlTG9hZGluZ1ZhbHVlc1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pik7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RXhjZWxTdHlsZVNlYXJjaENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJpdmF0ZSBfaXNMb2FkaW5nO1xuICAgIGdldCBpc0xvYWRpbmcoKTogYm9vbGVhbjtcbiAgICBzZXQgaXNMb2FkaW5nKHZhbHVlOiBib29sZWFuKTtcbiAgICBzZWFyY2hWYWx1ZTogYW55O1xuICAgIGdyaWQ6IGFueTtcbiAgICBkYXRhOiBGaWx0ZXJMaXN0SXRlbVtdO1xuICAgIGlubGluZTogYm9vbGVhbjtcbiAgICBjb2x1bW46IElneENvbHVtbkNvbXBvbmVudDtcbiAgICBzZWFyY2hJbnB1dDogSWd4SW5wdXREaXJlY3RpdmU7XG4gICAgbGlzdDogSWd4TGlzdENvbXBvbmVudDtcbiAgICBkaXNwbGF5RGVuc2l0eTogRGlzcGxheURlbnNpdHk7XG4gICAgcHJvdGVjdGVkIHZpcnREaXI6IElneEZvck9mRGlyZWN0aXZlPGFueT47XG4gICAgcHJvdGVjdGVkIGRlZmF1bHRFeGNlbFN0eWxlTG9hZGluZ1ZhbHVlc1RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGdldCB2YWx1ZXNMb2FkaW5nVGVtcGxhdGUoKTogYW55O1xuICAgIGNvbnN0cnVjdG9yKGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHJlZnJlc2hTaXplKCk6IHZvaWQ7XG4gICAgY2xlYXJJbnB1dCgpOiB2b2lkO1xuICAgIG9uQ2hlY2tib3hDaGFuZ2UoZXZlbnRBcmdzOiBJQ2hhbmdlQ2hlY2tib3hFdmVudEFyZ3MpOiB2b2lkO1xuICAgIGdldCBpdGVtU2l6ZSgpOiBzdHJpbmc7XG4gICAgZ2V0IGNvbnRhaW5lclNpemUoKTogYW55O1xufVxuIl19