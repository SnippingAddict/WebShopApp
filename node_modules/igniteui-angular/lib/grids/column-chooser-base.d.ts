import { ChangeDetectorRef, OnDestroy } from '@angular/core';
import { IFilteringExpression } from '../data-operations/filtering-expression.interface';
import { ColumnDisplayOrder } from './common/enums';
/** @hidden */
import * as ɵngcc0 from '@angular/core';
export declare abstract class ColumnChooserBaseDirective implements OnDestroy {
    cdr: ChangeDetectorRef;
    /**
     * Gets the grid columns that are going to be manipulated.
     * ```typescript
     * let gridColumns = this.columnHidingUI.columns;
     * ```
     */
    get columns(): any[];
    /**
     * Sets the the grid columns that are going to be manipulated.
     * ```html
     * <igx-column-hiding [columns]="grid.columns"></igx-column-hiding>
     * ```
     */
    set columns(value: any[]);
    /**
     * Sets/gets the title of the column chooser.
     * ```typescript
     * let title =  this.columnHidingUI.title;
     * ```
     */
    get title(): string;
    /**
     * ```html
     * <igx-column-hiding [title]="'IgxColumnHidingComponent Title'"></igx-column-hiding>
     * ```
     */
    set title(value: string);
    /**
     * Gets the prompt that is displayed in the filter input.
     * ```typescript
     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;
     * ```
     */
    get filterColumnsPrompt(): string;
    /**
     * Sets the prompt that is going to be displayed in the filter input.
     * ```html
     * <igx-column-hiding [filterColumnsPrompt]="'Type here to search'"></igx-column-hiding>
     * ```
     */
    set filterColumnsPrompt(value: string);
    /**
     * Hides/ shows the filtering columns input from the UI.
     */
    disableFilter: boolean;
    /**
     * Gets the items of the selected columns.
     * ```typescript
     * let columnItems =  this.columnHidingUI.columnItems;
     * ```
     */
    get columnItems(): any[];
    /**
     * Gets the value which filters the columns list.
     * ```typescript
     * let filterCriteria =  this.columnHidingUI.filterCriteria;
     * ```
     */
    get filterCriteria(): string;
    /**
     * Sets the value which filters the columns list.
     * ```html
     *  <igx-column-hiding [filterCriteria]="'ID'"></igx-column-hiding>
     * ```
     */
    set filterCriteria(value: string);
    /**
     * Gets the display order of the columns.
     * ```typescript
     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;
     * ```
     */
    get columnDisplayOrder(): ColumnDisplayOrder;
    /**
     * Sets the display order of the columns.
     * ```typescript
     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;
     * ```
     */
    set columnDisplayOrder(value: ColumnDisplayOrder);
    /**
     * Access to the columnHidingUI:
     * ```typescript
     * @ViewChild('column-hiding-component')
     *  public columnHidingUI: IgxColumnHidingComponent;
     * ```
     * Sets/gets the max height of the column area.
     * ```typescript
     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;
     * ```
     *
     * ```html
     * <igx-column-hiding [columnsAreaMaxHeight]="200px"></igx-column-hiding>
     * ```
     */
    columnsAreaMaxHeight: string;
    /**
     * Sets/Gets the css class selector.
     * By default the value of the `class` attribute is `"igx-column-hiding"`.
     * ```typescript
     * let cssCLass =  this.columnHidingUI.cssClass;
     * ```
     * ```typescript
     * this.columnHidingUI.cssClass = 'column-chooser';
     * ```
     */
    cssClass: string;
    /**
     *@hidden
     */
    private _currentColumns;
    /**
     *@hidden
     */
    private _gridColumns;
    /**
     *@hidden
     */
    private _rawColumns;
    /**
     *@hidden
     */
    private _columnDisplayOrder;
    /**
     *@hidden
     */
    private _filterCriteria;
    /**
     *@hidden
     */
    private _filterColumnsPrompt;
    /**
     *@hidden
     */
    private _title;
    constructor(cdr: ChangeDetectorRef);
    /**
     *@hidden
     */
    ngOnDestroy(): void;
    /**
     *@hidden
     */
    private createColumnItems;
    /**
     *@hidden
     */
    protected abstract createColumnItem(container: any, column: any): any;
    /**
     *@hidden
     */
    private orderColumns;
    /**
     *@hidden
     */
    protected filter(): void;
    /**
     *@hidden
     */
    protected createFilteringExpression(fieldName: string): IFilteringExpression;
    /**
     *@hidden
     */
    protected clearFiltering(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColumnChooserBaseDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ColumnChooserBaseDirective, never, never, { "disableFilter": "disableFilter"; "columnsAreaMaxHeight": "columnsAreaMaxHeight"; "columns": "columns"; "title": "title"; "filterColumnsPrompt": "filterColumnsPrompt"; "columnItems": "columnItems"; "filterCriteria": "filterCriteria"; "columnDisplayOrder": "columnDisplayOrder"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWNob29zZXItYmFzZS5kLnRzIiwic291cmNlcyI6WyJjb2x1bW4tY2hvb3Nlci1iYXNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUZpbHRlcmluZ0V4cHJlc3Npb24gfSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWV4cHJlc3Npb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IENvbHVtbkRpc3BsYXlPcmRlciB9IGZyb20gJy4vY29tbW9uL2VudW1zJztcbi8qKiBAaGlkZGVuICovXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBDb2x1bW5DaG9vc2VyQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBncmlkIGNvbHVtbnMgdGhhdCBhcmUgZ29pbmcgdG8gYmUgbWFuaXB1bGF0ZWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBncmlkQ29sdW1ucyA9IHRoaXMuY29sdW1uSGlkaW5nVUkuY29sdW1ucztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgY29sdW1ucygpOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0aGUgZ3JpZCBjb2x1bW5zIHRoYXQgYXJlIGdvaW5nIHRvIGJlIG1hbmlwdWxhdGVkLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNvbHVtbi1oaWRpbmcgW2NvbHVtbnNdPVwiZ3JpZC5jb2x1bW5zXCI+PC9pZ3gtY29sdW1uLWhpZGluZz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgY29sdW1ucyh2YWx1ZTogYW55W10pO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgdGl0bGUgb2YgdGhlIGNvbHVtbiBjaG9vc2VyLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgdGl0bGUgPSAgdGhpcy5jb2x1bW5IaWRpbmdVSS50aXRsZTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgdGl0bGUoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNvbHVtbi1oaWRpbmcgW3RpdGxlXT1cIidJZ3hDb2x1bW5IaWRpbmdDb21wb25lbnQgVGl0bGUnXCI+PC9pZ3gtY29sdW1uLWhpZGluZz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgdGl0bGUodmFsdWU6IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvbXB0IHRoYXQgaXMgZGlzcGxheWVkIGluIHRoZSBmaWx0ZXIgaW5wdXQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBmaWx0ZXJDb2x1bW5zUHJvbXB0ID0gIHRoaXMuY29sdW1uSGlkaW5nVUkuZmlsdGVyQ29sdW1uc1Byb21wdDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgZmlsdGVyQ29sdW1uc1Byb21wdCgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcHJvbXB0IHRoYXQgaXMgZ29pbmcgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBmaWx0ZXIgaW5wdXQuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWhpZGluZyBbZmlsdGVyQ29sdW1uc1Byb21wdF09XCInVHlwZSBoZXJlIHRvIHNlYXJjaCdcIj48L2lneC1jb2x1bW4taGlkaW5nPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldCBmaWx0ZXJDb2x1bW5zUHJvbXB0KHZhbHVlOiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIEhpZGVzLyBzaG93cyB0aGUgZmlsdGVyaW5nIGNvbHVtbnMgaW5wdXQgZnJvbSB0aGUgVUkuXG4gICAgICovXG4gICAgZGlzYWJsZUZpbHRlcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpdGVtcyBvZiB0aGUgc2VsZWN0ZWQgY29sdW1ucy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGNvbHVtbkl0ZW1zID0gIHRoaXMuY29sdW1uSGlkaW5nVUkuY29sdW1uSXRlbXM7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGNvbHVtbkl0ZW1zKCk6IGFueVtdO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIHdoaWNoIGZpbHRlcnMgdGhlIGNvbHVtbnMgbGlzdC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGZpbHRlckNyaXRlcmlhID0gIHRoaXMuY29sdW1uSGlkaW5nVUkuZmlsdGVyQ3JpdGVyaWE7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGZpbHRlckNyaXRlcmlhKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSB3aGljaCBmaWx0ZXJzIHRoZSBjb2x1bW5zIGxpc3QuXG4gICAgICogYGBgaHRtbFxuICAgICAqICA8aWd4LWNvbHVtbi1oaWRpbmcgW2ZpbHRlckNyaXRlcmlhXT1cIidJRCdcIj48L2lneC1jb2x1bW4taGlkaW5nPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldCBmaWx0ZXJDcml0ZXJpYSh2YWx1ZTogc3RyaW5nKTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkaXNwbGF5IG9yZGVyIG9mIHRoZSBjb2x1bW5zLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgY29sdW1uRGlzcGxheU9yZGVyICA9ICB0aGlzLmNvbHVtbkhpZGluZ1VJLmNvbHVtbkRpc3BsYXlPcmRlcjtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgY29sdW1uRGlzcGxheU9yZGVyKCk6IENvbHVtbkRpc3BsYXlPcmRlcjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkaXNwbGF5IG9yZGVyIG9mIHRoZSBjb2x1bW5zLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmNvbHVtbkhpZGluZ1VJLmNvbHVtbkRpc3BsYXlPcmRlciA9IENvbHVtbkRpc3BsYXlPcmRlci5BbHBoYWJldGljYWw7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0IGNvbHVtbkRpc3BsYXlPcmRlcih2YWx1ZTogQ29sdW1uRGlzcGxheU9yZGVyKTtcbiAgICAvKipcbiAgICAgKiBBY2Nlc3MgdG8gdGhlIGNvbHVtbkhpZGluZ1VJOlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBAVmlld0NoaWxkKCdjb2x1bW4taGlkaW5nLWNvbXBvbmVudCcpXG4gICAgICogIHB1YmxpYyBjb2x1bW5IaWRpbmdVSTogSWd4Q29sdW1uSGlkaW5nQ29tcG9uZW50O1xuICAgICAqIGBgYFxuICAgICAqIFNldHMvZ2V0cyB0aGUgbWF4IGhlaWdodCBvZiB0aGUgY29sdW1uIGFyZWEuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBjb2x1bW5zQXJlYU1heEhlaWdodCA9ICB0aGlzLmNvbHVtbkhpZGluZ1VJLmNvbHVtbnNBcmVhTWF4SGVpZ2h0O1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWhpZGluZyBbY29sdW1uc0FyZWFNYXhIZWlnaHRdPVwiMjAwcHhcIj48L2lneC1jb2x1bW4taGlkaW5nPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNvbHVtbnNBcmVhTWF4SGVpZ2h0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cy9HZXRzIHRoZSBjc3MgY2xhc3Mgc2VsZWN0b3IuXG4gICAgICogQnkgZGVmYXVsdCB0aGUgdmFsdWUgb2YgdGhlIGBjbGFzc2AgYXR0cmlidXRlIGlzIGBcImlneC1jb2x1bW4taGlkaW5nXCJgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgY3NzQ0xhc3MgPSAgdGhpcy5jb2x1bW5IaWRpbmdVSS5jc3NDbGFzcztcbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5jb2x1bW5IaWRpbmdVSS5jc3NDbGFzcyA9ICdjb2x1bW4tY2hvb3Nlcic7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY3NzQ2xhc3M6IHN0cmluZztcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9jdXJyZW50Q29sdW1ucztcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9ncmlkQ29sdW1ucztcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9yYXdDb2x1bW5zO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX2NvbHVtbkRpc3BsYXlPcmRlcjtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9maWx0ZXJDcml0ZXJpYTtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9maWx0ZXJDb2x1bW5zUHJvbXB0O1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX3RpdGxlO1xuICAgIGNvbnN0cnVjdG9yKGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVDb2x1bW5JdGVtcztcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgY3JlYXRlQ29sdW1uSXRlbShjb250YWluZXI6IGFueSwgY29sdW1uOiBhbnkpOiBhbnk7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBvcmRlckNvbHVtbnM7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGZpbHRlcigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjcmVhdGVGaWx0ZXJpbmdFeHByZXNzaW9uKGZpZWxkTmFtZTogc3RyaW5nKTogSUZpbHRlcmluZ0V4cHJlc3Npb247XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNsZWFyRmlsdGVyaW5nKCk6IHZvaWQ7XG59XG4iXX0=