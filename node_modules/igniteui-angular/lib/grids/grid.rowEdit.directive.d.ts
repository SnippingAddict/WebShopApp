import { ElementRef } from '@angular/core';
import { GridBaseAPIService } from './api.service';
import { GridType } from './common/grid.interface';
/** @hidden */
import * as ɵngcc0 from '@angular/core';
export declare class IgxRowEditTemplateDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxRowEditTemplateDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxRowEditTemplateDirective, "[igxRowEdit]", never, {}, {}, never>;
}
/** @hidden */
export declare class IgxRowEditTextDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxRowEditTextDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxRowEditTextDirective, "[igxRowEditText]", never, {}, {}, never>;
}
/** @hidden */
export declare class IgxRowEditActionsDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxRowEditActionsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxRowEditActionsDirective, "[igxRowEditActions]", never, {}, {}, never>;
}
/** @hidden */
export declare class IgxRowEditTabStopDirective {
    api: GridBaseAPIService<any>;
    element: ElementRef;
    private currentCellIndex;
    constructor(api: GridBaseAPIService<any>, element: ElementRef);
    get grid(): GridType;
    handleTab(event: KeyboardEvent): void;
    handleEscape(event: KeyboardEvent): void;
    /**
     * Moves focus to first/last editable cell in the editable row and put the cell in edit mode.
     * If cell is out of view first scrolls to the cell
     * @param event keyboard event containing information about whether SHIFT key was pressed
     */
    private move;
    /**
     * Sets the cell in edit mode and focus its native element
     * @param cellIndex index of the cell to activate
     */
    private activateCell;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxRowEditTabStopDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxRowEditTabStopDirective, "[igxRowEditTabStop]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5yb3dFZGl0LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJncmlkLnJvd0VkaXQuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JpZEJhc2VBUElTZXJ2aWNlIH0gZnJvbSAnLi9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBHcmlkVHlwZSB9IGZyb20gJy4vY29tbW9uL2dyaWQuaW50ZXJmYWNlJztcbi8qKiBAaGlkZGVuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hSb3dFZGl0VGVtcGxhdGVEaXJlY3RpdmUge1xufVxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFJvd0VkaXRUZXh0RGlyZWN0aXZlIHtcbn1cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hSb3dFZGl0QWN0aW9uc0RpcmVjdGl2ZSB7XG59XG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4Um93RWRpdFRhYlN0b3BEaXJlY3RpdmUge1xuICAgIGFwaTogR3JpZEJhc2VBUElTZXJ2aWNlPGFueT47XG4gICAgZWxlbWVudDogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIGN1cnJlbnRDZWxsSW5kZXg7XG4gICAgY29uc3RydWN0b3IoYXBpOiBHcmlkQmFzZUFQSVNlcnZpY2U8YW55PiwgZWxlbWVudDogRWxlbWVudFJlZik7XG4gICAgZ2V0IGdyaWQoKTogR3JpZFR5cGU7XG4gICAgaGFuZGxlVGFiKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBoYW5kbGVFc2NhcGUoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1vdmVzIGZvY3VzIHRvIGZpcnN0L2xhc3QgZWRpdGFibGUgY2VsbCBpbiB0aGUgZWRpdGFibGUgcm93IGFuZCBwdXQgdGhlIGNlbGwgaW4gZWRpdCBtb2RlLlxuICAgICAqIElmIGNlbGwgaXMgb3V0IG9mIHZpZXcgZmlyc3Qgc2Nyb2xscyB0byB0aGUgY2VsbFxuICAgICAqIEBwYXJhbSBldmVudCBrZXlib2FyZCBldmVudCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHdoZXRoZXIgU0hJRlQga2V5IHdhcyBwcmVzc2VkXG4gICAgICovXG4gICAgcHJpdmF0ZSBtb3ZlO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNlbGwgaW4gZWRpdCBtb2RlIGFuZCBmb2N1cyBpdHMgbmF0aXZlIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gY2VsbEluZGV4IGluZGV4IG9mIHRoZSBjZWxsIHRvIGFjdGl2YXRlXG4gICAgICovXG4gICAgcHJpdmF0ZSBhY3RpdmF0ZUNlbGw7XG59XG4iXX0=