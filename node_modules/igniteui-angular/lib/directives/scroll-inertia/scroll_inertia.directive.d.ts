import { ElementRef, NgZone, OnInit, OnDestroy } from '@angular/core';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class IgxScrollInertiaDirective implements OnInit, OnDestroy {
    private element;
    private _zone;
    constructor(element: ElementRef, _zone: NgZone);
    IgxScrollInertiaDirection: string;
    IgxScrollInertiaScrollContainer: any;
    wheelStep: number;
    inertiaStep: number;
    swipeToleranceX: number;
    inertiaDeltaY: number;
    inertiaDeltaX: number;
    inertiaDuration: number;
    private _touchInertiaAnimID;
    private _startX;
    private _startY;
    private _touchStartX;
    private _touchStartY;
    private _lastTouchEnd;
    private _lastTouchX;
    private _lastTouchY;
    private _savedSpeedsX;
    private _savedSpeedsY;
    private _totalMovedX;
    private _offsetRecorded;
    private _offsetDirection;
    private _touchPrevented;
    private _lastMovedX;
    private _lastMovedY;
    private _gestureObject;
    private setPointerCaptureFName;
    private releasePointerCaptureFName;
    private _pointer;
    private _nextX;
    private _nextY;
    private parentElement;
    ngOnInit(): void;
    /**
    * @hidden
    * Function that is called when scrolling with the mouse wheel or using touchpad
    */
    protected onWheel(evt: any): void;
    /**
     * @hidden
     * When there is still room to scroll up/down prevent the parent elements from scrolling too.
     */
    protected preventParentScroll(evt: any, preventDefault: any): void;
    /**
     * @hidden
     * Function that is called the first moment we start interacting with the content on a touch device
     */
    protected onTouchStart(event: any): boolean;
    /**
     * @hidden
     * Function that is called when we need to scroll the content based on touch interactions
     */
    protected onTouchMove(event: any): boolean;
    protected onTouchEnd(event: any): void;
    /**
     * @hidden
     * Function that is called when we need to detect touch starting on a touch device on IE/Edge
     */
    protected onPointerDown(event: any): boolean;
    /**
     * @hidden
     * Function that is called when we need to detect touch ending on a touch device on IE/Edge
     */
    protected onPointerUp(event: any): boolean;
    /**
     * @hidden
     *  Function that is called when a gesture begins on IE/Edge
     */
    protected onMSGestureStart(event: any): boolean;
    /**
     * @hidden
     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge
     */
    protected onMSGestureChange(event: any): boolean;
    private calcAxisCoords;
    private _scrollTo;
    private _scrollToX;
    private _scrollToY;
    protected _inertiaInit(speedX: any, speedY: any): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxScrollInertiaDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxScrollInertiaDirective, "[igxScrollInertia]", never, { "wheelStep": "wheelStep"; "inertiaStep": "inertiaStep"; "swipeToleranceX": "swipeToleranceX"; "inertiaDeltaY": "inertiaDeltaY"; "inertiaDeltaX": "inertiaDeltaX"; "inertiaDuration": "inertiaDuration"; "IgxScrollInertiaDirection": "IgxScrollInertiaDirection"; "IgxScrollInertiaScrollContainer": "IgxScrollInertiaScrollContainer"; }, {}, never>;
}
/**
 * @hidden
 */
export declare class IgxScrollInertiaModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxScrollInertiaModule, [typeof IgxScrollInertiaDirective], [typeof ɵngcc1.CommonModule], [typeof IgxScrollInertiaDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxScrollInertiaModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsX2luZXJ0aWEuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInNjcm9sbF9pbmVydGlhLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE5nWm9uZSwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hTY3JvbGxJbmVydGlhRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBwcml2YXRlIF96b25lO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIF96b25lOiBOZ1pvbmUpO1xuICAgIElneFNjcm9sbEluZXJ0aWFEaXJlY3Rpb246IHN0cmluZztcbiAgICBJZ3hTY3JvbGxJbmVydGlhU2Nyb2xsQ29udGFpbmVyOiBhbnk7XG4gICAgd2hlZWxTdGVwOiBudW1iZXI7XG4gICAgaW5lcnRpYVN0ZXA6IG51bWJlcjtcbiAgICBzd2lwZVRvbGVyYW5jZVg6IG51bWJlcjtcbiAgICBpbmVydGlhRGVsdGFZOiBudW1iZXI7XG4gICAgaW5lcnRpYURlbHRhWDogbnVtYmVyO1xuICAgIGluZXJ0aWFEdXJhdGlvbjogbnVtYmVyO1xuICAgIHByaXZhdGUgX3RvdWNoSW5lcnRpYUFuaW1JRDtcbiAgICBwcml2YXRlIF9zdGFydFg7XG4gICAgcHJpdmF0ZSBfc3RhcnRZO1xuICAgIHByaXZhdGUgX3RvdWNoU3RhcnRYO1xuICAgIHByaXZhdGUgX3RvdWNoU3RhcnRZO1xuICAgIHByaXZhdGUgX2xhc3RUb3VjaEVuZDtcbiAgICBwcml2YXRlIF9sYXN0VG91Y2hYO1xuICAgIHByaXZhdGUgX2xhc3RUb3VjaFk7XG4gICAgcHJpdmF0ZSBfc2F2ZWRTcGVlZHNYO1xuICAgIHByaXZhdGUgX3NhdmVkU3BlZWRzWTtcbiAgICBwcml2YXRlIF90b3RhbE1vdmVkWDtcbiAgICBwcml2YXRlIF9vZmZzZXRSZWNvcmRlZDtcbiAgICBwcml2YXRlIF9vZmZzZXREaXJlY3Rpb247XG4gICAgcHJpdmF0ZSBfdG91Y2hQcmV2ZW50ZWQ7XG4gICAgcHJpdmF0ZSBfbGFzdE1vdmVkWDtcbiAgICBwcml2YXRlIF9sYXN0TW92ZWRZO1xuICAgIHByaXZhdGUgX2dlc3R1cmVPYmplY3Q7XG4gICAgcHJpdmF0ZSBzZXRQb2ludGVyQ2FwdHVyZUZOYW1lO1xuICAgIHByaXZhdGUgcmVsZWFzZVBvaW50ZXJDYXB0dXJlRk5hbWU7XG4gICAgcHJpdmF0ZSBfcG9pbnRlcjtcbiAgICBwcml2YXRlIF9uZXh0WDtcbiAgICBwcml2YXRlIF9uZXh0WTtcbiAgICBwcml2YXRlIHBhcmVudEVsZW1lbnQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAqIEBoaWRkZW5cbiAgICAqIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gc2Nyb2xsaW5nIHdpdGggdGhlIG1vdXNlIHdoZWVsIG9yIHVzaW5nIHRvdWNocGFkXG4gICAgKi9cbiAgICBwcm90ZWN0ZWQgb25XaGVlbChldnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFdoZW4gdGhlcmUgaXMgc3RpbGwgcm9vbSB0byBzY3JvbGwgdXAvZG93biBwcmV2ZW50IHRoZSBwYXJlbnQgZWxlbWVudHMgZnJvbSBzY3JvbGxpbmcgdG9vLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBwcmV2ZW50UGFyZW50U2Nyb2xsKGV2dDogYW55LCBwcmV2ZW50RGVmYXVsdDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgdGhlIGZpcnN0IG1vbWVudCB3ZSBzdGFydCBpbnRlcmFjdGluZyB3aXRoIHRoZSBjb250ZW50IG9uIGEgdG91Y2ggZGV2aWNlXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG9uVG91Y2hTdGFydChldmVudDogYW55KTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB3ZSBuZWVkIHRvIHNjcm9sbCB0aGUgY29udGVudCBiYXNlZCBvbiB0b3VjaCBpbnRlcmFjdGlvbnNcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25Ub3VjaE1vdmUoZXZlbnQ6IGFueSk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIG9uVG91Y2hFbmQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gd2UgbmVlZCB0byBkZXRlY3QgdG91Y2ggc3RhcnRpbmcgb24gYSB0b3VjaCBkZXZpY2Ugb24gSUUvRWRnZVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBvblBvaW50ZXJEb3duKGV2ZW50OiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHdlIG5lZWQgdG8gZGV0ZWN0IHRvdWNoIGVuZGluZyBvbiBhIHRvdWNoIGRldmljZSBvbiBJRS9FZGdlXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG9uUG9pbnRlclVwKGV2ZW50OiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiAgRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiBhIGdlc3R1cmUgYmVnaW5zIG9uIElFL0VkZ2VcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25NU0dlc3R1cmVTdGFydChldmVudDogYW55KTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiBhIHdlIG5lZWQgdG8gc2Nyb2xsIGJhc2VkIG9uIHRoZSBnZXN0dXJlIHBlcmZvcm1lZCBvbiBJRS9FZGdlXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG9uTVNHZXN0dXJlQ2hhbmdlKGV2ZW50OiBhbnkpOiBib29sZWFuO1xuICAgIHByaXZhdGUgY2FsY0F4aXNDb29yZHM7XG4gICAgcHJpdmF0ZSBfc2Nyb2xsVG87XG4gICAgcHJpdmF0ZSBfc2Nyb2xsVG9YO1xuICAgIHByaXZhdGUgX3Njcm9sbFRvWTtcbiAgICBwcm90ZWN0ZWQgX2luZXJ0aWFJbml0KHNwZWVkWDogYW55LCBzcGVlZFk6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hTY3JvbGxJbmVydGlhTW9kdWxlIHtcbn1cbiJdfQ==