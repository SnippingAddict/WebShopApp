import { EmbeddedViewRef, OnChanges, ChangeDetectorRef, SimpleChanges, TemplateRef, ViewContainerRef, NgZone, EventEmitter } from '@angular/core';
import { IBaseEventArgs } from '../../core/utils';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class IgxTemplateOutletDirective implements OnChanges {
    _viewContainerRef: ViewContainerRef;
    private _zone;
    cdr: ChangeDetectorRef;
    private _viewRef;
    /**
    * The embedded views cache. Collection is key-value paired.
    * Key is the template id, value is the embedded view for the related template.
    */
    private _embeddedViewsMap;
    igxTemplateOutletContext: Object;
    igxTemplateOutlet: TemplateRef<any>;
    onViewCreated: EventEmitter<IViewChangeEventArgs>;
    onViewMoved: EventEmitter<IViewChangeEventArgs>;
    onCachedViewLoaded: EventEmitter<ICachedViewLoadedEventArgs>;
    onBeforeViewDetach: EventEmitter<IViewChangeEventArgs>;
    constructor(_viewContainerRef: ViewContainerRef, _zone: NgZone, cdr: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    cleanCache(): void;
    cleanView(tmplID: any): void;
    private _recreateView;
    private _moveView;
    private _useCachedView;
    private _shouldRecreateView;
    private _hasContextShapeChanged;
    private _updateExistingContext;
    private _cloneContext;
    private _getActionType;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTemplateOutletDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxTemplateOutletDirective, "[igxTemplateOutlet]", never, { "igxTemplateOutletContext": "igxTemplateOutletContext"; "igxTemplateOutlet": "igxTemplateOutlet"; }, { "onViewCreated": "onViewCreated"; "onViewMoved": "onViewMoved"; "onCachedViewLoaded": "onCachedViewLoaded"; "onBeforeViewDetach": "onBeforeViewDetach"; }, never>;
}
export interface IViewChangeEventArgs extends IBaseEventArgs {
    owner: IgxTemplateOutletDirective;
    view: EmbeddedViewRef<any>;
    context: any;
}
export interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {
    oldContext: any;
}
/**
 * @hidden
 */
export declare class IgxTemplateOutletModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxTemplateOutletModule, [typeof IgxTemplateOutletDirective], [typeof ɵngcc1.CommonModule], [typeof IgxTemplateOutletDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxTemplateOutletModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVfb3V0bGV0LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJ0ZW1wbGF0ZV9vdXRsZXQuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVtYmVkZGVkVmlld1JlZiwgT25DaGFuZ2VzLCBDaGFuZ2VEZXRlY3RvclJlZiwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIE5nWm9uZSwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQmFzZUV2ZW50QXJncyB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFRlbXBsYXRlT3V0bGV0RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIF96b25lO1xuICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJpdmF0ZSBfdmlld1JlZjtcbiAgICAvKipcbiAgICAqIFRoZSBlbWJlZGRlZCB2aWV3cyBjYWNoZS4gQ29sbGVjdGlvbiBpcyBrZXktdmFsdWUgcGFpcmVkLlxuICAgICogS2V5IGlzIHRoZSB0ZW1wbGF0ZSBpZCwgdmFsdWUgaXMgdGhlIGVtYmVkZGVkIHZpZXcgZm9yIHRoZSByZWxhdGVkIHRlbXBsYXRlLlxuICAgICovXG4gICAgcHJpdmF0ZSBfZW1iZWRkZWRWaWV3c01hcDtcbiAgICBpZ3hUZW1wbGF0ZU91dGxldENvbnRleHQ6IE9iamVjdDtcbiAgICBpZ3hUZW1wbGF0ZU91dGxldDogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBvblZpZXdDcmVhdGVkOiBFdmVudEVtaXR0ZXI8SVZpZXdDaGFuZ2VFdmVudEFyZ3M+O1xuICAgIG9uVmlld01vdmVkOiBFdmVudEVtaXR0ZXI8SVZpZXdDaGFuZ2VFdmVudEFyZ3M+O1xuICAgIG9uQ2FjaGVkVmlld0xvYWRlZDogRXZlbnRFbWl0dGVyPElDYWNoZWRWaWV3TG9hZGVkRXZlbnRBcmdzPjtcbiAgICBvbkJlZm9yZVZpZXdEZXRhY2g6IEV2ZW50RW1pdHRlcjxJVmlld0NoYW5nZUV2ZW50QXJncz47XG4gICAgY29uc3RydWN0b3IoX3ZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIF96b25lOiBOZ1pvbmUsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGNsZWFuQ2FjaGUoKTogdm9pZDtcbiAgICBjbGVhblZpZXcodG1wbElEOiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgX3JlY3JlYXRlVmlldztcbiAgICBwcml2YXRlIF9tb3ZlVmlldztcbiAgICBwcml2YXRlIF91c2VDYWNoZWRWaWV3O1xuICAgIHByaXZhdGUgX3Nob3VsZFJlY3JlYXRlVmlldztcbiAgICBwcml2YXRlIF9oYXNDb250ZXh0U2hhcGVDaGFuZ2VkO1xuICAgIHByaXZhdGUgX3VwZGF0ZUV4aXN0aW5nQ29udGV4dDtcbiAgICBwcml2YXRlIF9jbG9uZUNvbnRleHQ7XG4gICAgcHJpdmF0ZSBfZ2V0QWN0aW9uVHlwZTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSVZpZXdDaGFuZ2VFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgb3duZXI6IElneFRlbXBsYXRlT3V0bGV0RGlyZWN0aXZlO1xuICAgIHZpZXc6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuICAgIGNvbnRleHQ6IGFueTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUNhY2hlZFZpZXdMb2FkZWRFdmVudEFyZ3MgZXh0ZW5kcyBJVmlld0NoYW5nZUV2ZW50QXJncyB7XG4gICAgb2xkQ29udGV4dDogYW55O1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFRlbXBsYXRlT3V0bGV0TW9kdWxlIHtcbn1cbiJdfQ==