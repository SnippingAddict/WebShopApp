import { ElementRef, EventEmitter, OnChanges, PipeTransform, Renderer2, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class IgxFilterOptions {
    inputValue: string;
    key: string;
    items: any[];
    get_value(item: any, key: string): string;
    formatter(valueToTest: string): string;
    matchFn(valueToTest: string, inputValue: string): boolean;
    metConditionFn(item: any): void;
    overdueConditionFn(item: any): void;
}
export declare class IgxFilterDirective implements OnChanges {
    private element;
    filtering: EventEmitter<any>;
    filtered: EventEmitter<any>;
    filterOptions: IgxFilterOptions;
    constructor(element: ElementRef, renderer: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    private filter;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxFilterDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxFilterDirective, "[igxFilter]", never, { "filterOptions": "igxFilter"; }, { "filtering": "filtering"; "filtered": "filtered"; }, never>;
}
export declare class IgxFilterPipe implements PipeTransform {
    transform(items: any[], options: IgxFilterOptions): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxFilterPipe, never>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxFilterPipe, "igxFilter">;
}
/**
 * @hidden
 */
export declare class IgxFilterModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxFilterModule, [typeof IgxFilterDirective, typeof IgxFilterPipe], [typeof ɵngcc1.CommonModule], [typeof IgxFilterDirective, typeof IgxFilterPipe]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxFilterModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJmaWx0ZXIuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBQaXBlVHJhbnNmb3JtLCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEZpbHRlck9wdGlvbnMge1xuICAgIGlucHV0VmFsdWU6IHN0cmluZztcbiAgICBrZXk6IHN0cmluZztcbiAgICBpdGVtczogYW55W107XG4gICAgZ2V0X3ZhbHVlKGl0ZW06IGFueSwga2V5OiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgZm9ybWF0dGVyKHZhbHVlVG9UZXN0OiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgbWF0Y2hGbih2YWx1ZVRvVGVzdDogc3RyaW5nLCBpbnB1dFZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIG1ldENvbmRpdGlvbkZuKGl0ZW06IGFueSk6IHZvaWQ7XG4gICAgb3ZlcmR1ZUNvbmRpdGlvbkZuKGl0ZW06IGFueSk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hGaWx0ZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBmaWx0ZXJpbmc6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGZpbHRlcmVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBmaWx0ZXJPcHRpb25zOiBJZ3hGaWx0ZXJPcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHByaXZhdGUgZmlsdGVyO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHRyYW5zZm9ybShpdGVtczogYW55W10sIG9wdGlvbnM6IElneEZpbHRlck9wdGlvbnMpOiBhbnlbXTtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hGaWx0ZXJNb2R1bGUge1xufVxuIl19