import { EventEmitter, OnDestroy, ElementRef, TemplateRef, ChangeDetectorRef, NgModuleRef, OnInit, AfterViewInit, Injector, AfterViewChecked } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { IgxCalendarComponent, IgxCalendarHeaderTemplateDirective, IgxCalendarSubheaderTemplateDirective, WEEKDAYS } from '../calendar/index';
import { IgxInputGroupComponent } from '../input-group/index';
import { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';
import { OverlaySettings, IgxOverlayService } from '../services/index';
import { DateRangeDescriptor } from '../core/dates/dateRange';
import { EditorProvider } from '../core/edit-provider';
import { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';
import { IDatePicker } from './date-picker.common';
import { CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';
import { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';
import { InteractionMode } from '../core/enums';
/**
 * This interface is used to provide information about date picker reference and its current value
 * when onDisabledDate event is fired.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './calendar-container.component';
import * as ɵngcc2 from './date-picker.directives';
import * as ɵngcc3 from './date-picker.pipes';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '../icon/index';
import * as ɵngcc6 from '../input-group/input-group.component';
import * as ɵngcc7 from '../calendar/calendar.module';
import * as ɵngcc8 from '../directives/button/button.directive';
import * as ɵngcc9 from '../directives/ripple/ripple.directive';
import * as ɵngcc10 from '../directives/mask/mask.directive';
import * as ɵngcc11 from '../directives/text-selection/text-selection.directive';
export interface IDatePickerDisabledDateEventArgs extends IBaseEventArgs {
    datePicker: IgxDatePickerComponent;
    currentValue: Date;
}
/**
 * This interface is used to provide information about date picker reference and its previously valid value
 * when onValidationFailed event is fired.
 */
export interface IDatePickerValidationFailedEventArgs extends IBaseEventArgs {
    datePicker: IgxDatePickerComponent;
    prevValue: Date;
}
/**
 * This interface is used to configure calendar format view options.
 */
export interface IFormatViews {
    day?: boolean;
    month?: boolean;
    year?: boolean;
}
/**
 * This interface is used to configure calendar format options.
 */
export interface IFormatOptions {
    day?: string;
    month?: string;
    weekday?: string;
    year?: string;
}
/**
 * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.
 * 'https://angular.io/api/common/DatePipe'
 * 'shortDate': equivalent to 'M/d/yy' (6/15/15).
 * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).
 * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).
 * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).
 */
export declare enum PredefinedFormatOptions {
    ShortDate = "shortDate",
    MediumDate = "mediumDate",
    LongDate = "longDate",
    FullDate = "fullDate"
}
/**
 * Date Picker displays a popup calendar that lets users select a single date.
 *@igxModule IgxDatePickerModule
 *@igxTheme igx-calendar-theme, igx-icon-theme
 *@igxGroup Scheduling
 *@igxKeywords  datepicker, calendar, schedule, date
 *@example
 * ```html
 * <igx-date-picker [(ngModel)]="selectedDate"></igx-date-picker>
 * ```
 */
export declare class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor, EditorProvider, OnInit, AfterViewInit, OnDestroy, AfterViewChecked {
    private _overlayService;
    element: ElementRef;
    private _cdr;
    private _moduleRef;
    private _injector;
    /**
     * Gets/Sets the `IgxDatePickerComponent` label.
     * @remarks
     * The default label is 'Date'.
     * @example
     * ```html
     * <igx-date-picker [label]="Calendar"></igx-date-picker>
     * ```
     */
    label: string;
    /**
     * Gets/Sets the `IgxDatePickerComponent` label visibility.
     * @remarks
     * By default the visibility is set to true.
     * @example
     * <igx-date-picker [labelVisibility]="false"></igx-date-picker>
     */
    labelVisibility: boolean;
    /**
     *Gets/Sets the locales.
     * @remarks Default locale is en.
     * @example
     *```html
     *<igx-date-picker locale="ja-JP" [value]="date"></igx-date-picker>
     *```
     */
    locale: 'en';
    /**
     *Gets/Sets on which day the week starts.
     @example
     *```html
     *<igx-date-picker [weekStart]="WEEKDAYS.FRIDAY" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     *```
     */
    weekStart: WEEKDAYS | number;
    /**
     *Gets the format options of the `IgxDatePickerComponent`.
     @example
     *```typescript
        let formatOptions = this.datePicker.formatOptions;
     *```
     */
    get formatOptions(): IFormatOptions;
    /**
     * Gets/Sets whether the inactive dates will be hidden.
     * @remarks
     * Apllies to dates that are out of the current month.
     * Default value is `false`.
     * @example
     * ```html
     * <igx-date-picker [hideOutsideDays]="true"></igx-date-picker>
     * ```
     * @example
     * ```typescript
     * let hideOutsideDays = this.datePicker.hideOutsideDays;
     * ```
     */
    hideOutsideDays: boolean;
    /**
     * Gets/Sets the number of month views displayed.
     * @remarks
     * Default value is `1`.
     * @example
     * ```html
     * <igx-date-picker [monthsViewNumber]="2"></igx-date-picker>
     * ```
     * @example
     * ```typescript
     * let monthViewsDisplayed = this.datePicker.monthsViewNumber;
     * ```
     */
    monthsViewNumber: number;
    /**
     *Sets the format options of the `IgxDatePickerComponent`.
     *@example
     *```typescript
     * this.datePicker.formatOptions = {  day: "numeric",  month: "long", weekday: "long", year: "numeric"};
     *```
     */
    set formatOptions(formatOptions: IFormatOptions);
    /**
     *Gets/Sets the date display format of the `IgxDatePickerComponent` in dropdown mode.
     @example
     *```typescript
     * let format = this.datePicker.format;
     * this.datePicker.format = 'yyyy-M-d';
     *```
     */
    get format(): string;
    set format(format: string);
    /**
     *Gets/Sets the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.
     *@example
     *```typescript
     *let mask = this.datePicker.mask;
     *```
     */
    mask: string;
    /**
     *Gets/Sets the format views of the `IgxDatePickerComponent`.
     *@example
     *```typescript
     * let formatViews = this.datePicker.formatViews;
     *  this.datePicker.formatViews = {day:false, month: false, year:false};
     *```
     */
    get formatViews(): IFormatViews;
    set formatViews(formatViews: IFormatViews);
    /**
     * Gets/Sets the disabled dates descriptors.
     * @example
     * ```typescript
     * let disabledDates = this.datepicker.disabledDates;
     * this.datePicker.disabledDates = [ {type: DateRangeType.Weekends}, ...];
     * ```
     */
    get disabledDates(): DateRangeDescriptor[];
    set disabledDates(value: DateRangeDescriptor[]);
    /**
     * Gets/Sets the special dates descriptors.
     * @example
     * ```typescript
     * let specialDates = this.datepicker.specialDates;
     * this.datePicker.specialDates = [ {type: DateRangeType.Weekends}, ... ];
     * ```
     */
    get specialDates(): DateRangeDescriptor[];
    set specialDates(value: DateRangeDescriptor[]);
    /**
    * Gets/Sets the modal overlay settings.
    */
    get modalOverlaySettings(): OverlaySettings;
    set modalOverlaySettings(value: OverlaySettings);
    /**
    * Gets/Sets the drop-down overlay settings.
    */
    get dropDownOverlaySettings(): OverlaySettings;
    set dropDownOverlaySettings(value: OverlaySettings);
    /**
     *Gets the formatted date when `IgxDatePickerComponent` is in dialog mode.
     *@example
     *```typescript
     *let selectedDate = this.datePicker.displayData;
     *```
     */
    get displayData(): string;
    /**
     @hidden @internal
     */
    get transformedDate(): string;
    /**
     @hidden @internal
     */
    set transformedDate(value: string);
    constructor(_overlayService: IgxOverlayService, element: ElementRef, _cdr: ChangeDetectorRef, _moduleRef: NgModuleRef<any>, _injector: Injector);
    /**
     * Gets the input group template.
     * @example
     * ```typescript
     * let template = this.template();
     * ```
     */
    get template(): TemplateRef<any>;
    /**
     * Gets the context passed to the input group template.
     */
    get context(): {
        disabled: boolean;
        disabledDates: DateRangeDescriptor[];
        displayData: string;
        format: string;
        isSpinLoop: boolean;
        label: string;
        labelVisibility: boolean;
        locale: "en";
        mask: string;
        mode: InteractionMode;
        specialDates: DateRangeDescriptor[];
        value: Date;
        openDialog: (target?: HTMLElement) => void;
    };
    private get required();
    /**
     *Gets/Sets the selected date.
     *@example
     *```html
     *<igx-date-picker [value]="date"></igx-date-picker>
     *```
     */
    get value(): Date;
    set value(date: Date);
    /**
     *Gets/Sets the value of `id` attribute.
     *@remarks If not provided it will be automatically generated.
     *@example
     *```html
     *<igx-date-picker [id]="'igx-date-picker-3'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     *```
     */
    id: string;
    /**
     * Gets/Sets a custom formatter function on the selected or passed date.
     * @example
     *```html
     *<igx-date-picker [value]="date" [formatter]="formatter"></igx-date-picker>
     *```
     */
    formatter: (val: Date) => string;
    /**
     *Enables/Disables the `IgxDatePickerComponent`.
     *@example
     *```html
     *<igx-date-picker [disabled]="'true'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     */
    disabled: boolean;
    /**
     *Gets/Sets the orientation of the `IgxDatePickerComponent` header.
     *@example
     *```html
     *<igx-date-picker [vertical]="'true'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     *```
     */
    vertical: boolean;
    /**
     *Gets/Sets the today button's label.
     *@example
     *```html
     *<igx-date-picker cancelButtonLabel="cancel" todayButtonLabel="Tomorrow"></igx-date-picker>
     *```
     */
    todayButtonLabel: string;
    /**
     * *Gets/Sets the cancel button's label.
     * @example
     *```html
     *<igx-date-picker cancelButtonLabel="Close" todayButtonLabel="Today"></igx-date-picker>
     *```
     */
    cancelButtonLabel: string;
    /**
     *Gets/Sets the interaction mode - dialog or drop down.
     *@example
     *```html
     *<igx-date-picker mode="dropdown"></igx-date-picker>
     *```
     */
    mode: InteractionMode;
    /**
     *Gets/Sets whether date should spin continuously or stop when min/max is reached.
     *@example
     *```html
     *<igx-date-picker [isSpinLoop]="false"></igx-date-picker>
     *```
     */
    isSpinLoop: boolean;
    /**
     * Gets/Sets the container used for the popup element.
     * @remarks
     *  `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.
     *@example
     * ```html
     * <div igxOverlayOutlet #outlet="overlay-outlet"></div>
     * //..
     * <igx-date-picker [outlet]="outlet"></igx-date-picker>
     * //..
     * ```
     */
    outlet: IgxOverlayOutletDirective | ElementRef;
    /**
     * @deprecated Use 'onOpened' instead.
     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.
     *@example
     *```typescript
     *public open(event){
     *    alert("The date-picker calendar has been opened!");
     *}
     *```
     *```html
     *<igx-date-picker (onOpen)="open($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     *```
     */
    get onOpen(): EventEmitter<IgxDatePickerComponent>;
    set onOpen(val: EventEmitter<IgxDatePickerComponent>);
    /**
     *Emitted when the `IgxDatePickerComponent` calendar is opened.
    */
    onOpened: EventEmitter<IgxDatePickerComponent>;
    /**
     * @deprecated Use 'onClosed' instead.
     *"An event that is emitted when the `IgxDatePickerComponent` is closed.
     *@example
     *```typescript
     *public close(event){
     *    alert("The date-picker has been closed!");
     *}
     *```
     *```html
     *<igx-date-picker (onClose)="close($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     *```
     */
    get onClose(): EventEmitter<IgxDatePickerComponent>;
    set onClose(val: EventEmitter<IgxDatePickerComponent>);
    /**
     *Emitted after the `IgxDatePickerComponent` is closed.
    */
    onClosed: EventEmitter<IgxDatePickerComponent>;
    /**
     *Emitted when the `IgxDatePickerComponent` is being closed.
     */
    onClosing: EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>;
    /**
     *Emitted when selection is made in the calendar.
     *@example
     *```html
     *<igx-date-picker (onSelection)="selection($event)"></igx-date-picker>
     *```
     */
    onSelection: EventEmitter<Date>;
    /**
     *Emitted when date picker value is changed.
     *@example
    *```html
    *<igx-date-picker (valueChange)="valueChanged($event)" mode="dropdown"></igx-date-picker>
    *```
    */
    valueChange: EventEmitter<Date>;
    /**
    *Emitted when the user types/spins to a disabled date in the date-picker editor.
    *@example
    *```html
    *<igx-date-picker (onDisabledDate)="onDisabledDate($event)"></igx-date-picker>
    *```
    */
    onDisabledDate: EventEmitter<IDatePickerDisabledDateEventArgs>;
    /**
    *Emitted when the user types/spins invalid date in the date-picker editor.
    *@example
    *```html
    *<igx-date-picker (onValidationFailed)="onValidationFailed($event)"></igx-date-picker>
    *```
    */
    onValidationFailed: EventEmitter<IDatePickerValidationFailedEventArgs>;
    protected readOnlyDatePickerTemplate: TemplateRef<any>;
    protected editableDatePickerTemplate: TemplateRef<any>;
    protected inputGroup: IgxInputGroupComponent;
    private _inputElementRef;
    protected _inputUserTemplateElementRef: ElementRef;
    private _inputDirective;
    private _inputDirectiveUserTemplate;
    /**
     *@hidden
     */
    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;
    /**
     *@hidden
     */
    headerTemplate: IgxCalendarHeaderTemplateDirective;
    /**
     *@hidden
     */
    subheaderTemplate: IgxCalendarSubheaderTemplateDirective;
    /**
     *@hidden
     */
    datePickerActionsDirective: IgxDatePickerActionsDirective;
    /**@hidden @internal*/
    calendar: IgxCalendarComponent;
    /**@hidden @internal*/
    hasHeader: boolean;
    /**@hidden @internal*/
    collapsed: boolean;
    /**@hidden @internal*/
    displayValuePipe: DatePickerDisplayValuePipe;
    /**@hidden @internal*/
    inputValuePipe: DatePickerInputValuePipe;
    /**@hidden @internal*/
    dateFormatParts: any[];
    /**@hidden @internal*/
    rawDateString: string;
    /**@hidden @internal*/
    inputMask: string;
    /**@hidden @internal*/
    isEmpty: boolean;
    /**@hidden @internal*/
    invalidDate: string;
    private readonly spinDelta;
    private readonly defaultLocale;
    private _formatOptions;
    private _formatViews;
    private _destroy$;
    private _statusChanges$;
    private _componentID;
    private _format;
    private _value;
    private _isInEditMode;
    private _disabledDates;
    private _specialDates;
    private _modalOverlay;
    private _dropDownOverlaySettings;
    private _positionSettings;
    private _defaultDropDownOverlaySettings;
    private _modalOverlaySettings;
    private _transformedDate;
    private _onOpen;
    private _onClose;
    private _ngControl;
    private _onChangeCallback;
    private _onTouchedCallback;
    /** @hidden @internal */
    writeValue(value: Date): void;
    /** @hidden @internal */
    registerOnChange(fn: (_: Date) => void): void;
    /** @hidden @internal */
    registerOnTouched(fn: () => void): void;
    /** @hidden @internal */
    setDisabledState(isDisabled: boolean): void;
    /**
    * @hidden
    */
    onSpaceClick(event: KeyboardEvent): void;
    /** @hidden */
    getEditElement(): any;
    /**
     *@hidden @internal
     */
    getInputGroupElement(): any;
    /**
     *@hidden @internal
     */
    ngOnInit(): void;
    /**
     *@hidden @internal
    */
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    protected onStatusChanged(): void;
    /**
     *@hidden @internal
    */
    ngOnDestroy(): void;
    /**
     *Selects today's date from calendar.
     *@remarks
     *Changes the input field value, @calendar.viewDate and @calendar.value.
     *@example
     *```typescript
     *this.datePicker.triggerTodaySelection();
     *```
     */
    triggerTodaySelection(): void;
    /**
     * Change the calendar selection.
     * @remarks
     * Calling this method will emit the @calendar.onSelection event,
     * which will fire @handleSelection method.
     * @example
     *```typescript
     *this.datePicker.selectDate(this.date);
     * ```
     * @param date passed date that has to be set to the calendar.
     */
    selectDate(date: Date): void;
    /**
     * Deselects the calendar date.
     * @example
     *```typescript
     *this.datePicker.deselectDate();
     * ```
     */
    deselectDate(): void;
    /**
     * Opens the date picker drop down or dialog.
     * @param target HTMLElement - the target element to use for positioning the drop down container according to
     * @example
     * ```typescript
     * this.datePicker.openDialog(target);
     * ```
     */
    openDialog(target?: HTMLElement): void;
    mouseDown(e: any): void;
    /**
     * Close the calendar.
     *
     * @hidden @internal
     */
    closeCalendar(): void;
    /**
     * Clear the input field, date picker value and calendar selection.
     *
     * @hidden @internal
     */
    clear(): void;
    /**
     * Evaluates when @calendar.onSelection event was fired
     * and update the input value.
     *
     * @param event selected value from calendar.
     *
     * @hidden @internal
     */
    handleSelection(date: Date): void;
    /**
    * @hidden @internal
    */
    onBlur(event: any): void;
    /**
    * @hidden @internal
    */
    onFocus(): void;
    /**
    * @hidden @internal
    */
    onKeyDown(event: any): void;
    /**
    * @hidden @internal
    */
    onWheel(event: any): void;
    /**
    * @hidden @internal
    */
    onInput(event: any): void;
    private emitValueChangeEvent;
    private calculateDate;
    private spinValue;
    private _onOpening;
    private _onOpened;
    private _onClosed;
    private _initializeCalendarContainer;
    private _focusCalendarDate;
    private _setLocaleToDate;
    private _getCursorPosition;
    private _setCursorPosition;
    /**
     * Apply custom user formatter upon date.
     * @param formatter custom formatter function.
     * @param date passed date
     */
    private _customFormatChecker;
    private _getDisplayDate;
    private _getEditorDate;
    _updateValidityOnBlur(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxDatePickerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxDatePickerComponent, "igx-date-picker", never, { "label": "label"; "labelVisibility": "labelVisibility"; "weekStart": "weekStart"; "monthsViewNumber": "monthsViewNumber"; "id": "id"; "vertical": "vertical"; "mode": "mode"; "isSpinLoop": "isSpinLoop"; "formatOptions": "formatOptions"; "format": "format"; "formatViews": "formatViews"; "disabledDates": "disabledDates"; "specialDates": "specialDates"; "modalOverlaySettings": "modalOverlaySettings"; "dropDownOverlaySettings": "dropDownOverlaySettings"; "value": "value"; "disabled": "disabled"; "mask": "mask"; "locale": "locale"; "hideOutsideDays": "hideOutsideDays"; "formatter": "formatter"; "todayButtonLabel": "todayButtonLabel"; "cancelButtonLabel": "cancelButtonLabel"; "outlet": "outlet"; }, { "onOpened": "onOpened"; "onClosed": "onClosed"; "onClosing": "onClosing"; "onSelection": "onSelection"; "valueChange": "valueChange"; "onDisabledDate": "onDisabledDate"; "onValidationFailed": "onValidationFailed"; "onOpen": "onOpen"; "onClose": "onClose"; }, ["_inputUserTemplateElementRef", "_inputDirectiveUserTemplate", "datePickerTemplateDirective", "headerTemplate", "subheaderTemplate", "datePickerActionsDirective"], never>;
}
/**
 * @hidden
 */
export declare class IgxDatePickerModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxDatePickerModule, [typeof IgxDatePickerComponent, typeof ɵngcc1.IgxCalendarContainerComponent, typeof ɵngcc2.IgxDatePickerActionsDirective, typeof ɵngcc2.IgxDatePickerTemplateDirective, typeof ɵngcc3.DatePickerDisplayValuePipe, typeof ɵngcc3.DatePickerInputValuePipe], [typeof ɵngcc4.CommonModule, typeof ɵngcc5.IgxIconModule, typeof ɵngcc6.IgxInputGroupModule, typeof ɵngcc7.IgxCalendarModule, typeof ɵngcc8.IgxButtonModule, typeof ɵngcc9.IgxRippleModule, typeof ɵngcc10.IgxMaskModule, typeof ɵngcc11.IgxTextSelectionModule], [typeof IgxDatePickerComponent, typeof ɵngcc2.IgxDatePickerTemplateDirective, typeof ɵngcc2.IgxDatePickerActionsDirective, typeof ɵngcc3.DatePickerDisplayValuePipe, typeof ɵngcc3.DatePickerInputValuePipe]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxDatePickerModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImRhdGUtcGlja2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBFbGVtZW50UmVmLCBUZW1wbGF0ZVJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nTW9kdWxlUmVmLCBPbkluaXQsIEFmdGVyVmlld0luaXQsIEluamVjdG9yLCBBZnRlclZpZXdDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IElneENhbGVuZGFyQ29tcG9uZW50LCBJZ3hDYWxlbmRhckhlYWRlclRlbXBsYXRlRGlyZWN0aXZlLCBJZ3hDYWxlbmRhclN1YmhlYWRlclRlbXBsYXRlRGlyZWN0aXZlLCBXRUVLREFZUyB9IGZyb20gJy4uL2NhbGVuZGFyL2luZGV4JztcbmltcG9ydCB7IElneElucHV0R3JvdXBDb21wb25lbnQgfSBmcm9tICcuLi9pbnB1dC1ncm91cC9pbmRleCc7XG5pbXBvcnQgeyBJZ3hPdmVybGF5T3V0bGV0RGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy90b2dnbGUvdG9nZ2xlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBPdmVybGF5U2V0dGluZ3MsIElneE92ZXJsYXlTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvaW5kZXgnO1xuaW1wb3J0IHsgRGF0ZVJhbmdlRGVzY3JpcHRvciB9IGZyb20gJy4uL2NvcmUvZGF0ZXMvZGF0ZVJhbmdlJztcbmltcG9ydCB7IEVkaXRvclByb3ZpZGVyIH0gZnJvbSAnLi4vY29yZS9lZGl0LXByb3ZpZGVyJztcbmltcG9ydCB7IERhdGVQaWNrZXJEaXNwbGF5VmFsdWVQaXBlLCBEYXRlUGlja2VySW5wdXRWYWx1ZVBpcGUgfSBmcm9tICcuL2RhdGUtcGlja2VyLnBpcGVzJztcbmltcG9ydCB7IElEYXRlUGlja2VyIH0gZnJvbSAnLi9kYXRlLXBpY2tlci5jb21tb24nO1xuaW1wb3J0IHsgQ2FuY2VsYWJsZUJyb3dzZXJFdmVudEFyZ3MsIElCYXNlRXZlbnRBcmdzIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5pbXBvcnQgeyBJZ3hEYXRlUGlja2VyVGVtcGxhdGVEaXJlY3RpdmUsIElneERhdGVQaWNrZXJBY3Rpb25zRGlyZWN0aXZlIH0gZnJvbSAnLi9kYXRlLXBpY2tlci5kaXJlY3RpdmVzJztcbmltcG9ydCB7IEludGVyYWN0aW9uTW9kZSB9IGZyb20gJy4uL2NvcmUvZW51bXMnO1xuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBpcyB1c2VkIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgZGF0ZSBwaWNrZXIgcmVmZXJlbmNlIGFuZCBpdHMgY3VycmVudCB2YWx1ZVxuICogd2hlbiBvbkRpc2FibGVkRGF0ZSBldmVudCBpcyBmaXJlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGF0ZVBpY2tlckRpc2FibGVkRGF0ZUV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICBkYXRlUGlja2VyOiBJZ3hEYXRlUGlja2VyQ29tcG9uZW50O1xuICAgIGN1cnJlbnRWYWx1ZTogRGF0ZTtcbn1cbi8qKlxuICogVGhpcyBpbnRlcmZhY2UgaXMgdXNlZCB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IGRhdGUgcGlja2VyIHJlZmVyZW5jZSBhbmQgaXRzIHByZXZpb3VzbHkgdmFsaWQgdmFsdWVcbiAqIHdoZW4gb25WYWxpZGF0aW9uRmFpbGVkIGV2ZW50IGlzIGZpcmVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElEYXRlUGlja2VyVmFsaWRhdGlvbkZhaWxlZEV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICBkYXRlUGlja2VyOiBJZ3hEYXRlUGlja2VyQ29tcG9uZW50O1xuICAgIHByZXZWYWx1ZTogRGF0ZTtcbn1cbi8qKlxuICogVGhpcyBpbnRlcmZhY2UgaXMgdXNlZCB0byBjb25maWd1cmUgY2FsZW5kYXIgZm9ybWF0IHZpZXcgb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRm9ybWF0Vmlld3Mge1xuICAgIGRheT86IGJvb2xlYW47XG4gICAgbW9udGg/OiBib29sZWFuO1xuICAgIHllYXI/OiBib29sZWFuO1xufVxuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBpcyB1c2VkIHRvIGNvbmZpZ3VyZSBjYWxlbmRhciBmb3JtYXQgb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRm9ybWF0T3B0aW9ucyB7XG4gICAgZGF5Pzogc3RyaW5nO1xuICAgIG1vbnRoPzogc3RyaW5nO1xuICAgIHdlZWtkYXk/OiBzdHJpbmc7XG4gICAgeWVhcj86IHN0cmluZztcbn1cbi8qKlxuICogVGhpcyBlbnVtZXJhdGlvbiBpcyB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgZGF0ZSBwaWNrZXIgdG8gb3BlcmF0ZSB3aXRoIHByZS1kZWZpbmVkIGZvcm1hdCBvcHRpb24gdXNlZCBpbiBBbmd1bGFyIERhdGVQaXBlLlxuICogJ2h0dHBzOi8vYW5ndWxhci5pby9hcGkvY29tbW9uL0RhdGVQaXBlJ1xuICogJ3Nob3J0RGF0ZSc6IGVxdWl2YWxlbnQgdG8gJ00vZC95eScgKDYvMTUvMTUpLlxuICogJ21lZGl1bURhdGUnOiBlcXVpdmFsZW50IHRvICdNTU0gZCwgeScgKEp1biAxNSwgMjAxNSkuXG4gKiAnbG9uZ0RhdGUnOiBlcXVpdmFsZW50IHRvICdNTU1NIGQsIHknIChKdW5lIDE1LCAyMDE1KS5cbiAqICdmdWxsRGF0ZSc6IGVxdWl2YWxlbnQgdG8gJ0VFRUUsIE1NTU0gZCwgeScgKE1vbmRheSwgSnVuZSAxNSwgMjAxNSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGVudW0gUHJlZGVmaW5lZEZvcm1hdE9wdGlvbnMge1xuICAgIFNob3J0RGF0ZSA9IFwic2hvcnREYXRlXCIsXG4gICAgTWVkaXVtRGF0ZSA9IFwibWVkaXVtRGF0ZVwiLFxuICAgIExvbmdEYXRlID0gXCJsb25nRGF0ZVwiLFxuICAgIEZ1bGxEYXRlID0gXCJmdWxsRGF0ZVwiXG59XG4vKipcbiAqIERhdGUgUGlja2VyIGRpc3BsYXlzIGEgcG9wdXAgY2FsZW5kYXIgdGhhdCBsZXRzIHVzZXJzIHNlbGVjdCBhIHNpbmdsZSBkYXRlLlxuICpAaWd4TW9kdWxlIElneERhdGVQaWNrZXJNb2R1bGVcbiAqQGlneFRoZW1lIGlneC1jYWxlbmRhci10aGVtZSwgaWd4LWljb24tdGhlbWVcbiAqQGlneEdyb3VwIFNjaGVkdWxpbmdcbiAqQGlneEtleXdvcmRzICBkYXRlcGlja2VyLCBjYWxlbmRhciwgc2NoZWR1bGUsIGRhdGVcbiAqQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtZGF0ZS1waWNrZXIgWyhuZ01vZGVsKV09XCJzZWxlY3RlZERhdGVcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hEYXRlUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgSURhdGVQaWNrZXIsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBFZGl0b3JQcm92aWRlciwgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0NoZWNrZWQge1xuICAgIHByaXZhdGUgX292ZXJsYXlTZXJ2aWNlO1xuICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBfY2RyO1xuICAgIHByaXZhdGUgX21vZHVsZVJlZjtcbiAgICBwcml2YXRlIF9pbmplY3RvcjtcbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YCBsYWJlbC5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoZSBkZWZhdWx0IGxhYmVsIGlzICdEYXRlJy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWRhdGUtcGlja2VyIFtsYWJlbF09XCJDYWxlbmRhclwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHRoZSBgSWd4RGF0ZVBpY2tlckNvbXBvbmVudGAgbGFiZWwgdmlzaWJpbGl0eS5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIEJ5IGRlZmF1bHQgdGhlIHZpc2liaWxpdHkgaXMgc2V0IHRvIHRydWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8aWd4LWRhdGUtcGlja2VyIFtsYWJlbFZpc2liaWxpdHldPVwiZmFsc2VcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKi9cbiAgICBsYWJlbFZpc2liaWxpdHk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICpHZXRzL1NldHMgdGhlIGxvY2FsZXMuXG4gICAgICogQHJlbWFya3MgRGVmYXVsdCBsb2NhbGUgaXMgZW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKmBgYGh0bWxcbiAgICAgKjxpZ3gtZGF0ZS1waWNrZXIgbG9jYWxlPVwiamEtSlBcIiBbdmFsdWVdPVwiZGF0ZVwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqYGBgXG4gICAgICovXG4gICAgbG9jYWxlOiAnZW4nO1xuICAgIC8qKlxuICAgICAqR2V0cy9TZXRzIG9uIHdoaWNoIGRheSB0aGUgd2VlayBzdGFydHMuXG4gICAgIEBleGFtcGxlXG4gICAgICpgYGBodG1sXG4gICAgICo8aWd4LWRhdGUtcGlja2VyIFt3ZWVrU3RhcnRdPVwiV0VFS0RBWVMuRlJJREFZXCIgY2FuY2VsQnV0dG9uTGFiZWw9XCJjYW5jZWxcIiB0b2RheUJ1dHRvbkxhYmVsPVwidG9kYXlcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIHdlZWtTdGFydDogV0VFS0RBWVMgfCBudW1iZXI7XG4gICAgLyoqXG4gICAgICpHZXRzIHRoZSBmb3JtYXQgb3B0aW9ucyBvZiB0aGUgYElneERhdGVQaWNrZXJDb21wb25lbnRgLlxuICAgICBAZXhhbXBsZVxuICAgICAqYGBgdHlwZXNjcmlwdFxuICAgICAgICBsZXQgZm9ybWF0T3B0aW9ucyA9IHRoaXMuZGF0ZVBpY2tlci5mb3JtYXRPcHRpb25zO1xuICAgICAqYGBgXG4gICAgICovXG4gICAgZ2V0IGZvcm1hdE9wdGlvbnMoKTogSUZvcm1hdE9wdGlvbnM7XG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHdoZXRoZXIgdGhlIGluYWN0aXZlIGRhdGVzIHdpbGwgYmUgaGlkZGVuLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogQXBsbGllcyB0byBkYXRlcyB0aGF0IGFyZSBvdXQgb2YgdGhlIGN1cnJlbnQgbW9udGguXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZGF0ZS1waWNrZXIgW2hpZGVPdXRzaWRlRGF5c109XCJ0cnVlXCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogYGBgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGhpZGVPdXRzaWRlRGF5cyA9IHRoaXMuZGF0ZVBpY2tlci5oaWRlT3V0c2lkZURheXM7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgaGlkZU91dHNpZGVEYXlzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgbnVtYmVyIG9mIG1vbnRoIHZpZXdzIGRpc3BsYXllZC5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYDFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZGF0ZS1waWNrZXIgW21vbnRoc1ZpZXdOdW1iZXJdPVwiMlwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqIGBgYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBtb250aFZpZXdzRGlzcGxheWVkID0gdGhpcy5kYXRlUGlja2VyLm1vbnRoc1ZpZXdOdW1iZXI7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgbW9udGhzVmlld051bWJlcjogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqU2V0cyB0aGUgZm9ybWF0IG9wdGlvbnMgb2YgdGhlIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YC5cbiAgICAgKkBleGFtcGxlXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5kYXRlUGlja2VyLmZvcm1hdE9wdGlvbnMgPSB7ICBkYXk6IFwibnVtZXJpY1wiLCAgbW9udGg6IFwibG9uZ1wiLCB3ZWVrZGF5OiBcImxvbmdcIiwgeWVhcjogXCJudW1lcmljXCJ9O1xuICAgICAqYGBgXG4gICAgICovXG4gICAgc2V0IGZvcm1hdE9wdGlvbnMoZm9ybWF0T3B0aW9uczogSUZvcm1hdE9wdGlvbnMpO1xuICAgIC8qKlxuICAgICAqR2V0cy9TZXRzIHRoZSBkYXRlIGRpc3BsYXkgZm9ybWF0IG9mIHRoZSBgSWd4RGF0ZVBpY2tlckNvbXBvbmVudGAgaW4gZHJvcGRvd24gbW9kZS5cbiAgICAgQGV4YW1wbGVcbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZm9ybWF0ID0gdGhpcy5kYXRlUGlja2VyLmZvcm1hdDtcbiAgICAgKiB0aGlzLmRhdGVQaWNrZXIuZm9ybWF0ID0gJ3l5eXktTS1kJztcbiAgICAgKmBgYFxuICAgICAqL1xuICAgIGdldCBmb3JtYXQoKTogc3RyaW5nO1xuICAgIHNldCBmb3JtYXQoZm9ybWF0OiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqR2V0cy9TZXRzIHRoZSBkYXRlIG1hc2sgb2YgdGhlIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YCB3aGVuIGluIGVkaXRhYmxlIGRyb3Bkb3duIG1vZGUuXG4gICAgICpAZXhhbXBsZVxuICAgICAqYGBgdHlwZXNjcmlwdFxuICAgICAqbGV0IG1hc2sgPSB0aGlzLmRhdGVQaWNrZXIubWFzaztcbiAgICAgKmBgYFxuICAgICAqL1xuICAgIG1hc2s6IHN0cmluZztcbiAgICAvKipcbiAgICAgKkdldHMvU2V0cyB0aGUgZm9ybWF0IHZpZXdzIG9mIHRoZSBgSWd4RGF0ZVBpY2tlckNvbXBvbmVudGAuXG4gICAgICpAZXhhbXBsZVxuICAgICAqYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBmb3JtYXRWaWV3cyA9IHRoaXMuZGF0ZVBpY2tlci5mb3JtYXRWaWV3cztcbiAgICAgKiAgdGhpcy5kYXRlUGlja2VyLmZvcm1hdFZpZXdzID0ge2RheTpmYWxzZSwgbW9udGg6IGZhbHNlLCB5ZWFyOmZhbHNlfTtcbiAgICAgKmBgYFxuICAgICAqL1xuICAgIGdldCBmb3JtYXRWaWV3cygpOiBJRm9ybWF0Vmlld3M7XG4gICAgc2V0IGZvcm1hdFZpZXdzKGZvcm1hdFZpZXdzOiBJRm9ybWF0Vmlld3MpO1xuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgZGlzYWJsZWQgZGF0ZXMgZGVzY3JpcHRvcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGRpc2FibGVkRGF0ZXMgPSB0aGlzLmRhdGVwaWNrZXIuZGlzYWJsZWREYXRlcztcbiAgICAgKiB0aGlzLmRhdGVQaWNrZXIuZGlzYWJsZWREYXRlcyA9IFsge3R5cGU6IERhdGVSYW5nZVR5cGUuV2Vla2VuZHN9LCAuLi5dO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBkaXNhYmxlZERhdGVzKCk6IERhdGVSYW5nZURlc2NyaXB0b3JbXTtcbiAgICBzZXQgZGlzYWJsZWREYXRlcyh2YWx1ZTogRGF0ZVJhbmdlRGVzY3JpcHRvcltdKTtcbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIHNwZWNpYWwgZGF0ZXMgZGVzY3JpcHRvcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHNwZWNpYWxEYXRlcyA9IHRoaXMuZGF0ZXBpY2tlci5zcGVjaWFsRGF0ZXM7XG4gICAgICogdGhpcy5kYXRlUGlja2VyLnNwZWNpYWxEYXRlcyA9IFsge3R5cGU6IERhdGVSYW5nZVR5cGUuV2Vla2VuZHN9LCAuLi4gXTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgc3BlY2lhbERhdGVzKCk6IERhdGVSYW5nZURlc2NyaXB0b3JbXTtcbiAgICBzZXQgc3BlY2lhbERhdGVzKHZhbHVlOiBEYXRlUmFuZ2VEZXNjcmlwdG9yW10pO1xuICAgIC8qKlxuICAgICogR2V0cy9TZXRzIHRoZSBtb2RhbCBvdmVybGF5IHNldHRpbmdzLlxuICAgICovXG4gICAgZ2V0IG1vZGFsT3ZlcmxheVNldHRpbmdzKCk6IE92ZXJsYXlTZXR0aW5ncztcbiAgICBzZXQgbW9kYWxPdmVybGF5U2V0dGluZ3ModmFsdWU6IE92ZXJsYXlTZXR0aW5ncyk7XG4gICAgLyoqXG4gICAgKiBHZXRzL1NldHMgdGhlIGRyb3AtZG93biBvdmVybGF5IHNldHRpbmdzLlxuICAgICovXG4gICAgZ2V0IGRyb3BEb3duT3ZlcmxheVNldHRpbmdzKCk6IE92ZXJsYXlTZXR0aW5ncztcbiAgICBzZXQgZHJvcERvd25PdmVybGF5U2V0dGluZ3ModmFsdWU6IE92ZXJsYXlTZXR0aW5ncyk7XG4gICAgLyoqXG4gICAgICpHZXRzIHRoZSBmb3JtYXR0ZWQgZGF0ZSB3aGVuIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YCBpcyBpbiBkaWFsb2cgbW9kZS5cbiAgICAgKkBleGFtcGxlXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICpsZXQgc2VsZWN0ZWREYXRlID0gdGhpcy5kYXRlUGlja2VyLmRpc3BsYXlEYXRhO1xuICAgICAqYGBgXG4gICAgICovXG4gICAgZ2V0IGRpc3BsYXlEYXRhKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgdHJhbnNmb3JtZWREYXRlKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzZXQgdHJhbnNmb3JtZWREYXRlKHZhbHVlOiBzdHJpbmcpO1xuICAgIGNvbnN0cnVjdG9yKF9vdmVybGF5U2VydmljZTogSWd4T3ZlcmxheVNlcnZpY2UsIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIF9jZHI6IENoYW5nZURldGVjdG9yUmVmLCBfbW9kdWxlUmVmOiBOZ01vZHVsZVJlZjxhbnk+LCBfaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbnB1dCBncm91cCB0ZW1wbGF0ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IHRlbXBsYXRlKCk6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY29udGV4dCBwYXNzZWQgdG8gdGhlIGlucHV0IGdyb3VwIHRlbXBsYXRlLlxuICAgICAqL1xuICAgIGdldCBjb250ZXh0KCk6IHtcbiAgICAgICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgICAgIGRpc2FibGVkRGF0ZXM6IERhdGVSYW5nZURlc2NyaXB0b3JbXTtcbiAgICAgICAgZGlzcGxheURhdGE6IHN0cmluZztcbiAgICAgICAgZm9ybWF0OiBzdHJpbmc7XG4gICAgICAgIGlzU3Bpbkxvb3A6IGJvb2xlYW47XG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgICAgIGxhYmVsVmlzaWJpbGl0eTogYm9vbGVhbjtcbiAgICAgICAgbG9jYWxlOiBcImVuXCI7XG4gICAgICAgIG1hc2s6IHN0cmluZztcbiAgICAgICAgbW9kZTogSW50ZXJhY3Rpb25Nb2RlO1xuICAgICAgICBzcGVjaWFsRGF0ZXM6IERhdGVSYW5nZURlc2NyaXB0b3JbXTtcbiAgICAgICAgdmFsdWU6IERhdGU7XG4gICAgICAgIG9wZW5EaWFsb2c6ICh0YXJnZXQ/OiBIVE1MRWxlbWVudCkgPT4gdm9pZDtcbiAgICB9O1xuICAgIHByaXZhdGUgZ2V0IHJlcXVpcmVkKCk7XG4gICAgLyoqXG4gICAgICpHZXRzL1NldHMgdGhlIHNlbGVjdGVkIGRhdGUuXG4gICAgICpAZXhhbXBsZVxuICAgICAqYGBgaHRtbFxuICAgICAqPGlneC1kYXRlLXBpY2tlciBbdmFsdWVdPVwiZGF0ZVwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqYGBgXG4gICAgICovXG4gICAgZ2V0IHZhbHVlKCk6IERhdGU7XG4gICAgc2V0IHZhbHVlKGRhdGU6IERhdGUpO1xuICAgIC8qKlxuICAgICAqR2V0cy9TZXRzIHRoZSB2YWx1ZSBvZiBgaWRgIGF0dHJpYnV0ZS5cbiAgICAgKkByZW1hcmtzIElmIG5vdCBwcm92aWRlZCBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkLlxuICAgICAqQGV4YW1wbGVcbiAgICAgKmBgYGh0bWxcbiAgICAgKjxpZ3gtZGF0ZS1waWNrZXIgW2lkXT1cIidpZ3gtZGF0ZS1waWNrZXItMydcIiBjYW5jZWxCdXR0b25MYWJlbD1cImNhbmNlbFwiIHRvZGF5QnV0dG9uTGFiZWw9XCJ0b2RheVwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqYGBgXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgYSBjdXN0b20gZm9ybWF0dGVyIGZ1bmN0aW9uIG9uIHRoZSBzZWxlY3RlZCBvciBwYXNzZWQgZGF0ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqYGBgaHRtbFxuICAgICAqPGlneC1kYXRlLXBpY2tlciBbdmFsdWVdPVwiZGF0ZVwiIFtmb3JtYXR0ZXJdPVwiZm9ybWF0dGVyXCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBmb3JtYXR0ZXI6ICh2YWw6IERhdGUpID0+IHN0cmluZztcbiAgICAvKipcbiAgICAgKkVuYWJsZXMvRGlzYWJsZXMgdGhlIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YC5cbiAgICAgKkBleGFtcGxlXG4gICAgICpgYGBodG1sXG4gICAgICo8aWd4LWRhdGUtcGlja2VyIFtkaXNhYmxlZF09XCIndHJ1ZSdcIiBjYW5jZWxCdXR0b25MYWJlbD1cImNhbmNlbFwiIHRvZGF5QnV0dG9uTGFiZWw9XCJ0b2RheVwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqR2V0cy9TZXRzIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgYElneERhdGVQaWNrZXJDb21wb25lbnRgIGhlYWRlci5cbiAgICAgKkBleGFtcGxlXG4gICAgICpgYGBodG1sXG4gICAgICo8aWd4LWRhdGUtcGlja2VyIFt2ZXJ0aWNhbF09XCIndHJ1ZSdcIiBjYW5jZWxCdXR0b25MYWJlbD1cImNhbmNlbFwiIHRvZGF5QnV0dG9uTGFiZWw9XCJ0b2RheVwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqYGBgXG4gICAgICovXG4gICAgdmVydGljYWw6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICpHZXRzL1NldHMgdGhlIHRvZGF5IGJ1dHRvbidzIGxhYmVsLlxuICAgICAqQGV4YW1wbGVcbiAgICAgKmBgYGh0bWxcbiAgICAgKjxpZ3gtZGF0ZS1waWNrZXIgY2FuY2VsQnV0dG9uTGFiZWw9XCJjYW5jZWxcIiB0b2RheUJ1dHRvbkxhYmVsPVwiVG9tb3Jyb3dcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIHRvZGF5QnV0dG9uTGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiAqR2V0cy9TZXRzIHRoZSBjYW5jZWwgYnV0dG9uJ3MgbGFiZWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKmBgYGh0bWxcbiAgICAgKjxpZ3gtZGF0ZS1waWNrZXIgY2FuY2VsQnV0dG9uTGFiZWw9XCJDbG9zZVwiIHRvZGF5QnV0dG9uTGFiZWw9XCJUb2RheVwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqYGBgXG4gICAgICovXG4gICAgY2FuY2VsQnV0dG9uTGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKkdldHMvU2V0cyB0aGUgaW50ZXJhY3Rpb24gbW9kZSAtIGRpYWxvZyBvciBkcm9wIGRvd24uXG4gICAgICpAZXhhbXBsZVxuICAgICAqYGBgaHRtbFxuICAgICAqPGlneC1kYXRlLXBpY2tlciBtb2RlPVwiZHJvcGRvd25cIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIG1vZGU6IEludGVyYWN0aW9uTW9kZTtcbiAgICAvKipcbiAgICAgKkdldHMvU2V0cyB3aGV0aGVyIGRhdGUgc2hvdWxkIHNwaW4gY29udGludW91c2x5IG9yIHN0b3Agd2hlbiBtaW4vbWF4IGlzIHJlYWNoZWQuXG4gICAgICpAZXhhbXBsZVxuICAgICAqYGBgaHRtbFxuICAgICAqPGlneC1kYXRlLXBpY2tlciBbaXNTcGluTG9vcF09XCJmYWxzZVwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICAqYGBgXG4gICAgICovXG4gICAgaXNTcGluTG9vcDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIGNvbnRhaW5lciB1c2VkIGZvciB0aGUgcG9wdXAgZWxlbWVudC5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqICBgb3V0bGV0YCBpcyBhbiBpbnN0YW5jZSBvZiBgSWd4T3ZlcmxheU91dGxldERpcmVjdGl2ZWAgb3IgYW4gYEVsZW1lbnRSZWZgLlxuICAgICAqQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGRpdiBpZ3hPdmVybGF5T3V0bGV0ICNvdXRsZXQ9XCJvdmVybGF5LW91dGxldFwiPjwvZGl2PlxuICAgICAqIC8vLi5cbiAgICAgKiA8aWd4LWRhdGUtcGlja2VyIFtvdXRsZXRdPVwib3V0bGV0XCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICogLy8uLlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG91dGxldDogSWd4T3ZlcmxheU91dGxldERpcmVjdGl2ZSB8IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlICdvbk9wZW5lZCcgaW5zdGVhZC5cbiAgICAgKkFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHRoZSBgSWd4RGF0ZVBpY2tlckNvbXBvbmVudGAgY2FsZW5kYXIgaXMgb3BlbmVkLlxuICAgICAqQGV4YW1wbGVcbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKnB1YmxpYyBvcGVuKGV2ZW50KXtcbiAgICAgKiAgICBhbGVydChcIlRoZSBkYXRlLXBpY2tlciBjYWxlbmRhciBoYXMgYmVlbiBvcGVuZWQhXCIpO1xuICAgICAqfVxuICAgICAqYGBgXG4gICAgICpgYGBodG1sXG4gICAgICo8aWd4LWRhdGUtcGlja2VyIChvbk9wZW4pPVwib3BlbigkZXZlbnQpXCIgY2FuY2VsQnV0dG9uTGFiZWw9XCJjYW5jZWxcIiB0b2RheUJ1dHRvbkxhYmVsPVwidG9kYXlcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIGdldCBvbk9wZW4oKTogRXZlbnRFbWl0dGVyPElneERhdGVQaWNrZXJDb21wb25lbnQ+O1xuICAgIHNldCBvbk9wZW4odmFsOiBFdmVudEVtaXR0ZXI8SWd4RGF0ZVBpY2tlckNvbXBvbmVudD4pO1xuICAgIC8qKlxuICAgICAqRW1pdHRlZCB3aGVuIHRoZSBgSWd4RGF0ZVBpY2tlckNvbXBvbmVudGAgY2FsZW5kYXIgaXMgb3BlbmVkLlxuICAgICovXG4gICAgb25PcGVuZWQ6IEV2ZW50RW1pdHRlcjxJZ3hEYXRlUGlja2VyQ29tcG9uZW50PjtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgJ29uQ2xvc2VkJyBpbnN0ZWFkLlxuICAgICAqXCJBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB0aGUgYElneERhdGVQaWNrZXJDb21wb25lbnRgIGlzIGNsb3NlZC5cbiAgICAgKkBleGFtcGxlXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICpwdWJsaWMgY2xvc2UoZXZlbnQpe1xuICAgICAqICAgIGFsZXJ0KFwiVGhlIGRhdGUtcGlja2VyIGhhcyBiZWVuIGNsb3NlZCFcIik7XG4gICAgICp9XG4gICAgICpgYGBcbiAgICAgKmBgYGh0bWxcbiAgICAgKjxpZ3gtZGF0ZS1waWNrZXIgKG9uQ2xvc2UpPVwiY2xvc2UoJGV2ZW50KVwiIGNhbmNlbEJ1dHRvbkxhYmVsPVwiY2FuY2VsXCIgdG9kYXlCdXR0b25MYWJlbD1cInRvZGF5XCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBnZXQgb25DbG9zZSgpOiBFdmVudEVtaXR0ZXI8SWd4RGF0ZVBpY2tlckNvbXBvbmVudD47XG4gICAgc2V0IG9uQ2xvc2UodmFsOiBFdmVudEVtaXR0ZXI8SWd4RGF0ZVBpY2tlckNvbXBvbmVudD4pO1xuICAgIC8qKlxuICAgICAqRW1pdHRlZCBhZnRlciB0aGUgYElneERhdGVQaWNrZXJDb21wb25lbnRgIGlzIGNsb3NlZC5cbiAgICAqL1xuICAgIG9uQ2xvc2VkOiBFdmVudEVtaXR0ZXI8SWd4RGF0ZVBpY2tlckNvbXBvbmVudD47XG4gICAgLyoqXG4gICAgICpFbWl0dGVkIHdoZW4gdGhlIGBJZ3hEYXRlUGlja2VyQ29tcG9uZW50YCBpcyBiZWluZyBjbG9zZWQuXG4gICAgICovXG4gICAgb25DbG9zaW5nOiBFdmVudEVtaXR0ZXI8Q2FuY2VsYWJsZUJyb3dzZXJFdmVudEFyZ3MgJiBJQmFzZUV2ZW50QXJncz47XG4gICAgLyoqXG4gICAgICpFbWl0dGVkIHdoZW4gc2VsZWN0aW9uIGlzIG1hZGUgaW4gdGhlIGNhbGVuZGFyLlxuICAgICAqQGV4YW1wbGVcbiAgICAgKmBgYGh0bWxcbiAgICAgKjxpZ3gtZGF0ZS1waWNrZXIgKG9uU2VsZWN0aW9uKT1cInNlbGVjdGlvbigkZXZlbnQpXCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBvblNlbGVjdGlvbjogRXZlbnRFbWl0dGVyPERhdGU+O1xuICAgIC8qKlxuICAgICAqRW1pdHRlZCB3aGVuIGRhdGUgcGlja2VyIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAgICpAZXhhbXBsZVxuICAgICpgYGBodG1sXG4gICAgKjxpZ3gtZGF0ZS1waWNrZXIgKHZhbHVlQ2hhbmdlKT1cInZhbHVlQ2hhbmdlZCgkZXZlbnQpXCIgbW9kZT1cImRyb3Bkb3duXCI+PC9pZ3gtZGF0ZS1waWNrZXI+XG4gICAgKmBgYFxuICAgICovXG4gICAgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICAvKipcbiAgICAqRW1pdHRlZCB3aGVuIHRoZSB1c2VyIHR5cGVzL3NwaW5zIHRvIGEgZGlzYWJsZWQgZGF0ZSBpbiB0aGUgZGF0ZS1waWNrZXIgZWRpdG9yLlxuICAgICpAZXhhbXBsZVxuICAgICpgYGBodG1sXG4gICAgKjxpZ3gtZGF0ZS1waWNrZXIgKG9uRGlzYWJsZWREYXRlKT1cIm9uRGlzYWJsZWREYXRlKCRldmVudClcIj48L2lneC1kYXRlLXBpY2tlcj5cbiAgICAqYGBgXG4gICAgKi9cbiAgICBvbkRpc2FibGVkRGF0ZTogRXZlbnRFbWl0dGVyPElEYXRlUGlja2VyRGlzYWJsZWREYXRlRXZlbnRBcmdzPjtcbiAgICAvKipcbiAgICAqRW1pdHRlZCB3aGVuIHRoZSB1c2VyIHR5cGVzL3NwaW5zIGludmFsaWQgZGF0ZSBpbiB0aGUgZGF0ZS1waWNrZXIgZWRpdG9yLlxuICAgICpAZXhhbXBsZVxuICAgICpgYGBodG1sXG4gICAgKjxpZ3gtZGF0ZS1waWNrZXIgKG9uVmFsaWRhdGlvbkZhaWxlZCk9XCJvblZhbGlkYXRpb25GYWlsZWQoJGV2ZW50KVwiPjwvaWd4LWRhdGUtcGlja2VyPlxuICAgICpgYGBcbiAgICAqL1xuICAgIG9uVmFsaWRhdGlvbkZhaWxlZDogRXZlbnRFbWl0dGVyPElEYXRlUGlja2VyVmFsaWRhdGlvbkZhaWxlZEV2ZW50QXJncz47XG4gICAgcHJvdGVjdGVkIHJlYWRPbmx5RGF0ZVBpY2tlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHByb3RlY3RlZCBlZGl0YWJsZURhdGVQaWNrZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwcm90ZWN0ZWQgaW5wdXRHcm91cDogSWd4SW5wdXRHcm91cENvbXBvbmVudDtcbiAgICBwcml2YXRlIF9pbnB1dEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIF9pbnB1dFVzZXJUZW1wbGF0ZUVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBfaW5wdXREaXJlY3RpdmU7XG4gICAgcHJpdmF0ZSBfaW5wdXREaXJlY3RpdmVVc2VyVGVtcGxhdGU7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGRhdGVQaWNrZXJUZW1wbGF0ZURpcmVjdGl2ZTogSWd4RGF0ZVBpY2tlclRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIGhlYWRlclRlbXBsYXRlOiBJZ3hDYWxlbmRhckhlYWRlclRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHN1YmhlYWRlclRlbXBsYXRlOiBJZ3hDYWxlbmRhclN1YmhlYWRlclRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIGRhdGVQaWNrZXJBY3Rpb25zRGlyZWN0aXZlOiBJZ3hEYXRlUGlja2VyQWN0aW9uc0RpcmVjdGl2ZTtcbiAgICAvKipAaGlkZGVuIEBpbnRlcm5hbCovXG4gICAgY2FsZW5kYXI6IElneENhbGVuZGFyQ29tcG9uZW50O1xuICAgIC8qKkBoaWRkZW4gQGludGVybmFsKi9cbiAgICBoYXNIZWFkZXI6IGJvb2xlYW47XG4gICAgLyoqQGhpZGRlbiBAaW50ZXJuYWwqL1xuICAgIGNvbGxhcHNlZDogYm9vbGVhbjtcbiAgICAvKipAaGlkZGVuIEBpbnRlcm5hbCovXG4gICAgZGlzcGxheVZhbHVlUGlwZTogRGF0ZVBpY2tlckRpc3BsYXlWYWx1ZVBpcGU7XG4gICAgLyoqQGhpZGRlbiBAaW50ZXJuYWwqL1xuICAgIGlucHV0VmFsdWVQaXBlOiBEYXRlUGlja2VySW5wdXRWYWx1ZVBpcGU7XG4gICAgLyoqQGhpZGRlbiBAaW50ZXJuYWwqL1xuICAgIGRhdGVGb3JtYXRQYXJ0czogYW55W107XG4gICAgLyoqQGhpZGRlbiBAaW50ZXJuYWwqL1xuICAgIHJhd0RhdGVTdHJpbmc6IHN0cmluZztcbiAgICAvKipAaGlkZGVuIEBpbnRlcm5hbCovXG4gICAgaW5wdXRNYXNrOiBzdHJpbmc7XG4gICAgLyoqQGhpZGRlbiBAaW50ZXJuYWwqL1xuICAgIGlzRW1wdHk6IGJvb2xlYW47XG4gICAgLyoqQGhpZGRlbiBAaW50ZXJuYWwqL1xuICAgIGludmFsaWREYXRlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzcGluRGVsdGE7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkZWZhdWx0TG9jYWxlO1xuICAgIHByaXZhdGUgX2Zvcm1hdE9wdGlvbnM7XG4gICAgcHJpdmF0ZSBfZm9ybWF0Vmlld3M7XG4gICAgcHJpdmF0ZSBfZGVzdHJveSQ7XG4gICAgcHJpdmF0ZSBfc3RhdHVzQ2hhbmdlcyQ7XG4gICAgcHJpdmF0ZSBfY29tcG9uZW50SUQ7XG4gICAgcHJpdmF0ZSBfZm9ybWF0O1xuICAgIHByaXZhdGUgX3ZhbHVlO1xuICAgIHByaXZhdGUgX2lzSW5FZGl0TW9kZTtcbiAgICBwcml2YXRlIF9kaXNhYmxlZERhdGVzO1xuICAgIHByaXZhdGUgX3NwZWNpYWxEYXRlcztcbiAgICBwcml2YXRlIF9tb2RhbE92ZXJsYXk7XG4gICAgcHJpdmF0ZSBfZHJvcERvd25PdmVybGF5U2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBfcG9zaXRpb25TZXR0aW5ncztcbiAgICBwcml2YXRlIF9kZWZhdWx0RHJvcERvd25PdmVybGF5U2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBfbW9kYWxPdmVybGF5U2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBfdHJhbnNmb3JtZWREYXRlO1xuICAgIHByaXZhdGUgX29uT3BlbjtcbiAgICBwcml2YXRlIF9vbkNsb3NlO1xuICAgIHByaXZhdGUgX25nQ29udHJvbDtcbiAgICBwcml2YXRlIF9vbkNoYW5nZUNhbGxiYWNrO1xuICAgIHByaXZhdGUgX29uVG91Y2hlZENhbGxiYWNrO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IERhdGUpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBEYXRlKSA9PiB2b2lkKTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAqIEBoaWRkZW5cbiAgICAqL1xuICAgIG9uU3BhY2VDbGljayhldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBnZXRFZGl0RWxlbWVudCgpOiBhbnk7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldElucHV0R3JvdXBFbGVtZW50KCk6IGFueTtcbiAgICAvKipcbiAgICAgKkBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKkBoaWRkZW4gQGludGVybmFsXG4gICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgb25TdGF0dXNDaGFuZ2VkKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuIEBpbnRlcm5hbFxuICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKlNlbGVjdHMgdG9kYXkncyBkYXRlIGZyb20gY2FsZW5kYXIuXG4gICAgICpAcmVtYXJrc1xuICAgICAqQ2hhbmdlcyB0aGUgaW5wdXQgZmllbGQgdmFsdWUsIEBjYWxlbmRhci52aWV3RGF0ZSBhbmQgQGNhbGVuZGFyLnZhbHVlLlxuICAgICAqQGV4YW1wbGVcbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKnRoaXMuZGF0ZVBpY2tlci50cmlnZ2VyVG9kYXlTZWxlY3Rpb24oKTtcbiAgICAgKmBgYFxuICAgICAqL1xuICAgIHRyaWdnZXJUb2RheVNlbGVjdGlvbigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgY2FsZW5kYXIgc2VsZWN0aW9uLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogQ2FsbGluZyB0aGlzIG1ldGhvZCB3aWxsIGVtaXQgdGhlIEBjYWxlbmRhci5vblNlbGVjdGlvbiBldmVudCxcbiAgICAgKiB3aGljaCB3aWxsIGZpcmUgQGhhbmRsZVNlbGVjdGlvbiBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKnRoaXMuZGF0ZVBpY2tlci5zZWxlY3REYXRlKHRoaXMuZGF0ZSk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGRhdGUgcGFzc2VkIGRhdGUgdGhhdCBoYXMgdG8gYmUgc2V0IHRvIHRoZSBjYWxlbmRhci5cbiAgICAgKi9cbiAgICBzZWxlY3REYXRlKGRhdGU6IERhdGUpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIERlc2VsZWN0cyB0aGUgY2FsZW5kYXIgZGF0ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqYGBgdHlwZXNjcmlwdFxuICAgICAqdGhpcy5kYXRlUGlja2VyLmRlc2VsZWN0RGF0ZSgpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGRlc2VsZWN0RGF0ZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBkYXRlIHBpY2tlciBkcm9wIGRvd24gb3IgZGlhbG9nLlxuICAgICAqIEBwYXJhbSB0YXJnZXQgSFRNTEVsZW1lbnQgLSB0aGUgdGFyZ2V0IGVsZW1lbnQgdG8gdXNlIGZvciBwb3NpdGlvbmluZyB0aGUgZHJvcCBkb3duIGNvbnRhaW5lciBhY2NvcmRpbmcgdG9cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmRhdGVQaWNrZXIub3BlbkRpYWxvZyh0YXJnZXQpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9wZW5EaWFsb2codGFyZ2V0PzogSFRNTEVsZW1lbnQpOiB2b2lkO1xuICAgIG1vdXNlRG93bihlOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENsb3NlIHRoZSBjYWxlbmRhci5cbiAgICAgKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgY2xvc2VDYWxlbmRhcigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBpbnB1dCBmaWVsZCwgZGF0ZSBwaWNrZXIgdmFsdWUgYW5kIGNhbGVuZGFyIHNlbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgY2xlYXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFdmFsdWF0ZXMgd2hlbiBAY2FsZW5kYXIub25TZWxlY3Rpb24gZXZlbnQgd2FzIGZpcmVkXG4gICAgICogYW5kIHVwZGF0ZSB0aGUgaW5wdXQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgc2VsZWN0ZWQgdmFsdWUgZnJvbSBjYWxlbmRhci5cbiAgICAgKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgaGFuZGxlU2VsZWN0aW9uKGRhdGU6IERhdGUpOiB2b2lkO1xuICAgIC8qKlxuICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAqL1xuICAgIG9uQmx1cihldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgKi9cbiAgICBvbkZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICovXG4gICAgb25LZXlEb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAqL1xuICAgIG9uV2hlZWwoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICovXG4gICAgb25JbnB1dChldmVudDogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIGVtaXRWYWx1ZUNoYW5nZUV2ZW50O1xuICAgIHByaXZhdGUgY2FsY3VsYXRlRGF0ZTtcbiAgICBwcml2YXRlIHNwaW5WYWx1ZTtcbiAgICBwcml2YXRlIF9vbk9wZW5pbmc7XG4gICAgcHJpdmF0ZSBfb25PcGVuZWQ7XG4gICAgcHJpdmF0ZSBfb25DbG9zZWQ7XG4gICAgcHJpdmF0ZSBfaW5pdGlhbGl6ZUNhbGVuZGFyQ29udGFpbmVyO1xuICAgIHByaXZhdGUgX2ZvY3VzQ2FsZW5kYXJEYXRlO1xuICAgIHByaXZhdGUgX3NldExvY2FsZVRvRGF0ZTtcbiAgICBwcml2YXRlIF9nZXRDdXJzb3JQb3NpdGlvbjtcbiAgICBwcml2YXRlIF9zZXRDdXJzb3JQb3NpdGlvbjtcbiAgICAvKipcbiAgICAgKiBBcHBseSBjdXN0b20gdXNlciBmb3JtYXR0ZXIgdXBvbiBkYXRlLlxuICAgICAqIEBwYXJhbSBmb3JtYXR0ZXIgY3VzdG9tIGZvcm1hdHRlciBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gZGF0ZSBwYXNzZWQgZGF0ZVxuICAgICAqL1xuICAgIHByaXZhdGUgX2N1c3RvbUZvcm1hdENoZWNrZXI7XG4gICAgcHJpdmF0ZSBfZ2V0RGlzcGxheURhdGU7XG4gICAgcHJpdmF0ZSBfZ2V0RWRpdG9yRGF0ZTtcbiAgICBfdXBkYXRlVmFsaWRpdHlPbkJsdXIoKTogdm9pZDtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hEYXRlUGlja2VyTW9kdWxlIHtcbn1cbiJdfQ==