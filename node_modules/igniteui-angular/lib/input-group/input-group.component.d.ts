import { ElementRef, QueryList } from '@angular/core';
import { IgxHintDirective } from '../directives/hint/hint.directive';
import { IgxInputDirective } from '../directives/input/input.directive';
import { IDisplayDensityOptions, DisplayDensityBase } from '../core/displayDensity';
import { IgxInputGroupBase } from './input-group.common';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../directives/hint/hint.directive';
import * as ɵngcc2 from '../directives/input/input.directive';
import * as ɵngcc3 from '../directives/label/label.directive';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '../directives/prefix/prefix.directive';
import * as ɵngcc6 from '../directives/suffix/suffix.directive';
export declare class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {
    private _element;
    private _displayDensityOptions;
    private _type;
    private _filled;
    private _supressInputAutofocus;
    /**
     * An ElementRef property of the `IgxInputGroupComponent`.
     */
    element: ElementRef;
    /**
     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
     * ```html
     * <igx-input-group [id]="'igx-input-group-55'"></igx-input-group>
     * ```
     */
    id: string;
    /**
     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.
     * By default applied the class is applied.
     *```typescript
     *@ViewChild("MyInputGroup")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *this.inputGroup.defaultClass = false;
     *```
     *}
     */
    defaultClass: boolean;
    /**
     * @hidden
     */
    hasPlaceholder: boolean;
    /**
     * @hidden
     */
    isRequired: boolean;
    /**
     * @hidden
     */
    isFocused: boolean;
    /**
     * @hidden
     */
    isBox: boolean;
    /**
     * @hidden
     */
    isBorder: boolean;
    /**
     * @hidden
     */
    isSearch: boolean;
    /**
     * @hidden
     */
    isFluentSearch: boolean;
    /**
     * @hidden
     */
    isFluent: boolean;
    /**
     * @hidden
     */
    isBootstrap: boolean;
    /**
     * An @Input property that disables the `IgxInputGroupComponent`.
     * ```html
     * <igx-input-group [disabled]="'true'"></igx-input-group>
     * ```
     */
    disabled: boolean;
    /**
     * @hidden
     */
    get validClass(): boolean;
    /**
     * @hidden
     */
    get invalidClass(): boolean;
    /**
     * @hidden
     */
    hasWarning: boolean;
    /**
     * @hidden
     */
    protected hints: QueryList<IgxHintDirective>;
    /**
     * @hidden
     */
    protected input: IgxInputDirective;
    /**
     *@hidden
     */
    onClick(event: any): void;
    /**
     * An @Input property that sets how the input will be styled.
     * The allowed values are `line`, `box`, `border`, `fluent`, `search` and `fluentSearch`. The default is `line`.
     * ```html
     *<igx-input-group [type]="'search'">
     * ```
     */
    set type(value: string);
    /**
     * Returns whether the input element of the input group will be automatically focused on click.
     * ```typescript
     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;
     * ```
     */
    get supressInputAutofocus(): boolean;
    /**
     * Sets whether the input element of the input group will be automatically focused on click.
     * ```html
     * <igx-input-group [supressInputAutofocus]="true"></igx-input-group>
     * ```
     */
    set supressInputAutofocus(value: boolean);
    /**
     *@hidden
     */
    get isFilled(): any;
    /**
     *@hidden
     */
    get isDisplayDensityCosy(): boolean;
    /**
     *@hidden
     */
    get isDisplayDensityComfortable(): boolean;
    /**
     *@hidden
     */
    get isDisplayDensityCompact(): boolean;
    /**
     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.
     * Values are `line` - 0, `box` - 1, `border` - 2,  `fluent` - 3 `fluentSearch` - 4 and `search` - 5. The default is `line`.
     * ```typescript
     *@ViewChild("MyInputGroup")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let inputType = this.inputGroup.type;
     *}
     * ```
     */
    get type(): string;
    constructor(_element: ElementRef, _displayDensityOptions: IDisplayDensityOptions);
    /**
     * Returns whether the `IgxInputGroupComponent` has hints.
     * ```typescript
     *@ViewChild("MyInputGroup")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let inputHints = this.inputGroup.hasHints;
     *}
     * ```
     */
    get hasHints(): boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` has border.
     * ```typescript
     *@ViewChild("MyInputGroup")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let inputBroder = this.inputGroup.hasBorder;
     *}
     * ```
     */
    get hasBorder(): boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is line.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeLine = this.inputGroup.isTypeLine;
     *}
     * ```
     */
    get isTypeLine(): boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is box.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeBox = this.inputGroup.isTypeBox;
     *}
     *```
     */
    get isTypeBox(): boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is border.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeBorder = this.inputGroup.isTypeBorder;
     *}
     * ```
     */
    get isTypeBorder(): boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is Fluent.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeFluent = this.inputGroup.isTypeFluent;
     *}
     * ```
     */
    get isTypeFluent(): boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is Bootstrap.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeBootstrap = this.inputGroup.isTypeBootstrap;
     *}
     * ```
     */
    get isTypeBootstrap(): boolean;
    get isNotMaterial(): boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is search.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeSearch = this.inputGroup.isTypeSearch;
     *}
     * ```
     */
    get isTypeSearch(): boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is fluentSearch.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeFluentSearch = this.inputGroup.isTypeFluentSearch;
     *}
     * ```
     */
    get isTypeFluentSearch(): boolean;
    get filled(): boolean;
    set filled(val: boolean);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxInputGroupComponent, [null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxInputGroupComponent, "igx-input-group", never, { "id": "id"; "disabled": "disabled"; "type": "type"; "supressInputAutofocus": "supressInputAutofocus"; }, {}, ["input", "hints"], ["igx-hint,[igxHint]", "[igxLabel]", "[igxInput]", "igx-prefix,[igxPrefix]", "igx-suffix,[igxSuffix]"]>;
}
/**
 * @hidden
 */
export declare class IgxInputGroupModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxInputGroupModule, [typeof IgxInputGroupComponent, typeof ɵngcc1.IgxHintDirective, typeof ɵngcc2.IgxInputDirective, typeof ɵngcc3.IgxLabelDirective], [typeof ɵngcc4.CommonModule, typeof ɵngcc5.IgxPrefixModule, typeof ɵngcc6.IgxSuffixModule], [typeof IgxInputGroupComponent, typeof ɵngcc1.IgxHintDirective, typeof ɵngcc2.IgxInputDirective, typeof ɵngcc3.IgxLabelDirective, typeof ɵngcc5.IgxPrefixModule, typeof ɵngcc6.IgxSuffixModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxInputGroupModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,