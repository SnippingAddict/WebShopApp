import { ElementRef, EventEmitter, OnInit, OnDestroy, TemplateRef } from '@angular/core';
import { SliderHandle } from '../slider.common';
import { Subject } from 'rxjs';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxSliderThumbComponent implements OnInit, OnDestroy {
    private _elementRef;
    private _isActive;
    private _isPressed;
    private _destroy$;
    private get thumbPositionX();
    isActive: boolean;
    value: number;
    continuous: boolean;
    thumbLabelVisibilityDuration: any;
    disabled: boolean;
    onPan: Subject<number>;
    stepDistance: number;
    step: number;
    templateRef: TemplateRef<any>;
    context: any;
    type: SliderHandle;
    deactiveState: boolean;
    onThumbValueChange: EventEmitter<number>;
    onChange: EventEmitter<any>;
    onHoverChange: EventEmitter<boolean>;
    tabindex: number;
    zIndex: number;
    get thumbFromClass(): boolean;
    get thumbToClass(): boolean;
    get thumbFromActiveClass(): boolean;
    get thumbToActiveClass(): boolean;
    get thumbPressedClass(): boolean;
    get nativeElement(): any;
    get destroy(): Subject<boolean>;
    constructor(_elementRef: ElementRef);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    onPinterEnter(): void;
    onPointerLeave(): void;
    onKeyDown(event: KeyboardEvent): void;
    onBlur(): void;
    onFocusListener(): void;
    /**
     * Show thumb label and ripple.
     */
    showThumbIndicators(): void;
    /**
     * Hide thumb label and ripple.
     */
    hideThumbIndicators(): void;
    private updateThumbValue;
    private calculateTrackUpdate;
    private stepToProceed;
    private toggleThumbIndicators;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSliderThumbComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxSliderThumbComponent, "igx-thumb", never, { "value": "value"; "continuous": "continuous"; "thumbLabelVisibilityDuration": "thumbLabelVisibilityDuration"; "disabled": "disabled"; "onPan": "onPan"; "stepDistance": "stepDistance"; "step": "step"; "templateRef": "templateRef"; "context": "context"; "type": "type"; "deactiveState": "deactiveState"; }, { "onThumbValueChange": "onThumbValueChange"; "onChange": "onChange"; "onHoverChange": "onHoverChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWItc2xpZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0aHVtYi1zbGlkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIE9uRGVzdHJveSwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNsaWRlckhhbmRsZSB9IGZyb20gJy4uL3NsaWRlci5jb21tb24nO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFNsaWRlclRodW1iQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX2VsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBfaXNBY3RpdmU7XG4gICAgcHJpdmF0ZSBfaXNQcmVzc2VkO1xuICAgIHByaXZhdGUgX2Rlc3Ryb3kkO1xuICAgIHByaXZhdGUgZ2V0IHRodW1iUG9zaXRpb25YKCk7XG4gICAgaXNBY3RpdmU6IGJvb2xlYW47XG4gICAgdmFsdWU6IG51bWJlcjtcbiAgICBjb250aW51b3VzOiBib29sZWFuO1xuICAgIHRodW1iTGFiZWxWaXNpYmlsaXR5RHVyYXRpb246IGFueTtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBvblBhbjogU3ViamVjdDxudW1iZXI+O1xuICAgIHN0ZXBEaXN0YW5jZTogbnVtYmVyO1xuICAgIHN0ZXA6IG51bWJlcjtcbiAgICB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBjb250ZXh0OiBhbnk7XG4gICAgdHlwZTogU2xpZGVySGFuZGxlO1xuICAgIGRlYWN0aXZlU3RhdGU6IGJvb2xlYW47XG4gICAgb25UaHVtYlZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25Ib3ZlckNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIHRhYmluZGV4OiBudW1iZXI7XG4gICAgekluZGV4OiBudW1iZXI7XG4gICAgZ2V0IHRodW1iRnJvbUNsYXNzKCk6IGJvb2xlYW47XG4gICAgZ2V0IHRodW1iVG9DbGFzcygpOiBib29sZWFuO1xuICAgIGdldCB0aHVtYkZyb21BY3RpdmVDbGFzcygpOiBib29sZWFuO1xuICAgIGdldCB0aHVtYlRvQWN0aXZlQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBnZXQgdGh1bWJQcmVzc2VkQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBnZXQgbmF0aXZlRWxlbWVudCgpOiBhbnk7XG4gICAgZ2V0IGRlc3Ryb3koKTogU3ViamVjdDxib29sZWFuPjtcbiAgICBjb25zdHJ1Y3RvcihfZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25QaW50ZXJFbnRlcigpOiB2b2lkO1xuICAgIG9uUG9pbnRlckxlYXZlKCk6IHZvaWQ7XG4gICAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBvbkJsdXIoKTogdm9pZDtcbiAgICBvbkZvY3VzTGlzdGVuZXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTaG93IHRodW1iIGxhYmVsIGFuZCByaXBwbGUuXG4gICAgICovXG4gICAgc2hvd1RodW1iSW5kaWNhdG9ycygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEhpZGUgdGh1bWIgbGFiZWwgYW5kIHJpcHBsZS5cbiAgICAgKi9cbiAgICBoaWRlVGh1bWJJbmRpY2F0b3JzKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVUaHVtYlZhbHVlO1xuICAgIHByaXZhdGUgY2FsY3VsYXRlVHJhY2tVcGRhdGU7XG4gICAgcHJpdmF0ZSBzdGVwVG9Qcm9jZWVkO1xuICAgIHByaXZhdGUgdG9nZ2xlVGh1bWJJbmRpY2F0b3JzO1xufVxuIl19