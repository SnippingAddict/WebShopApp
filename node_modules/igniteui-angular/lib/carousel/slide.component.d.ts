import { OnDestroy, EventEmitter, ElementRef } from '@angular/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare enum Direction {
    NONE = 0,
    NEXT = 1,
    PREV = 2
}
/**
 * A slide component that usually holds an image and/or a caption text.
 * IgxSlideComponent is usually a child component of an IgxCarouselComponent.
 *
 * ```
 * <igx-slide [input bindings] >
 *    <ng-content></ng-content>
 * </igx-slide>
 * ```
 *
 * @export
 */
export declare class IgxSlideComponent implements OnDestroy {
    private elementRef;
    private _active;
    private _destroy$;
    /**
     * Gets/sets the `index` of the slide inside the carousel.
     * ```html
     * <igx-carousel>
     *  <igx-slide index = "1"></igx-slide>
     * <igx-carousel>
     * ```
     * @memberOf IgxSlideComponent
     */
    index: number;
    /**
     * Gets/sets the target `direction` for the slide.
     * ```html
     * <igx-carousel>
     *  <igx-slide direction="NEXT"></igx-slide>
     * <igx-carousel>
     * ```
     * @memberOf IgxSlideComponent
     */
    direction: Direction;
    /**
     * Returns the `tabIndex` of the slide component.
     * ```typescript
     * let tabIndex =  this.carousel.tabIndex;
     * ```
     * @memberof IgxSlideComponent
     */
    get tabIndex(): number;
    /**
     * Returns the `aria-selected` of the slide.
     *
     * ```typescript
     * let slide = this.slide.ariaSelected;
     * ```
     *
     */
    get ariaSelected(): boolean;
    /**
     * Returns the `aria-live` of the slide.
     *
     * ```typescript
     * let slide = this.slide.ariaLive;
     * ```
     *
     */
    get ariaLive(): string;
    /**
     * Returns the class of the slide component.
     * ```typescript
     * let class =  this.slide.cssClass;
     * ```
     * @memberof IgxSlideComponent
     */
    cssClass: string;
    /**
     * Gets/sets the `active` state of the slide.
     * ```html
     * <igx-carousel>
     *  <igx-slide [active] ="false"></igx-slide>
     * <igx-carousel>
     * ```
     *
     * Two-way data binding.
     * ```html
     * <igx-carousel>
     *  <igx-slide [(active)] ="model.isActive"></igx-slide>
     * <igx-carousel>
     * ```
     * @memberof IgxSlideComponent
     */
    get active(): boolean;
    set active(value: boolean);
    previous: boolean;
    /**
     *@hidden
     */
    activeChange: EventEmitter<boolean>;
    constructor(elementRef: ElementRef);
    /**
    * Returns a reference to the carousel element in the DOM.
    * ```typescript
    * let nativeElement =  this.slide.nativeElement;
    * ```
    * @memberof IgxSlideComponent
    */
    get nativeElement(): any;
    /**
    * @hidden
    */
    get isDestroyed(): Subject<boolean>;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSlideComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxSlideComponent, "igx-slide", never, { "previous": "previous"; "active": "active"; "index": "index"; "direction": "direction"; }, { "activeChange": "activeChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInNsaWRlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmV4cG9ydCBkZWNsYXJlIGVudW0gRGlyZWN0aW9uIHtcbiAgICBOT05FID0gMCxcbiAgICBORVhUID0gMSxcbiAgICBQUkVWID0gMlxufVxuLyoqXG4gKiBBIHNsaWRlIGNvbXBvbmVudCB0aGF0IHVzdWFsbHkgaG9sZHMgYW4gaW1hZ2UgYW5kL29yIGEgY2FwdGlvbiB0ZXh0LlxuICogSWd4U2xpZGVDb21wb25lbnQgaXMgdXN1YWxseSBhIGNoaWxkIGNvbXBvbmVudCBvZiBhbiBJZ3hDYXJvdXNlbENvbXBvbmVudC5cbiAqXG4gKiBgYGBcbiAqIDxpZ3gtc2xpZGUgW2lucHV0IGJpbmRpbmdzXSA+XG4gKiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gKiA8L2lneC1zbGlkZT5cbiAqIGBgYFxuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4U2xpZGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9hY3RpdmU7XG4gICAgcHJpdmF0ZSBfZGVzdHJveSQ7XG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSBgaW5kZXhgIG9mIHRoZSBzbGlkZSBpbnNpZGUgdGhlIGNhcm91c2VsLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhcm91c2VsPlxuICAgICAqICA8aWd4LXNsaWRlIGluZGV4ID0gXCIxXCI+PC9pZ3gtc2xpZGU+XG4gICAgICogPGlneC1jYXJvdXNlbD5cbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyT2YgSWd4U2xpZGVDb21wb25lbnRcbiAgICAgKi9cbiAgICBpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEdldHMvc2V0cyB0aGUgdGFyZ2V0IGBkaXJlY3Rpb25gIGZvciB0aGUgc2xpZGUuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2Fyb3VzZWw+XG4gICAgICogIDxpZ3gtc2xpZGUgZGlyZWN0aW9uPVwiTkVYVFwiPjwvaWd4LXNsaWRlPlxuICAgICAqIDxpZ3gtY2Fyb3VzZWw+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlck9mIElneFNsaWRlQ29tcG9uZW50XG4gICAgICovXG4gICAgZGlyZWN0aW9uOiBEaXJlY3Rpb247XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYHRhYkluZGV4YCBvZiB0aGUgc2xpZGUgY29tcG9uZW50LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgdGFiSW5kZXggPSAgdGhpcy5jYXJvdXNlbC50YWJJbmRleDtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4U2xpZGVDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgdGFiSW5kZXgoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBhcmlhLXNlbGVjdGVkYCBvZiB0aGUgc2xpZGUuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHNsaWRlID0gdGhpcy5zbGlkZS5hcmlhU2VsZWN0ZWQ7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKi9cbiAgICBnZXQgYXJpYVNlbGVjdGVkKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYGFyaWEtbGl2ZWAgb2YgdGhlIHNsaWRlLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBzbGlkZSA9IHRoaXMuc2xpZGUuYXJpYUxpdmU7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKi9cbiAgICBnZXQgYXJpYUxpdmUoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNsYXNzIG9mIHRoZSBzbGlkZSBjb21wb25lbnQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBjbGFzcyA9ICB0aGlzLnNsaWRlLmNzc0NsYXNzO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hTbGlkZUNvbXBvbmVudFxuICAgICAqL1xuICAgIGNzc0NsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSBgYWN0aXZlYCBzdGF0ZSBvZiB0aGUgc2xpZGUuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2Fyb3VzZWw+XG4gICAgICogIDxpZ3gtc2xpZGUgW2FjdGl2ZV0gPVwiZmFsc2VcIj48L2lneC1zbGlkZT5cbiAgICAgKiA8aWd4LWNhcm91c2VsPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVHdvLXdheSBkYXRhIGJpbmRpbmcuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2Fyb3VzZWw+XG4gICAgICogIDxpZ3gtc2xpZGUgWyhhY3RpdmUpXSA9XCJtb2RlbC5pc0FjdGl2ZVwiPjwvaWd4LXNsaWRlPlxuICAgICAqIDxpZ3gtY2Fyb3VzZWw+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneFNsaWRlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IGFjdGl2ZSgpOiBib29sZWFuO1xuICAgIHNldCBhY3RpdmUodmFsdWU6IGJvb2xlYW4pO1xuICAgIHByZXZpb3VzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIGFjdGl2ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpO1xuICAgIC8qKlxuICAgICogUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgY2Fyb3VzZWwgZWxlbWVudCBpbiB0aGUgRE9NLlxuICAgICogYGBgdHlwZXNjcmlwdFxuICAgICogbGV0IG5hdGl2ZUVsZW1lbnQgPSAgdGhpcy5zbGlkZS5uYXRpdmVFbGVtZW50O1xuICAgICogYGBgXG4gICAgKiBAbWVtYmVyb2YgSWd4U2xpZGVDb21wb25lbnRcbiAgICAqL1xuICAgIGdldCBuYXRpdmVFbGVtZW50KCk6IGFueTtcbiAgICAvKipcbiAgICAqIEBoaWRkZW5cbiAgICAqL1xuICAgIGdldCBpc0Rlc3Ryb3llZCgpOiBTdWJqZWN0PGJvb2xlYW4+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19