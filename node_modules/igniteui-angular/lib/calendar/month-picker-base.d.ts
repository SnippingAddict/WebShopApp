import { IgxCalendarBaseDirective } from './calendar-base';
import { ElementRef, QueryList } from '@angular/core';
/**
 * Sets the calender view - days, months or years.
 */
import * as ɵngcc0 from '@angular/core';
export declare enum CalendarView {
    DEFAULT = 0,
    YEAR = 1,
    DECADE = 2
}
export declare class IgxMonthPickerBaseDirective extends IgxCalendarBaseDirective {
    /**
     * Holds month view index we are operating on.
     */
    protected activeViewIdx: number;
    /**
     * The default `tabindex` attribute for the component.
     *
     * @hidden
     */
    tabindex: number;
    /**
     * @hidden
     */
    yearsBtns: QueryList<ElementRef>;
    /**
     * Gets the current active view.
     */
    get activeView(): CalendarView;
    /**
     * Sets the current active view.
     */
    set activeView(val: CalendarView);
    /**
     * @hidden
     */
    get isDefaultView(): boolean;
    /**
     * @hidden
     */
    get isDecadeView(): boolean;
    /**
     *@hidden
     */
    private _activeView;
    /**
     * @hidden
     */
    changeYear(event: Date): void;
    /**
     * @hidden
     */
    activeViewDecade(activeViewIdx?: number): void;
    /**
     * @hidden
     */
    activeViewDecadeKB(event: any, activeViewIdx?: number): void;
    /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     */
    formattedYear(value: Date): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxMonthPickerBaseDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxMonthPickerBaseDirective, "[igxMonthPickerBase]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtcGlja2VyLWJhc2UuZC50cyIsInNvdXJjZXMiOlsibW9udGgtcGlja2VyLWJhc2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWd4Q2FsZW5kYXJCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9jYWxlbmRhci1iYXNlJztcbmltcG9ydCB7IEVsZW1lbnRSZWYsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBTZXRzIHRoZSBjYWxlbmRlciB2aWV3IC0gZGF5cywgbW9udGhzIG9yIHllYXJzLlxuICovXG5leHBvcnQgZGVjbGFyZSBlbnVtIENhbGVuZGFyVmlldyB7XG4gICAgREVGQVVMVCA9IDAsXG4gICAgWUVBUiA9IDEsXG4gICAgREVDQURFID0gMlxufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4TW9udGhQaWNrZXJCYXNlRGlyZWN0aXZlIGV4dGVuZHMgSWd4Q2FsZW5kYXJCYXNlRGlyZWN0aXZlIHtcbiAgICAvKipcbiAgICAgKiBIb2xkcyBtb250aCB2aWV3IGluZGV4IHdlIGFyZSBvcGVyYXRpbmcgb24uXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFjdGl2ZVZpZXdJZHg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBgdGFiaW5kZXhgIGF0dHJpYnV0ZSBmb3IgdGhlIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0YWJpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB5ZWFyc0J0bnM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IGFjdGl2ZSB2aWV3LlxuICAgICAqL1xuICAgIGdldCBhY3RpdmVWaWV3KCk6IENhbGVuZGFyVmlldztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IGFjdGl2ZSB2aWV3LlxuICAgICAqL1xuICAgIHNldCBhY3RpdmVWaWV3KHZhbDogQ2FsZW5kYXJWaWV3KTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGlzRGVmYXVsdFZpZXcoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGlzRGVjYWRlVmlldygpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX2FjdGl2ZVZpZXc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNoYW5nZVllYXIoZXZlbnQ6IERhdGUpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBhY3RpdmVWaWV3RGVjYWRlKGFjdGl2ZVZpZXdJZHg/OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBhY3RpdmVWaWV3RGVjYWRlS0IoZXZlbnQ6IGFueSwgYWN0aXZlVmlld0lkeD86IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbG9jYWxlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB5ZWFyIGluIHRoZSB5ZWFyIHZpZXcgaWYgZW5hYmxlZCxcbiAgICAgKiBvdGhlcndpc2UgcmV0dXJucyB0aGUgZGVmYXVsdCBgRGF0ZS5nZXRGdWxsWWVhcigpYCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBmb3JtYXR0ZWRZZWFyKHZhbHVlOiBEYXRlKTogc3RyaW5nO1xufVxuIl19