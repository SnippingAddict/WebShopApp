import { __decorate, __extends, __param } from "tslib";
import { AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Input, QueryList, OnInit, Inject, ElementRef, ChangeDetectorRef, ComponentFactoryResolver, IterableDiffers, ViewContainerRef, NgZone, AfterViewInit, OnChanges, Output, EventEmitter, Optional, OnDestroy, DoCheck } from '@angular/core';
import { IgxGridTransaction } from '../grid-base.directive';
import { GridBaseAPIService } from '../api.service';
import { DOCUMENT } from '@angular/common';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { DisplayDensityToken } from '../../core/displayDensity';
import { IgxGridSummaryService } from '../summaries/grid-summary.service';
import { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';
import { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';
import { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';
import { IgxOverlayService } from '../../services/index';
import { takeUntil } from 'rxjs/operators';
import { IgxColumnComponent } from '../columns/column.component';
import { IgxRowIslandAPIService } from './row-island-api.service';
import { IgxColumnResizingService } from '../resizing/resizing.service';
var IgxRowIslandComponent = /** @class */ (function (_super) {
    __extends(IgxRowIslandComponent, _super);
    function IgxRowIslandComponent(selectionService, crudService, colResizingService, gridAPI, transactionFactory, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions, rowIslandAPI) {
        var _this = _super.call(this, selectionService, crudService, colResizingService, gridAPI, typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions) || this;
        _this.selectionService = selectionService;
        _this.colResizingService = colResizingService;
        _this.transactionFactory = transactionFactory;
        _this.document = document;
        _this.overlayService = overlayService;
        _this.summaryService = summaryService;
        _this._displayDensityOptions = _displayDensityOptions;
        _this.rowIslandAPI = rowIslandAPI;
        /**
         * @hidden
         */
        _this.children = new QueryList();
        /**
         * @hidden
         */
        _this.childColumns = new QueryList();
        /**
         * @hidden
         */
        _this.onLayoutChange = new EventEmitter();
        /**
         * Event emmited when a grid is being created based on this row island.
         * ```html
         * <igx-hierarchical-grid [data]="Data" [autoGenerate]="true">
         *      <igx-row-island [key]="'childData'" (onGridCreated)="gridCreated($event)" #rowIsland>
         *          <!-- ... -->
         *      </igx-row-island>
         * </igx-hierarchical-grid>
         * ```
         * @memberof IgxRowIslandComponent
         */
        _this.onGridCreated = new EventEmitter();
        /**
         * @hidden
         */
        _this.initialChanges = [];
        /**
         * @hidden
         */
        _this.rootGrid = null;
        _this.layout_id = "igx-row-island-";
        _this.isInit = false;
        _this.hgridAPI = gridAPI;
        return _this;
    }
    IgxRowIslandComponent_1 = IgxRowIslandComponent;
    Object.defineProperty(IgxRowIslandComponent.prototype, "expandChildren", {
        /**
         * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.
         * ```typescript
         * const expanded = this.rowIsland.expandChildren;
         * ```
         * @memberof IgxRowIslandComponent
         */
        get: function () {
            return this._defaultExpandState;
        },
        /**
         * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.
         * ```html
         * <igx-hierarchical-grid [data]="Data" [autoGenerate]="true">
         *      <igx-row-island [key]="'childData'" [expandChildren]="true" #rowIsland>
         *          <!-- ... -->
         *      </igx-row-island>
         * </igx-hierarchical-grid>
         * ```
         * @memberof IgxRowIslandComponent
         */
        set: function (value) {
            this._defaultExpandState = value;
            this.rowIslandAPI.getChildGrids().forEach(function (grid) {
                if (document.body.contains(grid.nativeElement)) {
                    // Detect changes right away if the grid is visible
                    grid.expandChildren = value;
                    grid.markForCheck();
                }
                else {
                    // Else defer the detection on changes when the grid gets into view for performance.
                    grid.updateOnRender = true;
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowIslandComponent.prototype, "id", {
        /**
         * @hidden
         */
        get: function () {
            var pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';
            return this.layout_id + pId + this.key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowIslandComponent.prototype, "parentId", {
        /**
         * @hidden
         */
        get: function () {
            return this.parentIsland ? this.parentIsland.id : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowIslandComponent.prototype, "level", {
        /**
         * @hidden
         */
        get: function () {
            var ptr = this.parentIsland;
            var lvl = 0;
            while (ptr) {
                lvl++;
                ptr = ptr.parentIsland;
            }
            return lvl + 1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxRowIslandComponent.prototype.ngOnInit = function () {
        this.rootGrid = this.hgridAPI.grid;
        this.rowIslandAPI.rowIsland = this;
    };
    /**
     * @hidden
     */
    IgxRowIslandComponent.prototype.ngDoCheck = function () {
    };
    /**
     * @hidden
     */
    IgxRowIslandComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.updateChildren();
        this.children.notifyOnChanges();
        this.children.changes.pipe(takeUntil(this.destroy$))
            .subscribe(function (change) {
            _this.updateChildren();
            // update existing grids since their child ri have been changed.
            _this.getGridsForIsland(_this.key).forEach(function (grid) {
                grid.onRowIslandChange(_this.children);
            });
        });
        var nestedColumns = this.children.map(function (layout) { return layout.columnList.toArray(); });
        var colsArray = [].concat.apply([], nestedColumns);
        var topCols = this.columnList.filter(function (item) {
            return colsArray.indexOf(item) === -1;
        });
        this.childColumns.reset(topCols);
        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(function () {
            Promise.resolve().then(function () {
                _this.updateColumnList();
            });
        });
    };
    IgxRowIslandComponent.prototype.updateChildren = function () {
        var _this = this;
        if (this.children.first === this) {
            this.children.reset(this.children.toArray().slice(1));
        }
        this.children.forEach(function (child) {
            child.parentIsland = _this;
        });
    };
    /**
     * @hidden
     */
    IgxRowIslandComponent.prototype.ngAfterViewInit = function () {
        this.rowIslandAPI.register(this);
        if (this.parentIsland) {
            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);
        }
        else {
            this.rootGrid.hgridAPI.registerChildRowIsland(this);
        }
        this._init = false;
    };
    /**
     * @hidden
     */
    IgxRowIslandComponent.prototype.ngOnChanges = function (changes) {
        this.onLayoutChange.emit(changes);
        if (!this.isInit) {
            this.initialChanges.push(changes);
        }
    };
    /**
     * @hidden
     */
    IgxRowIslandComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        // Override the base destroy because we don't have rendered anything to use removeEventListener on
        this.destroy$.next(true);
        this.destroy$.complete();
        this._destroyed = true;
        this.rowIslandAPI.unset(this.id);
        if (this.parentIsland) {
            this.getGridsForIsland(this.key).forEach(function (grid) {
                _this.cleanGridState(grid);
                grid.hgridAPI.unsetChildRowIsland(_this);
            });
            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);
        }
        else {
            this.rootGrid.hgridAPI.unsetChildRowIsland(this);
            this.cleanGridState(this.rootGrid);
        }
    };
    IgxRowIslandComponent.prototype.cleanGridState = function (grid) {
        grid.childGridTemplates.forEach(function (tmpl) {
            tmpl.owner.cleanView(tmpl.context.templateID);
        });
        grid.childGridTemplates.clear();
        grid.onRowIslandChange();
    };
    /**
     * @hidden
     */
    IgxRowIslandComponent.prototype.reflow = function () { };
    /**
     * @hidden
     */
    IgxRowIslandComponent.prototype.calculateGridHeight = function () { };
    IgxRowIslandComponent.prototype.updateColumnList = function () {
        var _this = this;
        var nestedColumns = this.children.map(function (layout) { return layout.columnList.toArray(); });
        var colsArray = [].concat.apply([], nestedColumns);
        var topCols = this.columnList.filter(function (item) {
            if (colsArray.indexOf(item) === -1) {
                /* Reset the default width of the columns that come into this row island,
                because the root catches them first during the detectChanges() and sets their defaultWidth. */
                item.defaultWidth = undefined;
                return true;
            }
            return false;
        });
        this.childColumns.reset(topCols);
        if (this.parentIsland) {
            this.parentIsland.columnList.notifyOnChanges();
        }
        else {
            this.rootGrid.columnList.notifyOnChanges();
        }
        this.rowIslandAPI.getChildGrids().forEach(function (grid) {
            grid.createColumnsList(_this.childColumns.toArray());
            if (!document.body.contains(grid.nativeElement)) {
                grid.updateOnRender = true;
            }
        });
    };
    var IgxRowIslandComponent_1;
    IgxRowIslandComponent.ctorParameters = function () { return [
        { type: IgxGridSelectionService },
        { type: IgxGridCRUDService },
        { type: IgxColumnResizingService },
        { type: GridBaseAPIService },
        { type: undefined, decorators: [{ type: Inject, args: [IgxGridTransaction,] }] },
        { type: ElementRef },
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: IterableDiffers },
        { type: ViewContainerRef },
        { type: IgxHierarchicalGridNavigationService },
        { type: IgxFilteringService },
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
        { type: IgxGridSummaryService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
        { type: IgxRowIslandAPIService }
    ]; };
    __decorate([
        Input()
    ], IgxRowIslandComponent.prototype, "key", void 0);
    __decorate([
        Input()
    ], IgxRowIslandComponent.prototype, "expandChildren", null);
    __decorate([
        ContentChildren(IgxRowIslandComponent_1, { read: IgxRowIslandComponent_1, descendants: false })
    ], IgxRowIslandComponent.prototype, "children", void 0);
    __decorate([
        ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })
    ], IgxRowIslandComponent.prototype, "childColumns", void 0);
    __decorate([
        Output()
    ], IgxRowIslandComponent.prototype, "onLayoutChange", void 0);
    __decorate([
        Output()
    ], IgxRowIslandComponent.prototype, "onGridCreated", void 0);
    IgxRowIslandComponent = IgxRowIslandComponent_1 = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            selector: 'igx-row-island',
            template: "",
            providers: [IgxRowIslandAPIService]
        }),
        __param(4, Inject(IgxGridTransaction)),
        __param(7, Inject(DOCUMENT)),
        __param(14, Inject(IgxOverlayService)),
        __param(16, Optional()), __param(16, Inject(DisplayDensityToken))
    ], IgxRowIslandComponent);
    return IgxRowIslandComponent;
}(IgxHierarchicalGridBaseDirective));
export { IgxRowIslandComponent };
//# sourceMappingURL=data:application/json;base64,