import { __decorate, __extends } from "tslib";
import { AfterContentInit, Component, ContentChild, ElementRef, HostBinding, Input, TemplateRef, } from '@angular/core';
import { IgxTabItemTemplateDirective } from './tabs.directives';
import { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';
var IgxTabsGroupComponent = /** @class */ (function (_super) {
    __extends(IgxTabsGroupComponent, _super);
    function IgxTabsGroupComponent(_tabs, _element) {
        var _this = _super.call(this) || this;
        _this._tabs = _tabs;
        _this._element = _element;
        /**
        * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.
        *```html
        *<igx-tabs-group label="Tab 2  Lorem ipsum dolor sit" icon="home" [disabled]="true">
        *```
        */
        _this.disabled = false;
        _this._isSelected = false;
        /**
         * @hidden
         */
        _this.role = 'tabpanel';
        /**
         * @hidden
         */
        _this.styleClass = true;
        return _this;
    }
    Object.defineProperty(IgxTabsGroupComponent.prototype, "isSelected", {
        /**
         * Sets/gets whether a tab group is selected.
         * ```typescript
         * this.tabGroup.isSelected = true;
         * ```
         * ```typescript
         * let isSelected = this.tabGroup.isSelected;
         * ```
         * @memberof IgxTabsGroupComponent
         */
        get: function () {
            return this._isSelected;
        },
        set: function (newValue) {
            if (!this.disabled && this.isSelected !== newValue) {
                this._tabs.performSelectionChange(newValue ? this.relatedTab : null);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "nativeElement", {
        /**
         * Returns the native element of the tabs-group component
         * ```typescript
         *  const mytabsGroupElement: HTMLElement = tabsGroup.nativeElement;
         * ```
         */
        get: function () {
            return this._element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "relatedTab", {
        /**
         * An accessor that returns the `IgxTabItemComponent` component.
         * ```typescript
         * @ViewChild("MyTabsGroup")
         * public tab: IgxTabsGroupComponent;
         * ngAfterViewInIt(){
         *    let tabComponent = this.tab.relatedTab;
         * }
         * ```
         */
        get: function () {
            if (this._tabs.tabs) {
                return this._tabs.tabs.toArray()[this.index];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "index", {
        /**
         * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.
         * ```typescript
         * @ViewChild("MyTabsGroup")
         * public tab: IgxTabsGroupComponent;
         * ngAfterViewInIt(){
         *    let tabIndex = this.tab.index;
         * }
         * ```
         */
        get: function () {
            if (this._tabs.groups) {
                return this._tabs.groups.toArray().indexOf(this);
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "customTabTemplate", {
        /**
         * @hidden
         */
        get: function () {
            return this._tabTemplate;
        },
        /**
         *@hidden
         */
        set: function (template) {
            this._tabTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxTabsGroupComponent.prototype.ngAfterContentInit = function () {
        if (this.tabTemplate) {
            this._tabTemplate = this.tabTemplate.template;
        }
    };
    /**
     * A method that sets the focus on a tab.
     * @memberof {@link IgxTabsGroupComponent}
     *```typescript
     *@ViewChild("MyChild")
     *public tab : IgxTabsGroupComponent;
     *ngAfterViewInit(){
     *    this.tab.select();
     *}
     *```
     */
    IgxTabsGroupComponent.prototype.select = function () {
        if (!this.disabled && !this.isSelected) {
            this._tabs.performSelectionChange(this.relatedTab);
        }
    };
    /**
     * @hidden
     */
    IgxTabsGroupComponent.prototype.setSelectedInternal = function (newValue) {
        this._isSelected = newValue;
    };
    IgxTabsGroupComponent.ctorParameters = function () { return [
        { type: IgxTabsBase },
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], IgxTabsGroupComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], IgxTabsGroupComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], IgxTabsGroupComponent.prototype, "label", void 0);
    __decorate([
        ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })
    ], IgxTabsGroupComponent.prototype, "tabTemplate", void 0);
    __decorate([
        HostBinding('attr.role')
    ], IgxTabsGroupComponent.prototype, "role", void 0);
    __decorate([
        HostBinding('class.igx-tabs__group')
    ], IgxTabsGroupComponent.prototype, "styleClass", void 0);
    IgxTabsGroupComponent = __decorate([
        Component({
            selector: 'igx-tabs-group',
            template: "<ng-content *ngIf=\"isSelected\"></ng-content>\n"
        })
    ], IgxTabsGroupComponent);
    return IgxTabsGroupComponent;
}(IgxTabsGroupBase));
export { IgxTabsGroupComponent };
//# sourceMappingURL=data:application/json;base64,