import { __decorate, __values } from "tslib";
import { CommonModule } from '@angular/common';
import { AfterViewInit, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, Input, NgModule, Output, QueryList, ViewChild, ViewChildren, OnDestroy, NgZone } from '@angular/core';
import { IgxBadgeModule } from '../badge/badge.component';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxIconModule } from '../icon/index';
import { IgxTabItemComponent } from './tab-item.component';
import { IgxTabsGroupComponent } from './tabs-group.component';
import { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';
import { IgxTabsBase } from './tabs.common';
import ResizeObserver from 'resize-observer-polyfill';
import { PlatformUtil } from '../core/utils';
export var IgxTabsType;
(function (IgxTabsType) {
    IgxTabsType["FIXED"] = "fixed";
    IgxTabsType["CONTENTFIT"] = "contentfit";
})(IgxTabsType || (IgxTabsType = {}));
var NEXT_TABS_ID = 0;
var IgxTabsComponent = /** @class */ (function () {
    function IgxTabsComponent(_element, _ngZone, platformUtil) {
        this._element = _element;
        this._ngZone = _ngZone;
        this.platformUtil = platformUtil;
        this._currentTabsId = NEXT_TABS_ID++;
        /**
         *@hidden
         */
        this.selectedIndexChange = new EventEmitter();
        /**
         * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.
         * By default the header sizing mode is `contentfit`.
         * ```html
         * <igx-tabs type="fixed">
         *     <igx-tabs-group label="HOME">Home</igx-tabs-group>
         * </igx-tabs>
         * ```
         */
        this.type = 'contentfit';
        /**
         * Sets/gets the `id` of the tabs.
         *
         * @remarks
         * If not set, the `id` will have value `"igx-tabs-0"`.
         *
         * @example
         * ```html
         * <igx-tabs id="my-first-tabs"></igx-tabs>
         * ```
         * @memberof IgxTabsComponent
         */
        this.id = "igx-tabs-" + this._currentTabsId;
        /**
         * @hidden
         */
        this.class = '';
        /**
         * Emitted when a tab item is deselected.
         * ```html
         * <igx-tabs (onTabItemDeselected)="itemDeselected($event)">
         *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
         *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
         * </igx-tabs>
         * ```
         * ```typescript
         * itemDeselected(e){
         *      const tabGroup = e.group;
         *      const tabItem = e.tab;
         * }
         * ```
         */
        this.onTabItemDeselected = new EventEmitter();
        /**
        * Emitted when a tab item is selected.
        * ```html
        * <igx-tabs (onTabItemSelected)="itemSelected($event)">
        *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
        *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
        * </igx-tabs>
        * ```
        * ```typescript
        * itemSelected(e){
        *      const tabGroup = e.group;
        *      const tabItem = e.tab;
        * }
        * ```
        */
        this.onTabItemSelected = new EventEmitter();
        /**
         * @hidden
         */
        this.offset = 0;
        this._selectedIndex = -1;
    }
    IgxTabsComponent_1 = IgxTabsComponent;
    Object.defineProperty(IgxTabsComponent.prototype, "selectedIndex", {
        /**
        * An @Input property that sets the value of the `selectedIndex`.
        * Default value is 0.
        * ```html
        * <igx-tabs selectedIndex="1">
        * ```
        *
        * Two-way data binding.
        * ```html
        * <igx-tabs [(selectedIndex)]="model.selectedIndex">
        * ```
        */
        get: function () {
            return this._selectedIndex;
        },
        set: function (index) {
            var newIndex = typeof index !== 'number' ? parseInt(index, 10) : index;
            if (this._selectedIndex !== newIndex) {
                if (this.tabs && this.tabs.length > 0) {
                    var newTab = this.tabs.toArray()[newIndex];
                    if (newTab) {
                        this.performSelectionChange(newTab);
                    }
                }
                else {
                    this._selectedIndex = newIndex;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsComponent.prototype, "tabs", {
        /**
         * Provides an observable collection of all `IgxTabItemComponent`s.
         * First try to get them as content children if not available get them as view children.
         * ```typescript
         * const tabItems = this.myTabComponent.tabs;
         * ```
         */
        get: function () {
            if (this.hasContentTabs) {
                return this.contentTabs;
            }
            return this.viewTabs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsComponent.prototype, "hasContentTabs", {
        /**
         *@hidden
         */
        get: function () {
            return (this.contentTabs && this.contentTabs.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsComponent.prototype, "cssClass", {
        /**
         * @hidden
         */
        get: function () {
            var defaultStyle = "igx-tabs";
            var fixedStyle = "igx-tabs--fixed";
            var iconStyle = "igx-tabs--icons";
            var iconLabelFoundInGroups = this.groups.find(function (group) { return group.icon != null && group.label != null; });
            var iconLabelFoundInTabs = this.contentTabs.find(function (tab) { return tab.icon != null && tab.label != null; });
            var css;
            switch (IgxTabsType[this.type.toUpperCase()]) {
                case IgxTabsType.FIXED: {
                    css = fixedStyle;
                    break;
                }
                default: {
                    css = defaultStyle;
                    break;
                }
            }
            // Layout fix for items with icons
            if (iconLabelFoundInGroups !== undefined || iconLabelFoundInTabs !== undefined) {
                css = css + " " + iconStyle;
            }
            return css + " " + this.class;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxTabsComponent.prototype.scrollLeft = function (event) {
        this.scroll(false);
    };
    /**
     * @hidden
     */
    IgxTabsComponent.prototype.scrollRight = function (event) {
        this.scroll(true);
    };
    /**
     * @hidden
     */
    IgxTabsComponent.prototype.scrollElement = function (element, scrollRight) {
        var viewPortWidth = this.viewPort.nativeElement.offsetWidth;
        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;
        this.itemsContainer.nativeElement.style.transform = "translate(" + -this.offset + "px)";
    };
    Object.defineProperty(IgxTabsComponent.prototype, "selectedTabItem", {
        /**
         * Gets the selected `IgxTabItemComponent`.
         * ```
         * const selectedItem = this.myTabComponent.selectedTabItem;
         * ```
         */
        get: function () {
            if (this.tabs && this.selectedIndex !== undefined) {
                return this.tabs.toArray()[this.selectedIndex];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxTabsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this._selectedIndex === -1) {
            this.tabs.forEach(function (t) {
                if (t.isSelected) {
                    _this._selectedIndex = t.index;
                }
            });
        }
        if (!this.hasContentTabs && (this.selectedIndex < 0 || this.selectedIndex >= this.groups.length)) {
            this._selectedIndex = 0;
        }
        if (this.platformUtil.isBrowser) {
            requestAnimationFrame(function () {
                var newTab = _this.tabs.toArray()[_this._selectedIndex];
                if (newTab) {
                    _this.performSelection(newTab);
                }
                else {
                    _this.hideIndicator();
                }
            });
            this._ngZone.runOutsideAngular(function () {
                _this._resizeObserver = new ResizeObserver(function () {
                    if (!_this.hasContentTabs && _this._selectedIndex >= 0 && _this._selectedIndex < _this.tabs.length) {
                        var newTab = _this.tabs.toArray()[_this._selectedIndex];
                        _this.transformContentAnimation(newTab, 0);
                    }
                });
                _this._resizeObserver.observe(_this.tabsContainer.nativeElement);
            });
        }
        this.setGroupsAttributes();
        this._groupChanges$ = this.groups.changes.subscribe(function () {
            _this.setGroupsAttributes();
            _this.resetSelectionOnCollectionChanged();
        });
    };
    /**
     * @hidden
     */
    IgxTabsComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        if (this._groupChanges$) {
            this._groupChanges$.unsubscribe();
        }
        if (this._resizeObserver) {
            this._ngZone.runOutsideAngular(function () {
                _this._resizeObserver.disconnect();
            });
        }
    };
    IgxTabsComponent.prototype.setGroupsAttributes = function () {
        var groupsArray = Array.from(this.groups);
        for (var index = 0; index < this.groups.length; index++) {
            var tabsGroup = groupsArray[index];
            tabsGroup.nativeElement.setAttribute('id', this.getTabsGroupId(index));
            tabsGroup.nativeElement.setAttribute('aria-labelledby', this.getTabItemId(index));
        }
    };
    IgxTabsComponent.prototype.resetSelectionOnCollectionChanged = function () {
        var _this = this;
        requestAnimationFrame(function () {
            var currentTab = _this.tabs.toArray()[_this.selectedIndex];
            if (currentTab) {
                _this.performSelectionChange(currentTab);
            }
            else if (_this.selectedIndex >= _this.tabs.length) {
                _this.performSelectionChange(_this.tabs.last);
            }
            else {
                _this.hideIndicator();
            }
        });
    };
    IgxTabsComponent.prototype.scroll = function (scrollRight) {
        var e_1, _a;
        var tabsArray = this.tabs.toArray();
        try {
            for (var tabsArray_1 = __values(tabsArray), tabsArray_1_1 = tabsArray_1.next(); !tabsArray_1_1.done; tabsArray_1_1 = tabsArray_1.next()) {
                var tab = tabsArray_1_1.value;
                var element = tab.nativeTabItem.nativeElement;
                if (scrollRight) {
                    if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {
                        this.scrollElement(element, scrollRight);
                        break;
                    }
                }
                else {
                    if (element.offsetWidth + element.offsetLeft >= this.offset) {
                        this.scrollElement(element, scrollRight);
                        break;
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (tabsArray_1_1 && !tabsArray_1_1.done && (_a = tabsArray_1.return)) _a.call(tabsArray_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @hidden
     */
    IgxTabsComponent.prototype.performSelectionChange = function (newTab) {
        var oldTab = this.selectedTabItem;
        if (oldTab) {
            this.performDeselection(oldTab);
        }
        if (newTab) {
            this.performSelection(newTab);
        }
        else {
            // if there is no new selected tab hide the selection indicator
            this.hideIndicator();
        }
        this.selectedIndexChange.emit(this._selectedIndex);
    };
    IgxTabsComponent.prototype.performDeselection = function (oldTab) {
        oldTab.setSelectedInternal(false);
        var oldTabRelatedGroup = this.groups.toArray()[oldTab.index];
        if (oldTabRelatedGroup) {
            oldTabRelatedGroup.setSelectedInternal(false);
        }
        this._selectedIndex = -1;
        this.onTabItemDeselected.emit({ tab: oldTab, group: oldTabRelatedGroup });
    };
    IgxTabsComponent.prototype.performSelection = function (newTab) {
        var _this = this;
        newTab.setSelectedInternal(true);
        this._selectedIndex = newTab.index;
        var newTabRelatedGroup = null;
        if (!this.hasContentTabs && this.groups) {
            newTabRelatedGroup = this.groups.toArray()[newTab.index];
            if (newTabRelatedGroup) {
                newTabRelatedGroup.setSelectedInternal(true);
            }
        }
        this.onTabItemSelected.emit({ tab: newTab, group: newTabRelatedGroup });
        requestAnimationFrame(function () {
            // bring the new selected tab into view if it is not
            _this.bringNewTabIntoView(newTab);
            // animate the new selection indicator
            _this.transformIndicatorAnimation(newTab.nativeTabItem.nativeElement);
            // animate the new tab's group content
            if (!_this.hasContentTabs) {
                _this.transformContentAnimation(newTab, 0.2);
            }
        });
    };
    IgxTabsComponent.prototype.bringNewTabIntoView = function (newTab) {
        var tabNativeElement = newTab.nativeTabItem.nativeElement;
        // Scroll left if there is need
        if (tabNativeElement.offsetLeft < this.offset) {
            this.scrollElement(tabNativeElement, false);
        }
        // Scroll right if there is need
        var viewPortOffsetWidth = this.viewPort.nativeElement.offsetWidth;
        var delta = (tabNativeElement.offsetLeft + tabNativeElement.offsetWidth) - (viewPortOffsetWidth + this.offset);
        // Fix for IE 11, a difference is accumulated from the widths calculations
        if (delta > 1) {
            this.scrollElement(tabNativeElement, true);
        }
    };
    /**
     * @hidden
     */
    IgxTabsComponent.prototype.getTabItemId = function (index) {
        return "igx-tab-item-" + this._currentTabsId + "-" + index;
    };
    /**
     * @hidden
     */
    IgxTabsComponent.prototype.getTabsGroupId = function (index) {
        return "igx-tabs-group-" + this._currentTabsId + "-" + index;
    };
    /**
     * @hidden
     */
    // animation for the new panel/group (not needed for tab only mode)
    IgxTabsComponent.prototype.transformContentAnimation = function (tab, duration) {
        var contentOffset = this.tabsContainer.nativeElement.offsetWidth * tab.index;
        this.contentsContainer.nativeElement.style.transitionDuration = duration > 0 ? duration + "s" : 'initial';
        this.contentsContainer.nativeElement.style.transform = "translate(" + -contentOffset + "px)";
    };
    /**
     * @hidden
     */
    IgxTabsComponent.prototype.transformIndicatorAnimation = function (element, duration) {
        if (duration === void 0) { duration = 0.3; }
        if (this.selectedIndicator) {
            this.selectedIndicator.nativeElement.style.visibility = 'visible';
            this.selectedIndicator.nativeElement.style.transitionDuration = duration > 0 ? duration + "s" : 'initial';
            this.selectedIndicator.nativeElement.style.width = element.offsetWidth + "px";
            this.selectedIndicator.nativeElement.style.transform = "translate(" + element.offsetLeft + "px)";
        }
    };
    IgxTabsComponent.prototype.hideIndicator = function () {
        if (this.selectedIndicator) {
            this.selectedIndicator.nativeElement.style.visibility = 'hidden';
        }
    };
    var IgxTabsComponent_1;
    IgxTabsComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: PlatformUtil }
    ]; };
    __decorate([
        ContentChildren(forwardRef(function () { return IgxTabsGroupComponent; }))
    ], IgxTabsComponent.prototype, "groups", void 0);
    __decorate([
        ContentChildren(forwardRef(function () { return IgxTabItemComponent; }))
    ], IgxTabsComponent.prototype, "contentTabs", void 0);
    __decorate([
        Input()
    ], IgxTabsComponent.prototype, "selectedIndex", null);
    __decorate([
        Output()
    ], IgxTabsComponent.prototype, "selectedIndexChange", void 0);
    __decorate([
        Input('type')
    ], IgxTabsComponent.prototype, "type", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxTabsComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxTabsComponent.prototype, "class", void 0);
    __decorate([
        Output()
    ], IgxTabsComponent.prototype, "onTabItemDeselected", void 0);
    __decorate([
        Output()
    ], IgxTabsComponent.prototype, "onTabItemSelected", void 0);
    __decorate([
        ViewChild('contentsContainer', { static: true })
    ], IgxTabsComponent.prototype, "contentsContainer", void 0);
    __decorate([
        ViewChild('headerContainer', { static: true })
    ], IgxTabsComponent.prototype, "headerContainer", void 0);
    __decorate([
        ViewChild('itemsContainer', { static: true })
    ], IgxTabsComponent.prototype, "itemsContainer", void 0);
    __decorate([
        ViewChild('selectedIndicator')
    ], IgxTabsComponent.prototype, "selectedIndicator", void 0);
    __decorate([
        ViewChild('tabsContainer', { static: true })
    ], IgxTabsComponent.prototype, "tabsContainer", void 0);
    __decorate([
        ViewChild('viewPort', { static: true })
    ], IgxTabsComponent.prototype, "viewPort", void 0);
    __decorate([
        ViewChildren(forwardRef(function () { return IgxTabItemComponent; }))
    ], IgxTabsComponent.prototype, "viewTabs", void 0);
    __decorate([
        HostBinding('attr.class')
    ], IgxTabsComponent.prototype, "cssClass", null);
    IgxTabsComponent = IgxTabsComponent_1 = __decorate([
        Component({
            selector: 'igx-tabs',
            template: "<!-- TODO Remove tab container from here -->\n<div #tabsContainer>\n    <div class=\"igx-tabs__header\" #headerContainer>\n        <button igxRipple class=\"igx-tabs__header-button\" igxButton=\"icon\" (click)=\"scrollLeft($event)\" igxLeftButtonStyle>\n            <igx-icon fontSet=\"material\">navigate_before</igx-icon>\n        </button>\n        <div class=\"igx-tabs__header-wrapper-fixed\" #viewPort>\n            <div #itemsContainer class=\"igx-tabs__header-wrapper-fluid\">\n                <ng-container *ngIf=\"!hasContentTabs\">\n                    <igx-tab-item igxRipple\n                        *ngFor=\"let group of groups; let i = index\"\n                        [relatedGroup]=\"group\"\n                        [autoGenerated]=\"true\"\n                        [id]=\"getTabItemId(i)\"\n                        [attr.aria-controls]=\"getTabsGroupId(i)\">\n                    </igx-tab-item>\n                </ng-container>\n                <ng-content select=\"igx-tab-item\"></ng-content>\n                <div #selectedIndicator *ngIf=\"groups.length > 0 || contentTabs.length > 0\" class=\"igx-tabs__header-menu-item-indicator\"></div>\n            </div>\n        </div>\n        <button igxRipple class=\"igx-tabs__header-button\" igxButton=\"icon\" (click)=\"scrollRight($event)\" igxRightButtonStyle>\n            <igx-icon fontSet=\"material\">navigate_next</igx-icon>\n        </button>\n    </div>\n    <div class=\"igx-tabs__content-fixed\">\n        <div #contentsContainer class=\"igx-tabs__content-fluid\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n",
            providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent_1 }]
        })
    ], IgxTabsComponent);
    return IgxTabsComponent;
}());
export { IgxTabsComponent };
/**
 * @hidden
 */
var IgxTabsModule = /** @class */ (function () {
    function IgxTabsModule() {
    }
    IgxTabsModule = __decorate([
        NgModule({
            declarations: [IgxTabsComponent,
                IgxTabsGroupComponent,
                IgxTabItemComponent,
                IgxTabItemTemplateDirective,
                IgxRightButtonStyleDirective,
                IgxLeftButtonStyleDirective],
            exports: [IgxTabsComponent,
                IgxTabsGroupComponent,
                IgxTabItemComponent,
                IgxTabItemTemplateDirective,
                IgxRightButtonStyleDirective,
                IgxLeftButtonStyleDirective],
            imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]
        })
    ], IgxTabsModule);
    return IgxTabsModule;
}());
export { IgxTabsModule };
//# sourceMappingURL=data:application/json;base64,