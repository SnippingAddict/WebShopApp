var IgxGridExcelStyleFilteringComponent_1;
import { __decorate } from "tslib";
import { ChangeDetectorRef, Component, ViewChild, HostBinding, ChangeDetectionStrategy, TemplateRef, Directive, OnDestroy, ElementRef, Input, ViewRef } from '@angular/core';
import { HorizontalAlignment, VerticalAlignment, AbsoluteScrollStrategy, AutoPositionStrategy } from '../../../services/index';
import { IgxStringFilteringOperand, IgxNumberFilteringOperand, IgxBooleanFilteringOperand, IgxDateFilteringOperand } from '../../../data-operations/filtering-condition';
import { FilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { cloneArray } from '../../../core/utils';
import { DataType, DataUtil } from '../../../data-operations/data-util';
import { IgxExcelStyleSearchComponent } from './excel-style-search.component';
import { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';
import { Subject } from 'rxjs';
import { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';
import { takeUntil } from 'rxjs/operators';
import { IgxDropDownComponent } from '../../../drop-down';
import { DisplayDensity } from '../../../core/density';
import { IgxDecimalPipeComponent, IgxDatePipeComponent } from '../../common/pipes';
/**
 *@hidden
 */
export class FilterListItem {
    constructor() {
        this.isSpecial = false;
        this.isBlanks = false;
    }
}
let IgxExcelStyleSortingTemplateDirective = class IgxExcelStyleSortingTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxExcelStyleSortingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxExcelStyleSortingTemplateDirective = __decorate([
    Directive({
        selector: '[igxExcelStyleSorting]'
    })
], IgxExcelStyleSortingTemplateDirective);
export { IgxExcelStyleSortingTemplateDirective };
let IgxExcelStyleMovingTemplateDirective = class IgxExcelStyleMovingTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxExcelStyleMovingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxExcelStyleMovingTemplateDirective = __decorate([
    Directive({
        selector: '[igxExcelStyleMoving]'
    })
], IgxExcelStyleMovingTemplateDirective);
export { IgxExcelStyleMovingTemplateDirective };
let IgxExcelStyleHidingTemplateDirective = class IgxExcelStyleHidingTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxExcelStyleHidingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxExcelStyleHidingTemplateDirective = __decorate([
    Directive({
        selector: '[igxExcelStyleHiding]'
    })
], IgxExcelStyleHidingTemplateDirective);
export { IgxExcelStyleHidingTemplateDirective };
let IgxExcelStylePinningTemplateDirective = class IgxExcelStylePinningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxExcelStylePinningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxExcelStylePinningTemplateDirective = __decorate([
    Directive({
        selector: '[igxExcelStylePinning]'
    })
], IgxExcelStylePinningTemplateDirective);
export { IgxExcelStylePinningTemplateDirective };
/**
 * A component used for presenting Excel style filtering UI for a specific column.
 * It is used internally in the Grid, but could also be hosted in a container outside of it.
 *
 * Example:
 * ```html
 * <igx-grid-excel-style-filtering
 *     [column]="grid1.columns[0]">
 * </igx-grid-excel-style-filtering>
 * ```
 */
let IgxGridExcelStyleFilteringComponent = IgxGridExcelStyleFilteringComponent_1 = class IgxGridExcelStyleFilteringComponent {
    constructor(cdr, element) {
        this.cdr = cdr;
        this.element = element;
        this.shouldOpenSubMenu = true;
        this.expressionsList = new Array();
        this.destroy$ = new Subject();
        this.containsNullOrEmpty = false;
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        this.filterValues = new Set();
        /**
         * @hidden @internal
         */
        this.listData = new Array();
        /**
         * @hidden @internal
         */
        this.uniqueValues = [];
        this._subMenuPositionSettings = {
            verticalStartPoint: VerticalAlignment.Top
        };
        this._subMenuOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            positionStrategy: new AutoPositionStrategy(this._subMenuPositionSettings),
            scrollStrategy: new AbsoluteScrollStrategy()
        };
        /**
         * @hidden @internal
         */
        this.className = 'igx-excel-filter';
        /**
         * @hidden @internal
         */
        this.inline = true;
    }
    /**
     * An @Input property that sets the column.
     */
    set column(value) {
        this._column = value;
        if (this._columnPinning) {
            this._columnPinning.unsubscribe();
        }
        if (this._columnVisibilityChanged) {
            this._columnVisibilityChanged.unsubscribe();
        }
        if (this._filteringChanged) {
            this._filteringChanged.unsubscribe();
        }
        if (this._densityChanged) {
            this._densityChanged.unsubscribe();
        }
        if (this._column) {
            this._column.grid.filteringService.registerSVGIcons();
            this.isColumnPinnable = this.column.pinnable;
            this.init();
            this._columnPinning = this.grid.onColumnPinning.pipe(takeUntil(this.destroy$)).subscribe(() => {
                requestAnimationFrame(() => {
                    this.isColumnPinnable = this.column.pinnable;
                    if (!this.cdr.destroyed) {
                        this.cdr.detectChanges();
                    }
                });
            });
            this._columnVisibilityChanged = this.grid.onColumnVisibilityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {
                this.cdr.detectChanges();
            });
            this._filteringChanged = this.grid.filteringExpressionsTreeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
                this.init();
            });
            this._densityChanged = this.grid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {
                this.cdr.detectChanges();
            });
        }
    }
    /**
     * Returns the current column.
     */
    get column() {
        return this._column;
    }
    /**
     * @hidden @internal
     */
    get filteringService() {
        return this.grid.filteringService;
    }
    /**
     * @hidden @internal
     */
    get minHeight() {
        if (!this.inline) {
            let minHeight = 600;
            switch (this.grid.displayDensity) {
                case DisplayDensity.cosy:
                    minHeight = 465;
                    break;
                case DisplayDensity.compact:
                    minHeight = 330;
                    break;
                default: break;
            }
            return `${minHeight}px`;
        }
    }
    /**
     * @hidden @internal
     */
    get maxHeight() {
        if (!this.inline) {
            let maxHeight = 730;
            switch (this.grid.displayDensity) {
                case DisplayDensity.cosy:
                    maxHeight = 565;
                    break;
                case DisplayDensity.compact:
                    maxHeight = 405;
                    break;
                default: break;
            }
            return `${maxHeight}px`;
        }
    }
    /**
     * @hidden @internal
     */
    get grid() {
        return this.column.grid;
    }
    /**
     * @hidden @internal
     */
    get conditions() {
        return this.column.filters.conditionList();
    }
    /**
     * @hidden @internal
     */
    get subMenuText() {
        switch (this.column.dataType) {
            case DataType.Boolean:
                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;
            case DataType.Number:
                return this.grid.resourceStrings.igx_grid_excel_number_filter;
            case DataType.Date:
                return this.grid.resourceStrings.igx_grid_excel_date_filter;
            default:
                return this.grid.resourceStrings.igx_grid_excel_text_filter;
        }
    }
    /**
     * @hidden @internal
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    init() {
        this.expressionsList = new Array();
        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);
        this.populateColumnData();
    }
    /**
     * @hidden @internal
     */
    clearFilterClass() {
        if (this.column.filteringExpressionsTree) {
            return 'igx-excel-filter__actions-clear';
        }
        return 'igx-excel-filter__actions-clear--disabled';
    }
    /**
     * @hidden @internal
     */
    pinClass() {
        return this.isColumnPinnable ? 'igx-excel-filter__actions-pin' : 'igx-excel-filter__actions-pin--disabled';
    }
    /**
     * @hidden @internal
     */
    initialize(column, overlayService, overlayComponentId) {
        this.inline = false;
        this.column = column;
        this.overlayService = overlayService;
        this.overlayComponentId = overlayComponentId;
        this._subMenuOverlaySettings.outlet = this.grid.outlet;
        requestAnimationFrame(() => {
            this.excelStyleSearch.searchInput.nativeElement.focus();
        });
        this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.closeDropdown();
        });
    }
    /**
     * @hidden @internal
     */
    getCondition(value) {
        return this.column.filters.condition(value);
    }
    /**
     * @hidden @internal
     */
    translateCondition(value) {
        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;
    }
    /**
     * @hidden @internal
     */
    onPin() {
        this.column.pinned = !this.column.pinned;
        this.closeDropdown();
    }
    /**
     * @hidden @internal
     */
    onHideToggle() {
        this.column.hidden = !this.column.hidden;
        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: this.column.hidden });
        this.closeDropdown();
    }
    /**
     * @hidden @internal
     */
    onTextFilterClick(eventArgs) {
        if (this.shouldOpenSubMenu) {
            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;
            const gridRect = this.grid.nativeElement.getBoundingClientRect();
            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();
            let x = dropdownRect.left + dropdownRect.width;
            let x1 = gridRect.left + gridRect.width;
            x += window.pageXOffset;
            x1 += window.pageXOffset;
            if (Math.abs(x - x1) < 200) {
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;
            }
            else {
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;
            }
            this.subMenu.open(this._subMenuOverlaySettings);
            this.shouldOpenSubMenu = false;
        }
    }
    /**
     * @hidden @internal
     */
    onTextFilterKeyDown(eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            this.onTextFilterClick(eventArgs);
        }
    }
    /**
     * @hidden @internal
     */
    onSubMenuClosed() {
        requestAnimationFrame(() => {
            this.shouldOpenSubMenu = true;
        });
    }
    /**
     * @hidden @internal
     */
    onSubMenuSelection(eventArgs) {
        if (this.expressionsList && this.expressionsList.length &&
            this.expressionsList[0].expression.condition.name !== 'in') {
            this.customDialog.expressionsList = this.expressionsList;
        }
        this.customDialog.selectedOperator = eventArgs.newSelection.value;
        eventArgs.cancel = true;
        if (this.overlayComponentId) {
            this.element.nativeElement.style.display = 'none';
        }
        this.subMenu.close();
        this.customDialog.open(this.mainDropdown.nativeElement);
    }
    areExpressionsSelectable() {
        if (this.expressionsList.length === 1 &&
            (this.expressionsList[0].expression.condition.name === 'equals' ||
                this.expressionsList[0].expression.condition.name === 'true' ||
                this.expressionsList[0].expression.condition.name === 'false' ||
                this.expressionsList[0].expression.condition.name === 'empty' ||
                this.expressionsList[0].expression.condition.name === 'in')) {
            return true;
        }
        const selectableExpressionsCount = this.expressionsList.filter(exp => (exp.beforeOperator === 1 || exp.afterOperator === 1) &&
            (exp.expression.condition.name === 'equals' ||
                exp.expression.condition.name === 'true' ||
                exp.expression.condition.name === 'false' ||
                exp.expression.condition.name === 'empty' ||
                exp.expression.condition.name === 'in')).length;
        return selectableExpressionsCount === this.expressionsList.length;
    }
    areExpressionsValuesInTheList() {
        if (this.column.dataType === DataType.Boolean) {
            return true;
        }
        if (this.filterValues.size === 1) {
            const firstValue = this.filterValues.values().next().value;
            if (!firstValue && firstValue !== 0) {
                return true;
            }
        }
        for (let index = 0; index < this.uniqueValues.length; index++) {
            if (this.filterValues.has(this.uniqueValues[index])) {
                return true;
            }
        }
        return false;
    }
    populateColumnData() {
        if (this.grid.uniqueColumnValuesStrategy) {
            this.cdr.detectChanges();
            this.renderColumnValuesRemotely();
        }
        else {
            this.renderColumnValuesFromData();
        }
    }
    renderColumnValuesRemotely() {
        this.excelStyleSearch.isLoading = true;
        const expressionsTree = this.getColumnFilterExpressionsTree();
        this.grid.uniqueColumnValuesStrategy(this.column, expressionsTree, (colVals) => {
            const columnValues = (this.column.dataType === DataType.Date) ?
                colVals.map(val => val ? val.toDateString() : val) : colVals;
            this.renderValues(columnValues);
            this.excelStyleSearch.isLoading = false;
            this.excelStyleSearch.refreshSize();
        });
    }
    renderColumnValuesFromData() {
        let data = this.column.gridAPI.get_all_data(this.grid.id);
        const expressionsTree = this.getColumnFilterExpressionsTree();
        if (expressionsTree.filteringOperands.length) {
            const state = { expressionsTree: expressionsTree };
            data = DataUtil.filter(cloneArray(data), state);
        }
        const columnField = this.column.field;
        const columnValues = (this.column.dataType === DataType.Date) ?
            data.map(record => record[columnField] ? record[columnField].toDateString() : record[columnField]) :
            data.map(record => record[columnField]);
        this.renderValues(columnValues);
    }
    renderValues(columnValues) {
        this.generateUniqueValues(columnValues);
        this.generateFilterValues(this.column.dataType === DataType.Date);
        this.generateListData();
    }
    generateUniqueValues(columnValues) {
        this.uniqueValues = Array.from(new Set(columnValues));
    }
    generateFilterValues(isDateColumn = false) {
        if (isDateColumn) {
            this.filterValues = new Set(this.expressionsList.reduce((arr, e) => {
                if (e.expression.condition.name === 'in') {
                    return [...arr, ...Array.from(e.expression.searchVal.values()).map(v => new Date(v).toDateString())];
                }
                return [...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal]];
            }, []));
        }
        else {
            this.filterValues = new Set(this.expressionsList.reduce((arr, e) => {
                if (e.expression.condition.name === 'in') {
                    return [...arr, ...Array.from(e.expression.searchVal.values())];
                }
                return [...arr, ...[e.expression.searchVal]];
            }, []));
        }
    }
    generateListData() {
        this.listData = new Array();
        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();
        if (this.column.dataType === DataType.Boolean) {
            this.addBooleanItems();
        }
        else {
            this.addItems(shouldUpdateSelection);
        }
        this.listData.sort((a, b) => this.sortData(a, b));
        if (this.column.dataType === DataType.Date) {
            this.uniqueValues = this.uniqueValues.map(value => new Date(value));
        }
        if (this.containsNullOrEmpty) {
            this.addBlanksItem(shouldUpdateSelection);
        }
        this.addSelectAllItem();
        if (!this.cdr.destroyed) {
            this.cdr.detectChanges();
        }
    }
    getColumnFilterExpressionsTree() {
        const gridExpressionsTree = this.grid.filteringExpressionsTree;
        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);
        for (const operand of gridExpressionsTree.filteringOperands) {
            if (operand instanceof FilteringExpressionsTree) {
                const columnExprTree = operand;
                if (columnExprTree.fieldName === this.column.field) {
                    break;
                }
            }
            expressionsTree.filteringOperands.push(operand);
        }
        return expressionsTree;
    }
    addBooleanItems() {
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        this.uniqueValues.forEach(element => {
            const filterListItem = new FilterListItem();
            if (element !== undefined && element !== null && element !== '') {
                if (this.column.filteringExpressionsTree) {
                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true')) {
                        filterListItem.isSelected = true;
                        this.selectAllIndeterminate = true;
                    }
                    else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false')) {
                        filterListItem.isSelected = true;
                        this.selectAllIndeterminate = true;
                    }
                    else {
                        filterListItem.isSelected = false;
                    }
                }
                else {
                    filterListItem.isSelected = true;
                }
                filterListItem.value = element;
                filterListItem.label = element;
                filterListItem.indeterminate = false;
                this.listData.push(filterListItem);
            }
            else {
                this.containsNullOrEmpty = true;
            }
        });
    }
    addItems(shouldUpdateSelection) {
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        const numberPipe = new IgxDecimalPipeComponent(this.column.grid.locale);
        const datePipe = new IgxDatePipeComponent(this.column.grid.locale);
        this.uniqueValues.forEach(element => {
            if (element !== undefined && element !== null && element !== '') {
                const filterListItem = new FilterListItem();
                if (this.column.filteringExpressionsTree) {
                    if (shouldUpdateSelection) {
                        if (this.filterValues.has(element)) {
                            filterListItem.isSelected = true;
                        }
                        else {
                            filterListItem.isSelected = false;
                        }
                        this.selectAllIndeterminate = true;
                    }
                    else {
                        filterListItem.isSelected = false;
                        this.selectAllSelected = false;
                    }
                }
                else {
                    filterListItem.isSelected = true;
                }
                if (this.column.dataType === DataType.Date) {
                    const date = new Date(element);
                    filterListItem.value = date;
                    filterListItem.label = this.column.formatter ?
                        this.column.formatter(date) :
                        datePipe.transform(date, this.column.grid.locale);
                }
                else if (this.column.dataType === DataType.Number) {
                    filterListItem.value = element;
                    filterListItem.label = this.column.formatter ?
                        this.column.formatter(element) :
                        numberPipe.transform(element, this.column.grid.locale);
                }
                else {
                    filterListItem.value = element;
                    filterListItem.label = this.column.formatter ?
                        this.column.formatter(element) :
                        element;
                }
                filterListItem.indeterminate = false;
                this.listData.push(filterListItem);
            }
            else {
                this.containsNullOrEmpty = true;
            }
        });
    }
    addSelectAllItem() {
        const selectAll = new FilterListItem();
        selectAll.isSelected = this.selectAllSelected;
        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;
        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;
        selectAll.indeterminate = this.selectAllIndeterminate;
        selectAll.isSpecial = true;
        this.listData.unshift(selectAll);
    }
    addBlanksItem(shouldUpdateSelection) {
        const blanks = new FilterListItem();
        if (this.column.filteringExpressionsTree) {
            if (shouldUpdateSelection) {
                if (this.filterValues.has(null)) {
                    blanks.isSelected = true;
                }
                else {
                    blanks.isSelected = false;
                }
            }
        }
        else {
            blanks.isSelected = true;
        }
        blanks.value = null;
        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;
        blanks.indeterminate = false;
        blanks.isSpecial = true;
        blanks.isBlanks = true;
        this.listData.unshift(blanks);
    }
    sortData(a, b) {
        let valueA = a.value;
        let valueB = b.value;
        if (typeof (a) === DataType.String) {
            valueA = a.value.toUpperCase();
            valueB = b.value.toUpperCase();
        }
        if (valueA < valueB) {
            return -1;
        }
        else if (valueA > valueB) {
            return 1;
        }
        else {
            return 0;
        }
    }
    selectAllFilterItems() {
        this.listData.forEach(filterListItem => {
            filterListItem.isSelected = true;
            filterListItem.indeterminate = false;
        });
        this.excelStyleSearch.cdr.detectChanges();
    }
    // TODO: sort members by access modifier
    /**
     * @hidden @internal
     */
    get sortingTemplate() {
        if (this.grid.excelStyleSortingTemplateDirective) {
            return this.grid.excelStyleSortingTemplateDirective.template;
        }
        else {
            return this.defaultExcelStyleSortingTemplate;
        }
    }
    /**
     * @hidden @internal
     */
    get movingTemplate() {
        if (this.grid.excelStyleMovingTemplateDirective) {
            return this.grid.excelStyleMovingTemplateDirective.template;
        }
        else {
            return this.defaultExcelStyleMovingTemplate;
        }
    }
    /**
     * @hidden @internal
     */
    get pinningTemplate() {
        if (this.grid.excelStylePinningTemplateDirective) {
            return this.grid.excelStylePinningTemplateDirective.template;
        }
        else {
            return this.defaultExcelStylePinningTemplate;
        }
    }
    /**
     * @hidden @internal
     */
    get hidingTemplate() {
        if (this.grid.excelStyleHidingTemplateDirective) {
            return this.grid.excelStyleHidingTemplateDirective.template;
        }
        else {
            return this.defaultExcelStyleHidingTemplate;
        }
    }
    /**
     * @hidden @internal
     */
    get applyButtonDisabled() {
        return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;
    }
    /**
     * @hidden @internal
     */
    applyFilter() {
        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);
        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);
        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);
        if (unselectedItem) {
            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent_1.filterOptimizationThreshold) {
                selectedItems.forEach(element => {
                    let condition = null;
                    if (element.value !== null && element.value !== undefined) {
                        if (this.column.dataType === DataType.Boolean) {
                            condition = this.createCondition(element.value.toString());
                        }
                        else {
                            condition = this.createCondition('equals');
                        }
                    }
                    else {
                        condition = this.createCondition('empty');
                    }
                    filterTree.filteringOperands.push({
                        condition: condition,
                        fieldName: this.column.field,
                        ignoreCase: this.column.filteringIgnoreCase,
                        searchVal: element.value
                    });
                });
            }
            else {
                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);
                let blanksItem;
                if (blanksItemIndex >= 0) {
                    blanksItem = selectedItems[blanksItemIndex];
                    selectedItems.splice(blanksItemIndex, 1);
                }
                filterTree.filteringOperands.push({
                    condition: this.createCondition('in'),
                    fieldName: this.column.field,
                    ignoreCase: this.column.filteringIgnoreCase,
                    searchVal: new Set(this.column.dataType === DataType.Date ?
                        selectedItems.map(d => new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()) :
                        selectedItems.map(e => e.value))
                });
                if (blanksItem) {
                    filterTree.filteringOperands.push({
                        condition: this.createCondition('empty'),
                        fieldName: this.column.field,
                        ignoreCase: this.column.filteringIgnoreCase,
                        searchVal: blanksItem.value
                    });
                }
            }
            this.filteringService.filterInternal(this.column.field, filterTree);
            this.expressionsList = new Array();
            this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);
        }
        else {
            this.filteringService.clearFilter(this.column.field);
        }
        this.closeDropdown();
    }
    /**
     * @hidden @internal
     */
    cancel() {
        if (!this.overlayComponentId) {
            this.init();
        }
        this.closeDropdown();
    }
    closeDropdown() {
        if (this.overlayComponentId) {
            this.overlayService.hide(this.overlayComponentId);
            this.overlayComponentId = null;
        }
    }
    /**
     * @hidden @internal
     */
    onKeyDown(eventArgs) {
        if (eventArgs.key === "Escape" /* ESCAPE */ || eventArgs.key === "Esc" /* ESCAPE_IE */) {
            this.closeDropdown();
        }
        eventArgs.stopPropagation();
    }
    /**
     * @hidden @internal
     */
    clearFilter() {
        this.filteringService.clearFilter(this.column.field);
        this.selectAllFilterItems();
    }
    /**
     * @hidden @internal
     */
    onClearFilterKeyDown(eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            this.clearFilter();
        }
    }
    /**
     * @hidden @internal
     */
    showCustomFilterItem() {
        const exprTree = this.column.filteringExpressionsTree;
        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&
            !(exprTree.filteringOperands[0].condition &&
                exprTree.filteringOperands[0].condition.name === 'in');
    }
    createCondition(conditionName) {
        switch (this.column.dataType) {
            case DataType.Boolean:
                return IgxBooleanFilteringOperand.instance().condition(conditionName);
            case DataType.Number:
                return IgxNumberFilteringOperand.instance().condition(conditionName);
            case DataType.Date:
                return IgxDateFilteringOperand.instance().condition(conditionName);
            default:
                return IgxStringFilteringOperand.instance().condition(conditionName);
        }
    }
};
IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold = 2;
IgxGridExcelStyleFilteringComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
__decorate([
    Input()
], IgxGridExcelStyleFilteringComponent.prototype, "column", null);
__decorate([
    HostBinding('style.max-height')
], IgxGridExcelStyleFilteringComponent.prototype, "maxHeight", null);
__decorate([
    HostBinding('class.igx-excel-filter')
], IgxGridExcelStyleFilteringComponent.prototype, "className", void 0);
__decorate([
    HostBinding('class.igx-excel-filter--inline')
], IgxGridExcelStyleFilteringComponent.prototype, "inline", void 0);
__decorate([
    ViewChild('dropdown', { read: ElementRef })
], IgxGridExcelStyleFilteringComponent.prototype, "mainDropdown", void 0);
__decorate([
    ViewChild('subMenu', { read: IgxDropDownComponent })
], IgxGridExcelStyleFilteringComponent.prototype, "subMenu", void 0);
__decorate([
    ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent })
], IgxGridExcelStyleFilteringComponent.prototype, "customDialog", void 0);
__decorate([
    ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent })
], IgxGridExcelStyleFilteringComponent.prototype, "excelStyleSearch", void 0);
__decorate([
    ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent })
], IgxGridExcelStyleFilteringComponent.prototype, "excelStyleSorting", void 0);
__decorate([
    ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef, static: true })
], IgxGridExcelStyleFilteringComponent.prototype, "defaultExcelStyleSortingTemplate", void 0);
__decorate([
    ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef, static: true })
], IgxGridExcelStyleFilteringComponent.prototype, "defaultExcelStyleHidingTemplate", void 0);
__decorate([
    ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef, static: true })
], IgxGridExcelStyleFilteringComponent.prototype, "defaultExcelStyleMovingTemplate", void 0);
__decorate([
    ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef, static: true })
], IgxGridExcelStyleFilteringComponent.prototype, "defaultExcelStylePinningTemplate", void 0);
IgxGridExcelStyleFilteringComponent = IgxGridExcelStyleFilteringComponent_1 = __decorate([
    Component({
        changeDetection: ChangeDetectionStrategy.OnPush,
        preserveWhitespaces: false,
        selector: 'igx-grid-excel-style-filtering',
        template: "<ng-template #defaultExcelStyleSortingTemplate>\n    <igx-excel-style-sorting #excelStyleSorting\n        class=\"igx-excel-filter__sort\"\n        [column]=\"column\"\n        [grid]=\"grid\"\n        [displayDensity]=\"grid.displayDensity\">\n    </igx-excel-style-sorting>\n</ng-template>\n\n<ng-template #defaultExcelStyleMovingTemplate>\n    <igx-excel-style-column-moving\n        class=\"igx-excel-filter__move\"\n        [column]=\"column\"\n        [grid]=\"grid\"\n        [isColumnPinnable]=\"isColumnPinnable\"\n        [displayDensity]=\"grid.displayDensity\">\n    </igx-excel-style-column-moving>\n</ng-template>\n\n<ng-template #defaultExcelStylePinningTemplate>\n    <div [ngClass]=\"pinClass()\"\n        (click)=\"onPin()\"\n        tabindex=\"0\"\n        *ngIf=\"!column.pinned\">\n        <span>{{ grid.resourceStrings.igx_grid_excel_pin }}</span>\n        <igx-icon fontSet=\"filtering-icons\" name=\"pin\"></igx-icon>\n    </div>\n\n    <div class=\"igx-excel-filter__actions-unpin\"\n        (click)=\"onPin()\"\n        tabindex=\"0\"\n        *ngIf=\"column.pinned\">\n        <span>{{ grid.resourceStrings.igx_grid_excel_unpin }}</span>\n        <igx-icon fontSet=\"filtering-icons\" name=\"unpin\"></igx-icon>\n    </div>\n</ng-template>\n\n<ng-template #defaultExcelStyleHidingTemplate>\n    <div class=\"igx-excel-filter__actions-hide\"\n        tabindex=\"0\"\n        (click)=\"onHideToggle()\">\n        <span>{{ column.hidden ? grid.resourceStrings.igx_grid_excel_show : grid.resourceStrings.igx_grid_excel_hide }}</span>\n        <igx-icon>{{ column.hidden ? 'visibility' : 'visibility_off' }}</igx-icon>\n    </div>\n</ng-template>\n\n<article #dropdown\n    *ngIf=\"column\"\n    class=\"igx-excel-filter__menu\"\n    [ngClass]=\"{\n        'igx-excel-filter__menu--cosy': grid.displayDensity === 'cosy',\n        'igx-excel-filter__menu--compact': grid.displayDensity === 'compact'\n    }\"\n    [id]=\"overlayComponentId\"\n    (keydown)=\"onKeyDown($event)\"\n    [style.min-height]=\"minHeight\"\n    [style.max-height]=\"maxHeight\">\n\n    <header class=\"igx-excel-filter__menu-header\">\n        <h4>{{ column.header || column.field }}</h4>\n        <div *ngIf=\"grid.displayDensity!=='comfortable'\" class=\"igx-excel-filter__menu-header-actions\">\n            <button *ngIf=\"!column.disablePinning && !column.pinned\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                (click)=\"onPin()\"\n                [disabled]=\"!isColumnPinnable\"\n                tabindex=\"0\">\n                <igx-icon fontSet=\"filtering-icons\" name=\"pin\"></igx-icon>\n            </button>\n            <button *ngIf=\"!column.disablePinning && column.pinned\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                (click)=\"onPin()\"\n                tabindex=\"0\">\n                <igx-icon fontSet=\"filtering-icons\" name=\"unpin\"></igx-icon>\n            </button>\n            <button *ngIf=\"!column.disableHiding\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                tabindex=\"0\"\n                (click)=\"onHideToggle()\">\n                <igx-icon>{{ column.hidden ? 'visibility' : 'visibility_off' }}</igx-icon>\n            </button>\n        </div>\n    </header>\n\n    <div *ngIf=\"column.sortable\">\n        <ng-container *ngTemplateOutlet=\"sortingTemplate\"></ng-container>\n    </div>\n\n    <section class=\"igx-excel-filter__actions\">\n\n        <div *ngIf=\"column.movable\">\n            <ng-container *ngTemplateOutlet=\"movingTemplate\"></ng-container>\n        </div>\n\n        <div *ngIf=\"!column.disablePinning && grid.displayDensity==='comfortable'\">\n            <ng-container *ngTemplateOutlet=\"pinningTemplate\"></ng-container>\n        </div>\n\n        <div *ngIf=\"!column.disableHiding && grid.displayDensity==='comfortable'\">\n            <ng-container *ngTemplateOutlet=\"hidingTemplate\"></ng-container>\n        </div>\n\n        <div\n            tabindex=\"0\"\n            [ngClass]=\"clearFilterClass()\"\n            (keydown)=\"onClearFilterKeyDown($event)\"\n            (click)=\"clearFilter()\">\n            <span>{{ grid.resourceStrings.igx_grid_excel_filter_clear }}</span>\n            <igx-icon>clear</igx-icon>\n        </div>\n\n        <div\n            tabindex=\"0\"\n            class=\"igx-excel-filter__actions-filter\"\n            (keydown)=\"onTextFilterKeyDown($event)\"\n            (click)=\"onTextFilterClick($event)\"\n            [igxDropDownItemNavigation]=\"subMenu\" >\n            <span>{{ subMenuText }}</span>\n            <igx-icon>keyboard_arrow_right</igx-icon>\n        </div>\n    </section>\n\n    <igx-excel-style-search\n        class=\"igx-excel-filter__menu-main\"\n        #excelStyleSearch\n        [column]=\"column\"\n        [data]=\"listData\"\n        [grid]=\"grid\"\n        [inline]=\"inline\"\n        [displayDensity]=\"grid.displayDensity\">\n    </igx-excel-style-search>\n\n    <footer class=\"igx-excel-filter__menu-footer\">\n        <button igxButton [displayDensity]=\"grid.displayDensity\" (click)=\"cancel()\">{{ grid.resourceStrings.igx_grid_excel_cancel }}</button>\n        <button igxButton=\"raised\" [displayDensity]=\"grid.displayDensity\" [disabled]=\"applyButtonDisabled\" (click)=\"applyFilter()\">{{ grid.resourceStrings.igx_grid_excel_apply }}</button>\n    </footer>\n</article>\n\n<igx-drop-down\n    *ngIf=\"column\"\n    #subMenu\n    [maxHeight]=\"'397px'\"\n    [displayDensity]=\"grid.displayDensity\"\n    (onSelection)=\"onSubMenuSelection($event)\"\n    (onClosed)=\"onSubMenuClosed()\">\n    <div>\n        <igx-drop-down-item\n            *ngFor=\"let condition of conditions\"\n            [value]=\"condition\">\n            <igx-icon fontSet=\"filtering-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\n            <span style=\"margin-left: 16px\">{{ translateCondition(condition) }}</span>\n        </igx-drop-down-item>\n        <igx-drop-down-item *ngIf=\"showCustomFilterItem()\">\n            <igx-icon>filter_list</igx-icon>\n            <span style=\"margin-left: 16px\">{{ grid.resourceStrings.igx_grid_excel_custom_filter }}</span>\n        </igx-drop-down-item>\n    </div>\n</igx-drop-down>\n\n<igx-excel-style-custom-dialog\n    *ngIf=\"column\"\n    #customDialog\n    [column]=\"column\"\n    [filteringService]=\"filteringService\"\n    [overlayComponentId]=\"overlayComponentId\"\n    [overlayService]=\"overlayService\"\n    [displayDensity]=\"grid.displayDensity\">\n</igx-excel-style-custom-dialog>\n"
    })
], IgxGridExcelStyleFilteringComponent);
export { IgxGridExcelStyleFilteringComponent };
//# sourceMappingURL=data:application/json;base64,